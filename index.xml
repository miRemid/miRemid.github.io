<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>狸猫窝</title><link>https://blog.zxykm.xyz/</link><description>Recent content on 狸猫窝</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 14 Jun 2021 19:18:03 +0800</lastBuildDate><atom:link href="https://blog.zxykm.xyz/index.xml" rel="self" type="application/rss+xml"/><item><title>NFT基本原理</title><link>https://blog.zxykm.xyz/posts/nft%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 14 Jun 2021 19:18:03 +0800</pubDate><guid>https://blog.zxykm.xyz/posts/nft%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</guid><description>本文节选翻译自Github Ethereum EIPs Eip-721#rationale
现在有很多旨在追踪可区分资产的基于以太坊智能合约的提议。例如Decentraland现有或计划中的的NFT、CryptoPunks中的eponymouse和游戏中如DMarket或EnjinCoin的物品系统。在未来，可以用于追踪现实生活中的资产例如房产（如ubiquity和Propy等公司的想法）。当这些物品在分类账单中没有集中在一起时显得至关重要，每个资产必须单独并能够独立追踪其所有权信息。
为什么选择NFT这个词 NFT这个词让几乎每个人都能够满意的接受，并且广泛适用于可区分数字资产的领域。我们认识到契约在对于一个本标准的某些应用时又确切的描述（特别是物理性质）。
除了NFT这个词还考虑了别的单词，例如：Alternatives considered, Distinguishable asset, Title, Token, Asset, Equity, Ticket
NFT的标识 每一个NFT都由一个使用ERC-721智能合约生成的独一无二的uint256ID。这个验证数字在合约中将不会发生改变。这个配对信息（合约地址、uint256 ID）将会成为全球中独一无二且完全合格的以太坊链上的特定资产证明。尽管有些ETC-721智能合约可能发现从0开始依次递增的NFT ID非常方便，但是调用者并不能假设那个ID数字有对他们具有任何特定的模式，并把这些ID成为黑匣子。要注意的是，NFTs可能会变成无效Token或被摧毁。请参照支持的枚举界面中的枚举函数。
使用uint256作为ID让广泛的应用得以运用，因为UUID和sha3哈希散列值可以直接转换为uint256。
转移机制 ETC-721定义了一个安全的转移函数safeTransferForm（不使用bytes参数进行重载）和一个不安全函数transferFrom。转移可能会在下述角色中进行初始化：
NFT的所有者 接收NFT的地址 一个对于当前NFT拥有者可信任的操作员 另外，可信任的操作员可能会为NFT设置一个可接受的地址。这为钱包、代理人和实际应用提供一系列有力的工具来使用这些大量NFT。
转移和接受函数文档只适用于交易必须抛出时的指定条件下。你自己的复现可能会在其他情况下同样被抛出。这让众多复现产生有趣的结果
Disallow transfers if the contract is paused — prior art, CryptoKitties deployed contract, line 611 Blacklist certain address from receiving NFTs — prior art, CryptoKitties deployed contract, lines 565, 566 Disallow unsafe transfers — transferFrom throws unless _to equals msg.</description></item><item><title>NFT让互联网更属于自己</title><link>https://blog.zxykm.xyz/posts/nft%E6%A6%82%E8%A6%81/</link><pubDate>Sun, 13 Jun 2021 13:24:49 +0800</pubDate><guid>https://blog.zxykm.xyz/posts/nft%E6%A6%82%E8%A6%81/</guid><description>本文翻译自NFTs make the internet ownable
为什么加密变成数字媒体的港湾  在成为技术人员之前，我是一名音乐艺术管理员。当我开始创业，我坚信在艺术行业中有一件定理：拥有权决定能力。例如，音乐标签对音乐掌握所有权，从而掌握创作者。
 我们的目标是通过技术手段让艺术家更能贴近粉丝，帮助艺术家保持对于他们的作品的所有权，并独立的进行商业活动。今天，我们都是在线创作者，并且继续拥有相当规模的所有权。然而，所有权对技术平台的作用往往被忽视。
 每天都有数亿的图片、视频、音乐盒其他媒体在社交平台上分享。当这些文件被上传时，都会将文件从创作者设备中拷贝一分保存在服务器平台上，Facebook、Twitter、Youtube、TikTok等都是如此。
 这看似只是一件细小的动作，但在上传时，创作者并不是简单的被复制文件，同时还被复制了该作品在平台上的所有权。
 我在谈及明确规定了上传文件信息的服务条款时，它的所有权都将在平台上分享出去，并套现。这是有一些优点的，例如平台可以提供基于广告收入的分销。但是，在今日的货币化模型中，并不总是和创作者的最佳利益相持平。并且平台都是依此为生的。久而久之，平台会窃取大量的创作者信息。
 而与此同时，加密是解锁不同的路径，我称之为Ownership Economy，一个讨论更广泛的、提供用户与用户之间直接建立、操作和持有的互联网平台。
 在媒体领域，NFTs或者说Non-Fungible Tokens让这种为创作者保持其内容所有权的平台成为现实，并且他们的作品在互联网传播上不受任何限制。因此，NFTs拥有颠覆媒体创作者及其他们的作品的潜力，为他们提供了一种可行的平台驱动货币化的替代品。
 一种对NFTs最简单的解释就是保存在区块链上的文件。这意味着，它们不可能被复制、修改、删除或其他操作。
 这些保护机制源使加密货币有价值的相同技术，如比特币。NFTs同样也是数字货币，可以购买、卖出、交易，其所有权和出处都将通过区块链来追踪。非常明显你的就是你的，并且不需要任何第三方来保证你所拥有的所有权。
 NFTs让拥有数字资产变为可能，同样的也可以拥有数字货币例如比特币
 对于许多人来说，NFTs就和新诞生的玩具一样，是一个很快就会破灭的泡沫。虽然正式的数字艺术品和加密收藏品所花费的钱一直很快是实事，但它们在雕刻创作者货币化的行为是非常有效的。
 我相信我们在NFTs成为互联网中每一块媒体的港湾是正确的。这包括了2D音频/视频和文本工作，以及未来将包含的游戏和虚拟世界代理的3D工作。
 我所相信的NFT将会把未来通过NFT带向让每个利益相关者更好的商业模式，创作者、官中和开发人员可以围绕真正的数字所有权市场中赚取更多的利益。
NFT是如何工作的  在实践中，NFT知识一个简单的用于标识数字文件的唯一令牌。每一个NFT都有规范的标识信息，一个独一无二的ID。与之挂钩的ID是一随意的元信息，例如可以是创建人、这个NFT有关的信息或价格历史。当一个NFT被创作者生产(铸币)时，它的信息将会在区块链上永久保存并成为生产工作的数字护照。再进一步，随时在另一个平台上发布媒体时，该平台都可以通过检查护照查看该媒体的整个交易历史。这意味着，一个创新的成果可以通过在区块链上注册不可变记录来追溯原始信息。一张互联网上的图片或不再是二维数据。相反，它可以通过引入Z轴来宝尊其所有历史信息和可由第三方发现的上下文信息，用于增加其文化和财务价值。
拥有数字艺术品有价值吗  对于NFT的一个共同疑惑是，由于数字艺术和数字收集品可以被复制，但并不会携带很多价值。但NFT创造了另一种可能，即在流动性的工作之中继续保持其真正的所有权。
 一个文件在互联网上浏览的越多，其价值也越高，想想大规模生成的霍格图像和T恤。随着臭名昭着的增加，拥有规范作品的概念变得更加激动，更有一个社会地位的标志。 它还可以推动可以从转售工作中推出的值，应该在购买后的臭名令人闻名(实在不会翻译)。NFT让收藏夹能在现实中获取大多数好处，其中额外的奖金费用可以在互联网上自由共享而不是限制，从而通过更广泛的分布式网络来积累更多的价值。
 这不仅针对于艺术品。加密收藏平将会在更多领域如游戏、数字时尚、皮肤以及艺术和编程之间的关系发生作用。
为什么要立刻收集NFT  回到现实，和许多技术的炒作循环一样，投机价值通常受限于功能价值。由于这些资产是可编程的，任何开发者都可以在其中创建。并且因为NFT是用户便携式的，可编程资产可以触及整个数字世界中的所有程序。
 Tokens和智能合约被称之为金钱乐高，这是因为它们可以通过在[Remix]的DeFi程序中编程开发。同样，NFT是也是开发人员和创作者的媒体乐高，可以随意创建新的体验。因此，用户可以期待更为丰富的产品，并在所有物品中重复使用。
长远来看，NFT将会走向何处  我认为NFTS将成为所有互联网媒体的进入港口，因为所涉及的每个人都可以从他们启用的市场中赚更多资金：创造者通过直接销售给粉丝并通过每次NFTS转售时收集特许权使用费，创造者赚更多的资金。 这是一个完全是新的收入流，只有可能是可以在媒体本身中编码版税逻辑的真正数字所有权。
 对于消费者来说，NFT是一个更好的模型，因为它们将惠顾人数的社会和功利福利结合起来的可能性来转动利润或实现复合效用。 在今天的网络上，消费者租用大多数商品和服务，包括他们光顾的创造者。 新的所有权经济平台的一个关键宗旨是游戏中患上肌肤的激励对齐。 关于支持创造者，我称之为“pitronage +”，其中“加号”是与您支持的创造者一起获得价值的可能性。 这是一个强大的，探讨的激励，成为第一名的赞助人 - 我认为它可能在创造性的工作中推动更多的市场中的市场需求。
 开发人员可以通过建筑物赚钱以启用这些新市场。 Wheras主要平台扼杀开发人员API并限制自由市场开发，开发商在申请方面的基础设施方面展望，在许多方面，在许多方面，函数更像是物质世界的运作。</description></item><item><title>Innodb事物隔离级别及其锁 美团技术学习</title><link>https://blog.zxykm.xyz/posts/innodb%E4%BA%8B%E7%89%A9%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E5%8F%8A%E5%85%B6%E9%94%81-%E7%BE%8E%E5%9B%A2%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/</link><pubDate>Sun, 13 Jun 2021 12:40:53 +0800</pubDate><guid>https://blog.zxykm.xyz/posts/innodb%E4%BA%8B%E7%89%A9%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E5%8F%8A%E5%85%B6%E9%94%81-%E7%BE%8E%E5%9B%A2%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/</guid><description>&lt;blockquote>
&lt;p>本文是阅读&lt;a href="https://tech.meituan.com/2014/08/20/innodb-lock.html">美团技术团队&lt;/a>的记录形文章，更详细内容请访问美团技术团队官方网站&lt;/p>
&lt;/blockquote></description></item><item><title>用官方的方式安装Archlinux</title><link>https://blog.zxykm.xyz/posts/%E7%94%A8%E5%AE%98%E6%96%B9%E7%9A%84%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85archlinux/</link><pubDate>Sun, 23 May 2021 22:47:09 +0800</pubDate><guid>https://blog.zxykm.xyz/posts/%E7%94%A8%E5%AE%98%E6%96%B9%E7%9A%84%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85archlinux/</guid><description>Archlinux是一个非常干净的Linux发行版，干净到以致于图形化界面都没有，本文将按照官方wiki，逐步安装Archlinux
由于国内网络问题，可以到一些镜像网站中来下载iso镜像，这里选择清华镜像，下载最新的5.15版本
关于启动盘，可以使用USBWriter或者Rufus来制作，这里就不多加赘述
准备过程 检查引导模式 要安装Arch，首先要确认自己电脑的引导模式，可以通过以下指令来检查
ls /sys/firmware/efi/efivars 如果该指令没有出错并列出了文件列表，则你的电脑是使用UEFI模式引导的。如果文件不存在，则系统将会使用BIOS(或CSM)模式来引导启动。如果电脑并不是以你想要的方式启动，则需要到主板BIOS中手动设置引导模式
连接网络 Arch的安装一定需要联网，因此在确认引导模式之后，必须要检查网络连接状态。你可以通过以下步骤来检查自己的网络状态:
确保网卡正确插入，例如通过ip link来检查 对于无线用户，确保无线网卡工作正常，可以通过rfkill list来检查 连接到互联网 有线用户：插入网线 无线用户：通过iwctl接入WIFI 移动热点：通过mmcli连接热点 配置网络连接 DHCP：动态IP、DNS服务，适用于有线网络、无线网络…… 静态IP地址 确认网络连接ping www.baidu.com 更改时间配置 首先通过date -R来检查时间是否正确，如果不正确则可以通过timedatectl来更改时区
首先通过timedatectl list-timezones来获取时区列表 选择自己所在时区，以国内为例，通过timedatectl set-timezone Asia/Shanghai来更改时区 同步时区timedatectl set-ntp true 分区 电脑中的硬盘将会以设备块的形式出现在系统之中，例如/dev/sda,/dev/nvmeOn1，可以通过fdisk来查看
fdisk -l 以下列表的分区是必要的
用于存放根目录的/分区 对UEFI模式的用户来说还需要一个EFI system partition 对于BIOS用户，需要将root分区挂载到/mnt中，而UEFI还需要将EFI system partition挂载到/mnt/boot或/mnt/efi分区之中
假设当前为BIOS模式，且硬盘为/dev/sda大小为15G，我们可以用fdisk来对硬盘进行分区
fdisk /dev/sda # 进入分区模式 g # 创建分区表 n # 创建swap分区 # 选择任意一个编号（通常默认） # 选择起始区域（通常默认） +2G # n # 创建根目录分区 # 选择任意一个编号（通常默认） # 选择起始区域（通常默认） +13G t # 更改分区类型 1 # 选择swap分区 L # 查看所有类型 19 # 选择Linux swap # 如果是efi用户，还需要更改efi分区类型 格式化 分区完后，需要将所有分区进行格式化。通常来说，分区时efi分区为第一个区，其次是swap区然后是根目录区，按照这个顺序以此格式化。在这里，只有两个分区分别为</description></item><item><title>Hugo+Github Action自动部署静态页面</title><link>https://blog.zxykm.xyz/posts/hugo+github-action%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/</link><pubDate>Sat, 22 May 2021 17:37:27 +0800</pubDate><guid>https://blog.zxykm.xyz/posts/hugo+github-action%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/</guid><description>Hugo Hugo is one of the most popular open-source static site generators. With its amazing speed and flexibility, Hugo makes building websites fun again.
安装 如果你是Windows用户，可以直接从Github Release页面下载对应的版本即可
如果你是Linux用户则有三种方式来安装Hugo
从Github Release下载 从包管理器下载 自行编译 在这介绍下自行编译，最新的Hugo使用到了go1.16的io/fs包，因此如果想自行编译最新版本的Hugo则要安装或更新系统go版本至1.16+。安装完语言编译环境后按以下步骤进行
mkdir $HOME/src cd $HOME/src git clone https://github.com/gohugoio/hugo.git cd hugo go install 如果你想让Hugo支持sass的话则需要编译另一个版本
CGO_ENABLED=1 go install --tags extended 在终端中输入hugo version来检查是否编译成功
创建站点 安装完Hugo后就可以来创建一个网站站点，假设名称为demo
hugo new site demo cd demo git init 在初始化站点后，需要为站点选择一个主题，这里选择我使用的Hermit</description></item><item><title>TCP和HTTP和HTTPS</title><link>https://blog.zxykm.xyz/posts/tcp%E5%92%8Chttp%E5%92%8Chttps/</link><pubDate>Wed, 24 Feb 2021 21:49:01 +0800</pubDate><guid>https://blog.zxykm.xyz/posts/tcp%E5%92%8Chttp%E5%92%8Chttps/</guid><description>本文主要介绍一下TCP和HTTP&amp;amp;HTTPS之间的关系
TCP TCP是传输层上的面向连接的可靠传输协议
三次握手 TCP的连接通过三次握手来完成，第一次握手由客户端发起，客户端设置数据包中SYN字段为1，ACK字段为1并随机选取一个值x作为该数据包的seq发送给服务器并调整当前状态为SYN_SEND 服务器在接受到来自客户端的SYN=1的数据包后知道要开始建立连接，于是服务器设置SYN字段为1，ACK为1，随机选取一个值y作为该包的seq并设置下一个希望得到的数据包序列号为x+1最后发送给客户端并调整当前转台为SYN_RECIVE 客户端在收到第二个握手包后可以确定服务端与自己的连接是互通的，于是设置数据包的ACK字段为1，seq为x+1并设置希望下一个来自服务端的数据包的序列号为y+1发送给服务端服务端在接受到第三个握手包后可以确定客户端与自己的连接是互通的，由此可以确保数据的传输 四次挥手 TCP的断开连接可以由客户端或服务端发起，设发起的一方为客户端
客户端设置数据包的FIN字段为1，假设当前seq为u发送该包之后客户端调整状态为FIN_WAIT1 服务端在收到FIN的数据包后调整状态为CLOSE_WAIT并设置数据包的ACK为1，ack为u+1,seq为w 客户端在收到服务端的ACK包后进入FIN_WAIT2状态，持续等待；服务端在发送完ACK包后不会立刻断开连接，而是会等待服务端所有数据全部传输完成之后在向客户端发起第三次挥手，其FIN为1，ACK为1，seq为v，ack为u+1 客户端在收到该FIN后进入TIME_WAIT状态并向服务端发送ACK=1，seq为u+1，ack=v+1的数据包通知服务端关闭连接，服务端在收到后会立刻关闭连接而客户端则会等待2 如果客户端出现故障会如何 服务端会在与客户端连接之后设置一个计时器，当客户端出现故障，服务端不可能一直等待下去，计时器会在建立时开始及时，通常为2个消失，每一次收到客户端连接之后都会重置计时器。当计时器结束之后服务端可以认为客户端出现故障或不再需要数据，此时就关闭连接
HTTP HTTP是一种明文传输的超文本传输协议
由于其是明文的因此非常的不安全，由此诞生了HTTPS
HTTPS HTTPS是建立在HTTP之上的，其在传输过程中加上了一层SSL/TLS用于给文本加密
HTTPS的加密解密同时使用了对称加密和非对称加密，由于非对称加密的性能要比对称加密低，因此HTTPS会在交换对称加密密钥时进行非对称加密传输，防止被中间人猜出。然后再根据得到的密钥文件对要传输的内容进行对称加密
认证问题 在HTTPS中，每一个连接都会在其头部添加数字签名，生成数字签名的密钥由CA发放
服务端报文经过HASH处理后生成摘要信息，摘要信息使用私钥加密生成签名，随同报文一起发送给客户端
客户端接受后将签名提取出来并用公钥进行解密，如果能正确解密则说明该报文是来自服务端的
数据完整性 在解决认证问题后就要解决数据完整性的问题，而这个问题就会使用上述的摘要信息进行完成
客户端在对摘要进行解密后会得到该报文的Hash摘要，客户端只需要通过把报文中的数据提取出来进行相同的Hash操作得到另一份摘要后与前一份进行对比就能判断传输的数据是否完整了
而Hash算法等相关信息都会在证书交换中进行传送
工作流程 Client Hello
客户端向服务端发送Client Hello消息，该消息包含客户端生成的随机数Random1、客户端支持的加密套件和SSL版本信息等 Server Hello
服务端向客户端发送Server Hello消息，该消息会从Client Hello中确定一份加密套件，该套件决定了后续加密和生成摘要所需使用的集体算法，除此之外还会生成一个随机数Random2 Certificate
服务端下发证书给客户端，让客户端验证自己的身份，客户端验证通过后取出公钥 Certificate Verify 客户端收到服务端的证书后先从CA验证证书合法性，提取证书中的公钥并生成随机数Random3，再用刚刚提取的公钥对随机数加密生成PreMasterKey发送给服务端 Client Key Exchange 服务端通过私钥解密得到Random3，此时客户端服务端均包含三个随机数，双方根据之前协定的算法生成一份密钥，在握手结束后的数据传输均使用该密钥进行对称加密 EncryptedHandshakeMessage 客户端将前面的握手消息生成摘要再用协商好的密钥加密发送给服务端，服务端用密钥解密如果能够解出则说明密钥一致 Change Cipher Spec 服务端通知客户端后续消息均使用加密 Encrypted Handshake Message 服务端将握手消息生成摘要加密发送给客户端，客户端接受后解密，成功则说明一致 Application data 此时双方已安全协商密钥，至此后续所有应用层数据都将使用该密钥进行加密后通过TCP进行传输 TLS版本区别 在1.</description></item><item><title>Web用户认证方法对比</title><link>https://blog.zxykm.xyz/posts/web%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81%E6%96%B9%E6%B3%95%E5%AF%B9%E6%AF%94/</link><pubDate>Fri, 08 Jan 2021 21:33:13 +0000</pubDate><guid>https://blog.zxykm.xyz/posts/web%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81%E6%96%B9%E6%B3%95%E5%AF%B9%E6%AF%94/</guid><description>&lt;blockquote>
&lt;p>本文翻译自&lt;a href="https://testdriven.io/blog/web-authentication-methods/#authentication-vs-authorization">testdriven.io&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>在这篇文章，我们将从一名Python开发者的视角来观察目前最常见的几种处理Web认证的方式&lt;/p>
&lt;blockquote>
&lt;p>尽管本片文章所有的代码是面向Python开发者的，但是实际上对所有的Web开发者，每种认证方法实际上都是差不多的&lt;/p>
&lt;/blockquote>
&lt;h1 id="认证vs授权authentication-vs-authorization">认证vs授权(Authentication vs Authorization)&lt;/h1>
&lt;p>认证是一种处理用户或设备尝试通过凭证来访问受限系统的过程。而授权则是验证用户或设备是否有权限来访问系统提供的确切服务&lt;/p>
&lt;p>简单来讲就是&lt;/p>
&lt;ul>
&lt;li>认证：你是谁？&lt;/li>
&lt;li>授权：你可以做什么？&lt;/li>
&lt;/ul>
&lt;p>认证比授权出现的更早，用户必须在获得访问资源权限之前经过合法验证。最常见的用户认证方法就是&lt;code>username&lt;/code>和&lt;code>password&lt;/code>。一旦认证完成，不同身份例如&lt;code>admin&lt;/code>、&lt;code>moderator&lt;/code>等等，都将被附加在用户身上用于提供访问系统的身份信息。&lt;/p>
&lt;p>有了上述的解释，让我们来看一看验证用户的不同方法吧&lt;/p></description></item><item><title>About Me</title><link>https://blog.zxykm.xyz/about-me/</link><pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate><guid>https://blog.zxykm.xyz/about-me/</guid><description>I&amp;rsquo;m a postgraduate from SZU, interested in blockchain and distributed system.
Go is my favorite programming language, and I&amp;rsquo;m learning Rust now.
My GitHub.
My Steam ID is [Wind]. If you want to play with me, plz send me a friend request:)</description></item></channel></rss>