<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 狸猫窝</title><link>https://blog.thinkmoe.icu/posts/</link><description>Recent content in Posts on 狸猫窝</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 09 Mar 2023 14:42:35 +0800</lastBuildDate><atom:link href="https://blog.thinkmoe.icu/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>TopK面试题1</title><link>https://blog.thinkmoe.icu/posts/topk%E9%9D%A2%E8%AF%95%E9%A2%981/</link><pubDate>Thu, 09 Mar 2023 14:42:35 +0800</pubDate><guid>https://blog.thinkmoe.icu/posts/topk%E9%9D%A2%E8%AF%95%E9%A2%981/</guid><description>TopK来源
使用递归及非递归两种方式实现快速排序 快排思想，选取一个哨兵节点，从左边寻找到第一个比哨兵大的节点，从右边寻找到第一个比哨兵小的节点，交换两者位置。 如果寻找过程中没有找到对应的元素，则说明排序已经完成
首先是递归的方式
func quick_sort(nums []int){ _quick_sort(nums, 0, len(nums)-1) } func _quick_sort(nums []int, left, right int) { if left &amp;gt;= right { return } k := nums[right] l, r := left, right - 1 for l &amp;lt; r { for l &amp;lt; r &amp;amp;&amp;amp; nums[i] &amp;lt; k { l++ } for r &amp;gt; l &amp;amp;&amp;amp; nums[r] &amp;gt; k { r-- } nums[l], nums[r] = nums[r], nums[l] } nums[right], nums[l] = nums[l], nums[right] _quick_sort(nums, left, l-1) _quick_sort(nums, l+1, right) } 非递归版本，其实就是用栈模拟递归</description><content type="html"><![CDATA[<blockquote>
<p><a href="https://osjobs.net/topk/all/">TopK来源</a></p>
</blockquote>
<h2 id="使用递归及非递归两种方式实现快速排序">使用递归及非递归两种方式实现快速排序</h2>
<p>快排思想，选取一个哨兵节点，从左边寻找到第一个比哨兵大的节点，从右边寻找到第一个比哨兵小的节点，交换两者位置。
如果寻找过程中没有找到对应的元素，则说明排序已经完成</p>
<p>首先是递归的方式</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">quick_sort</span><span class="p">(</span><span class="nx">nums</span> <span class="p">[]</span><span class="kt">int</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="nf">_quick_sort</span><span class="p">(</span><span class="nx">nums</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">nums</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">_quick_sort</span><span class="p">(</span><span class="nx">nums</span> <span class="p">[]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">left</span><span class="p">,</span> <span class="nx">right</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">left</span> <span class="o">&gt;=</span> <span class="nx">right</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> 
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">k</span> <span class="o">:=</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">right</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="nx">l</span><span class="p">,</span> <span class="nx">r</span> <span class="o">:=</span> <span class="nx">left</span><span class="p">,</span> <span class="nx">right</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">l</span> <span class="p">&lt;</span> <span class="nx">r</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="nx">l</span> <span class="p">&lt;</span> <span class="nx">r</span> <span class="o">&amp;&amp;</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">&lt;</span> <span class="nx">k</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">l</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="nx">r</span> <span class="p">&gt;</span> <span class="nx">l</span> <span class="o">&amp;&amp;</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span> <span class="p">&gt;</span> <span class="nx">k</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">r</span><span class="o">--</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="nx">nums</span><span class="p">[</span><span class="nx">l</span><span class="p">],</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span> <span class="p">=</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">r</span><span class="p">],</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">l</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">nums</span><span class="p">[</span><span class="nx">right</span><span class="p">],</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">l</span><span class="p">]</span> <span class="p">=</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">l</span><span class="p">],</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">right</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="nf">_quick_sort</span><span class="p">(</span><span class="nx">nums</span><span class="p">,</span> <span class="nx">left</span><span class="p">,</span> <span class="nx">l</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nf">_quick_sort</span><span class="p">(</span><span class="nx">nums</span><span class="p">,</span> <span class="nx">l</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nx">right</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>非递归版本，其实就是用栈模拟递归</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">quick_sort_with_stack</span><span class="p">(</span><span class="nx">nums</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">type</span> <span class="nx">pair</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">s</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="nx">pair</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">nums</span><span class="p">)</span> <span class="p">&lt;</span> <span class="mi">2</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">s</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="nx">pair</span><span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">nums</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nb">len</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">p</span> <span class="o">:=</span> <span class="nx">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="nx">s</span> <span class="p">=</span> <span class="nx">s</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
</span></span><span class="line"><span class="cl">        <span class="nx">left</span><span class="p">,</span> <span class="nx">right</span> <span class="o">:=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">left</span> <span class="o">&gt;=</span> <span class="nx">right</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">continue</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="nx">k</span> <span class="o">:=</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">p</span><span class="p">.</span><span class="nx">y</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="nx">left</span> <span class="p">&lt;</span> <span class="nx">right</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="nx">left</span> <span class="p">&lt;</span> <span class="nx">right</span> <span class="o">&amp;&amp;</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">left</span><span class="p">]</span> <span class="p">&lt;</span> <span class="nx">k</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">left</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="nx">left</span> <span class="p">&lt;</span> <span class="nx">right</span> <span class="o">&amp;&amp;</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">right</span><span class="p">]</span> <span class="p">&gt;</span> <span class="nx">k</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">right</span><span class="o">--</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="nx">nums</span><span class="p">[</span><span class="nx">left</span><span class="p">],</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">right</span><span class="p">]</span> <span class="p">=</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">right</span><span class="p">],</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">left</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="nx">nums</span><span class="p">[</span><span class="nx">p</span><span class="p">.</span><span class="nx">y</span><span class="p">],</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">left</span><span class="p">]</span> <span class="p">=</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">left</span><span class="p">],</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">p</span><span class="p">.</span><span class="nx">y</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="nx">s</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="nx">pair</span><span class="p">{</span><span class="nx">p</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="nx">left</span> <span class="o">-</span> <span class="mi">1</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">        <span class="nx">s</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="nx">pair</span><span class="p">{</span><span class="nx">left</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">y</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="环形链表">环形链表</h2>
<blockquote>
<p>给你一个链表的头节点 head ，判断链表中是否有环。
如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。注意：pos 不作为参数进行传递 。仅仅是为了标识链表的实际情况。
如果链表中存在环 ，则返回 true 。 否则，返回 false 。</p>
</blockquote>
<p>经典双指针问题，可以用hashmap但没必要</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">ListNode</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Val</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Next</span> <span class="o">*</span><span class="nx">ListNode</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">hasCycle</span><span class="p">(</span><span class="nx">head</span> <span class="o">*</span><span class="nx">ListNode</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">head</span> <span class="o">==</span> <span class="kc">nil</span> <span class="o">||</span> <span class="nx">head</span><span class="p">.</span><span class="nx">Next</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> 
</span></span><span class="line"><span class="cl">    <span class="nx">slow</span><span class="p">,</span> <span class="nx">fast</span> <span class="o">:=</span> <span class="nx">head</span><span class="p">,</span> <span class="nx">head</span><span class="p">.</span><span class="nx">Next</span><span class="p">.</span><span class="nx">Next</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">fast</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">fast</span><span class="p">.</span><span class="nx">Next</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">slow</span> <span class="o">==</span> <span class="nx">fast</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="nx">slow</span> <span class="p">=</span> <span class="nx">slow</span><span class="p">.</span><span class="nx">Next</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fast</span> <span class="p">=</span> <span class="nx">fast</span><span class="p">.</span><span class="nx">Next</span><span class="p">.</span><span class="nx">Next</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>但还是加一个HashMap的方法吧，万一面试官要求用呢</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">hasCycle</span><span class="p">(</span><span class="nx">head</span> <span class="o">*</span><span class="nx">ListNode</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">hashMap</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="o">*</span><span class="nx">ListNode</span><span class="p">]</span><span class="kd">struct</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">head</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">hashMap</span><span class="p">[</span><span class="nx">head</span><span class="p">];</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="nx">hashMap</span><span class="p">[</span><span class="nx">head</span><span class="p">]</span> <span class="p">=</span> <span class="kd">struct</span><span class="p">{}{}</span>
</span></span><span class="line"><span class="cl">        <span class="nx">head</span> <span class="p">=</span> <span class="nx">head</span><span class="p">.</span><span class="nx">Next</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="lru-缓存机制">LRU 缓存机制</h2>
<p>经典LRU缓存机制，简单复习一下LRU</p>
<p>LRU缓存简单来讲是一个栈入结构，保存着使用最为频繁的缓存数据，使得可以快速在内存中查询到数据而不需要进行一次额外的数据查询例如数据库查询以提高效率，在操作系统的页表中也有使用</p>
<p>为了实现最热的缓存数据，我们首先想到的是用数组栈来模拟，但为了更方便我们选择双向链表来实现，当然在Leetcode官方题解中也使用了双向链表</p>
<p>在这里，为了体验Golang的泛型并且充分了解双向链表的使用，决定从头编写双向链表而非使用官方的container包</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"></code></pre></div><h2 id="反转链表">反转链表</h2>
<p>经典面试题，分递归和非递归版本，首先是递归版本</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">reverseLink</span><span class="p">(</span><span class="nx">head</span> <span class="o">*</span><span class="nx">ListNode</span><span class="p">)</span> <span class="o">*</span><span class="nx">ListNode</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">head</span> <span class="o">==</span> <span class="kc">nil</span> <span class="o">||</span> <span class="nx">head</span><span class="p">.</span><span class="nx">Next</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">head</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">newHead</span> <span class="o">:=</span> <span class="nf">reverseLink</span><span class="p">(</span><span class="nx">head</span><span class="p">.</span><span class="nx">Next</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">head</span><span class="p">.</span><span class="nx">Next</span><span class="p">.</span><span class="nx">Next</span> <span class="p">=</span> <span class="nx">head</span>
</span></span><span class="line"><span class="cl">    <span class="nx">head</span><span class="p">.</span><span class="nx">Next</span> <span class="p">=</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">newHead</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>然后是非递归版本</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">reverseLink</span><span class="p">(</span><span class="nx">head</span> <span class="o">*</span><span class="nx">ListNode</span><span class="p">)</span> <span class="o">*</span><span class="nx">ListNode</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">prev</span> <span class="o">*</span><span class="nx">ListNode</span>
</span></span><span class="line"><span class="cl">    <span class="nx">cur</span> <span class="o">:=</span> <span class="nx">head</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">cur</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">next</span> <span class="o">:=</span> <span class="nx">cur</span><span class="p">.</span><span class="nx">Next</span>
</span></span><span class="line"><span class="cl">        <span class="nx">cur</span><span class="p">.</span><span class="nx">Next</span> <span class="p">=</span> <span class="nx">prev</span>
</span></span><span class="line"><span class="cl">        <span class="nx">prev</span> <span class="p">=</span> <span class="nx">cur</span>
</span></span><span class="line"><span class="cl">        <span class="nx">cur</span> <span class="p">=</span> <span class="nx">next</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">prev</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="删除链表的倒数第-n-个结点">删除链表的倒数第 N 个结点</h2>
<p>经典双指针题目，先让快指针走N次，随后生成新的指针直到快指针走完，慢指针指向的节点就是第N个节点，删除即可</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">removeNthFromEnd</span><span class="p">(</span><span class="nx">head</span> <span class="o">*</span><span class="nx">ListNode</span><span class="p">,</span> <span class="nx">n</span> <span class="kt">int</span><span class="p">)</span> <span class="o">*</span><span class="nx">ListNode</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">dummyNode</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">ListNode</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">Next</span><span class="p">:</span> <span class="nx">head</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fast</span> <span class="o">:=</span> <span class="nx">dummyNode</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">n</span> <span class="o">&amp;&amp;</span> <span class="nx">fast</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fast</span> <span class="p">=</span> <span class="p">(</span><span class="nx">fast</span><span class="p">.</span><span class="nx">Next</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">ptr</span> <span class="o">:=</span> <span class="nx">dummyNode</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">fast</span><span class="p">.</span><span class="nx">Next</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">ptr</span> <span class="p">=</span> <span class="nx">ptr</span><span class="p">.</span><span class="nx">Next</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fast</span> <span class="p">=</span> <span class="nx">fast</span><span class="p">.</span><span class="nx">Next</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">ptr</span><span class="p">.</span><span class="nx">Next</span> <span class="p">=</span> <span class="nx">ptr</span><span class="p">.</span><span class="nx">Next</span><span class="p">.</span><span class="nx">Next</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">dummyNode</span><span class="p">.</span><span class="nx">Next</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="快速排序的空间复杂度是多少时间复杂度的最好最坏的情况是多少有哪些优化方案">快速排序的空间复杂度是多少？时间复杂度的最好最坏的情况是多少，有哪些优化方案？</h2>
<ol>
<li>快速排序的空间复杂度可以为$O(logn)$</li>
<li>时间复杂度最好的情况下为O(nlogn)，最坏情况下为O(n^2)</li>
<li>快速排序的优化点如下
<ul>
<li>采用随机哨兵策略，如[5,4,3,2,1]这种数据的影响。另外也可以选择三数的中位数（左、中、右，中间数据，如8, 0, 6，选择6作为哨兵）</li>
<li>快排针对数据量小并且部分有序的数组效率并不高，可以在切分为一定大小后转换为插入排序</li>
<li>将与哨兵相同的元素放在分割点附近，减少分割后的数组长度</li>
</ul>
</li>
</ol>
]]></content></item><item><title>Jetson TX2 NX 配置笔记</title><link>https://blog.thinkmoe.icu/posts/jetson-tx2-nx-%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/</link><pubDate>Sun, 05 Mar 2023 22:01:11 +0800</pubDate><guid>https://blog.thinkmoe.icu/posts/jetson-tx2-nx-%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/</guid><description>Jetson真的好贵啊&amp;gt; &amp;lt;
tx2nx开发板
由于科研的需要，需要在边缘设备上对深度学习模型进行量化测试。实验室内刚好有闲置的Nvidia Jetson TX2开发板，所以就直接拿来测试了
原本以为在开发板上的配置会比较简单，无非就是从x86平台转换到arm上面，但实际上坑非常多例如前面提到的arm架构，其实在Jetson上面压根不是传统的arm架构，而是从armv8独立分支出来的aarch架构
虽然坑非常多，但总体上配置流程也非常简洁，基本配置过程也和x86平台上面大致相同，只是在安装的时候需要注意。本文大纲如下
烧录安装系统 安装conda虚拟环境 安装Pytorch和torchvision 安装torch2trt 安装系统 首先需要烧录镜像到开发板中，由于我这块板子在购买的时候代理商就已经烧录好了系统到固件中，因此直接开机即可
如果是裸板安装，则可以参考知乎的教程进行烧录安装
连接电源启动开发板，在安装界面中可以选择启用CPU核心的选项，默认是4核，对应的SWAP大小为2GB，可以按照自己的需求进行更改。当然，如果已经安装完了系统也可以在系统中进行修改。
tx2自带的存储大小非常小只有16GB，按需求进行扩容，我这里是外接了一块128G的SSD硬盘
安装conda虚拟环境 按照本人的习惯，需要一个虚拟环境用于区分不同项目的环境，在tx2也不例外。这里就出现了第一个坑，那就是官方的conda并不能在tx2上完美运行！ 就算你下载的是aarch架构的脚本，你在安装过程中也可能报错，又或者即使安装成功你在创建虚拟环境选择低版本的Python时也会出现错误
为了解决这个问题，我们需要使用一个修改版的conda，那就是Mambaforge。从官方的Release中下载所需要的脚本文件(注意得是aarch架构的文件！)，安装方式则和普通版本的conda如出一辙，需要注意的是安装的位置需要选择一个容量更大的硬盘上面
wget https://github.com/conda-forge/miniforge/releases/download/22.11.1-4/Mambaforge-22.11.1-4-Linux-aarch64.sh sh Mambaforge-22.11.1-4-Linux-aarch64.sh 随后创建你的第一个环境吧
conda create -n hello python=3.6 conda activate hello 安装Pytorch和torchvision 在安装Pytorch前，你需要安装Jetson的CUDA环境，默认情况下是没有的，当然在Nvidia自家产品上安装CUDA环境非常简单，不像Linux那样惹人厌。安装只需要一条命令即可
sudo apt install nvidia-jetpack 这时，查看/usr/local中应该就会出现对应的CUDA环境了，Jetpack会帮助你安装CUDA工具包、TensorRT和其他工具，你可以通过jetson_release来查看当前安装的CUDA版本
(base) tx2-1@tx2-1-desktop:/usr/local$ jetson_release Software part of jetson-stats 4.1.5 - (c) 2023, Raffaello Bonghi Model: lanai-3636 - Jetpack 4.6.1 [L4T 32.7.1] NV Power Mode: MAXP_CORE_ARM - Type: 3 jtop: - Version: 4.</description><content type="html"><![CDATA[<blockquote>
<p>Jetson真的好贵啊&gt; &lt;</p>
</blockquote>
<figure><img src="/images/jetsontx2nx.jpg"
         alt="image"/><figcaption>
            <p>tx2nx开发板</p>
        </figcaption>
</figure>

<!-- raw HTML omitted -->
<p>由于科研的需要，需要在边缘设备上对深度学习模型进行量化测试。实验室内刚好有闲置的Nvidia Jetson TX2开发板，所以就直接拿来测试了</p>
<p>原本以为在开发板上的配置会比较简单，无非就是从x86平台转换到arm上面，但实际上坑非常多例如前面提到的arm架构，其实在Jetson上面压根不是传统的arm架构，而是从armv8独立分支出来的aarch架构</p>
<p>虽然坑非常多，但总体上配置流程也非常简洁，基本配置过程也和x86平台上面大致相同，只是在安装的时候需要注意。本文大纲如下</p>
<ul>
<li>烧录安装系统</li>
<li>安装conda虚拟环境</li>
<li>安装Pytorch和torchvision</li>
<li>安装torch2trt</li>
</ul>
<!-- raw HTML omitted -->
<h2 id="安装系统">安装系统</h2>
<p>首先需要烧录镜像到开发板中，由于我这块板子在购买的时候代理商就已经烧录好了系统到固件中，因此直接开机即可</p>
<p>如果是裸板安装，则可以参考知乎的教程进行烧录安装</p>
<p>连接电源启动开发板，在安装界面中可以选择启用CPU核心的选项，默认是4核，对应的SWAP大小为2GB，可以按照自己的需求进行更改。当然，如果已经安装完了系统也可以在系统中进行修改。</p>
<p>tx2自带的存储大小非常小只有16GB，按需求进行扩容，我这里是外接了一块128G的SSD硬盘</p>
<h2 id="安装conda虚拟环境">安装conda虚拟环境</h2>
<p>按照本人的习惯，需要一个虚拟环境用于区分不同项目的环境，在tx2也不例外。这里就出现了第一个坑，那就是官方的conda并不能在tx2上完美运行！
就算你下载的是aarch架构的脚本，你在安装过程中也可能报错，又或者即使安装成功你在创建虚拟环境选择低版本的Python时也会出现错误</p>
<p>为了解决这个问题，我们需要使用一个修改版的conda，那就是<a href="https://github.com/conda-forge/miniforge">Mambaforge</a>。从官方的<a href="https://github.com/conda-forge/miniforge/releases">Release</a>中下载所需要的脚本文件(<strong>注意得是aarch架构的文件！</strong>)，安装方式则和普通版本的conda如出一辙，需要注意的是安装的位置需要选择一个容量更大的硬盘上面</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">wget https://github.com/conda-forge/miniforge/releases/download/22.11.1-4/Mambaforge-22.11.1-4-Linux-aarch64.sh
</span></span><span class="line"><span class="cl">sh Mambaforge-22.11.1-4-Linux-aarch64.sh
</span></span></code></pre></div><p>随后创建你的第一个环境吧</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">conda create -n hello <span class="nv">python</span><span class="o">=</span>3.6
</span></span><span class="line"><span class="cl">conda activate hello
</span></span></code></pre></div><h2 id="安装pytorch和torchvision">安装Pytorch和torchvision</h2>
<p>在安装Pytorch前，你需要安装Jetson的CUDA环境，默认情况下是没有的，当然在Nvidia自家产品上安装CUDA环境非常简单，不像Linux那样惹人厌。安装只需要一条命令即可</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo apt install nvidia-jetpack
</span></span></code></pre></div><p>这时，查看<code>/usr/local</code>中应该就会出现对应的CUDA环境了，Jetpack会帮助你安装CUDA工具包、TensorRT和其他工具，你可以通过<code>jetson_release</code>来查看当前安装的CUDA版本</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">(</span>base<span class="o">)</span> tx2-1@tx2-1-desktop:/usr/local$ jetson_release
</span></span><span class="line"><span class="cl">Software part of jetson-stats 4.1.5 - <span class="o">(</span>c<span class="o">)</span> 2023, Raffaello Bonghi
</span></span><span class="line"><span class="cl">Model: lanai-3636 - Jetpack 4.6.1 <span class="o">[</span>L4T 32.7.1<span class="o">]</span>
</span></span><span class="line"><span class="cl">NV Power Mode: MAXP_CORE_ARM - Type: <span class="m">3</span>
</span></span><span class="line"><span class="cl">jtop:
</span></span><span class="line"><span class="cl"> - Version: 4.1.5
</span></span><span class="line"><span class="cl"> - Service: Active
</span></span><span class="line"><span class="cl">Libraries:
</span></span><span class="line"><span class="cl"> - CUDA: 10.2.300
</span></span><span class="line"><span class="cl"> - cuDNN: 8.2.1.32
</span></span><span class="line"><span class="cl"> - TensorRT: 8.2
</span></span><span class="line"><span class="cl"> - VPI: 1.2.3
</span></span><span class="line"><span class="cl"> - OpenCV: 4.1.1 - with CUDA: NO
</span></span></code></pre></div><p>此时，你也可以将CUDA的环境添加到终端中，为后续编译做准备</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># $HOME/.bashrc</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">CUDA_HOME</span><span class="o">=</span>/usr/local/cuda
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="nv">$CUDA_HOME</span>/bin
</span></span></code></pre></div><p>接下来就要开始安装Pytorch了，注意的是在Jetson设备上并不能像传统conda环境那样直接通过conda或pip安装，需要到Nvidia官方下载对应的安装包。而torchvision也需要自己手动编译安装或下载第三方编译好的包进行安装。以下流程均来自<a href="https://forums.developer.nvidia.com/t/pytorch-for-jetson/72048">官方教程</a></p>
<ol>
<li>安装Pytorch
在这里，由于虚拟环境选择的Python版本为3.6，而最高支持3.6版本的Pytorch版本为1.8.0，所以这里安装1.8.0版本</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">wget https://nvidia.box.com/shared/static/p57jwntv436lfrd78inwl7iml6p13fzh.whl -O torch-1.8.0-cp36-cp36m-linux_aarch64.whl
</span></span><span class="line"><span class="cl">sudo apt-get install python3-pip libopenblas-base libopenmpi-dev libomp-dev
</span></span><span class="line"><span class="cl">conda activate hello
</span></span><span class="line"><span class="cl">pip install cython <span class="nv">numpy</span><span class="o">==</span>1.19.4 torch-1.8.0-cp36-cp36m-linux_aarch64.whl
</span></span></code></pre></div><p>注意，这里<code>numpy</code>选择安装<code>1.19.4</code>版本，默认的<code>1.19.5</code>版本会出现莫名其妙的bug</p>
<ol start="2">
<li>安装torchvision<br>
安装torchvison需要注意所安装的torch版本，对应列表如下</li>
</ol>
<pre tabindex="0"><code>PyTorch v1.0 - torchvision v0.2.2
PyTorch v1.1 - torchvision v0.3.0
PyTorch v1.2 - torchvision v0.4.0
PyTorch v1.3 - torchvision v0.4.2
PyTorch v1.4 - torchvision v0.5.0
PyTorch v1.5 - torchvision v0.6.0
PyTorch v1.6 - torchvision v0.7.0
PyTorch v1.7 - torchvision v0.8.1
PyTorch v1.8 - torchvision v0.9.0
PyTorch v1.9 - torchvision v0.10.0
PyTorch v1.10 - torchvision v0.11.1
PyTorch v1.11 - torchvision v0.12.0
PyTorch v1.12 - torchvision v0.13.0
</code></pre><p>我们先看看自行编译安装方式，首先确认所需要的版本，这里为<code>v0.9.0</code>，然后按照下述过程进行安装</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo apt-get install libjpeg-dev zlib1g-dev libpython3-dev libavcodec-dev libavformat-dev libswscale-dev
</span></span><span class="line"><span class="cl">git clone --branch 0.9.0 https://github.com/pytorch/vision torchvision
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> torchvision
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">BUILD_VERSION</span><span class="o">=</span>0.9.0
</span></span><span class="line"><span class="cl">python3 setup.py install --user
</span></span></code></pre></div><p>如果你一切顺利的话，通过<code>pip list | grep torch</code>则可以看到对应的安装文件了，但是本人运气不咋行，在编译中遇到<code>nvcc</code>的错误，什么找不到目标文件之类的，但是也没有其他错误信息，让我非常头疼</p>
<p>幸运的是，在谷歌上搜到别人为nano编译好了的torchvision。虽然是在nano编译的，但是都是aarch架构应该可以用吧，实际上也确实可以用，<a href="https://qengineering.eu/install-pytorch-on-jetson-nano.html">参考链接</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo apt-get install libjpeg-dev zlib1g-dev libpython3-dev
</span></span><span class="line"><span class="cl">sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev
</span></span><span class="line"><span class="cl">pip install pillow gdown
</span></span><span class="line"><span class="cl">gdown https://drive.google.com/uc?id<span class="o">=</span>1BdvXkwUGGTTamM17Io4kkjIT6zgvf4BJ
</span></span><span class="line"><span class="cl">pip install torchvision-0.9.0a0+01dfa8e-cp36-cp36m-linux_aarch64.whl
</span></span><span class="line"><span class="cl">pip list <span class="p">|</span> grep torch
</span></span><span class="line"><span class="cl">torch               1.8.0
</span></span><span class="line"><span class="cl">torch2trt           0.4.0 <span class="c1"># 这个后面会进行安装</span>
</span></span><span class="line"><span class="cl">torchvision         0.9.0a0+01dfa8e
</span></span></code></pre></div><p>ok，这就安装完事了，非常简单</p>
<p>最后打开终端测试是否安装成功</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">torch</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">torchvision</span>
</span></span><span class="line"><span class="cl"><span class="n">torch</span><span class="o">.</span><span class="n">cuda</span><span class="o">.</span><span class="n">is_avaliable</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="kc">True</span>
</span></span></code></pre></div><h2 id="安装torch2trt">安装torch2trt</h2>
<p>安装torch2trt的过程非常简单，但也有两个点需要注意</p>
<p>首先，我们可以发现在上面安装<code>jetpack</code>的时候可以发现已经安装好了<code>TensorRT</code>（甚至<code>docker</code>），但是安装包并不存在于虚拟环境中，而我们并不想要在重新安装一遍这玩意，因此需要对其进行复用，不然后续编译<code>torch2trt</code>时会直接报错（</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PYTHONPATH</span><span class="o">=</span><span class="nv">$PYTHONPATH</span>:/usr/lib/python3.6/dist-packages <span class="c1"># 目录按照实际情况更改</span>
</span></span></code></pre></div><p>这时你再到虚拟环境的终端中测试python是否能正常导入tensorrt</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">tensorrt</span>
</span></span></code></pre></div><p>如果一切正常就可以进行下一步的安装了，首先需要clone所需要的仓库</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git clone https://github.com/NVIDIA-AI-IOT/torch2trt
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> torch2trt
</span></span></code></pre></div><p>在这里我们直接选择最新版本，避免和tensorrt新api冲突</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git checkout v0.4.0
</span></span></code></pre></div><p>随后就可以直接进行安装了，如果安装过程中碰到缺少包的情况直接pip安装即可</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">python setup.py install
</span></span><span class="line"><span class="cl">pip list <span class="p">|</span> grep torch
</span></span><span class="line"><span class="cl">torch               1.8.0
</span></span><span class="line"><span class="cl">torch2trt           0.4.0 <span class="c1"># 这个后面会进行安装</span>
</span></span><span class="line"><span class="cl">torchvision         0.9.0a0+01dfa8e
</span></span></code></pre></div><!-- raw HTML omitted -->
<h2 id="结语">结语</h2>
<p>总的来说Tx2的配置没有我想象中的简单但也没有那么复杂，Nvidia社区中有大量的解决方案（虽然nano居多）仔细谷歌也都可以寻找到答案。我在测试了几个开源的项目后发现TX2的性能也还不错，不过CPU非常垃圾，后续也会写写关于开源项目如何在TX2上测试的例子，更好的理解和熟悉这块开发板</p>
]]></content></item><item><title>记一次Python引入第三方源码包的解决方式</title><link>https://blog.thinkmoe.icu/posts/%E8%AE%B0%E4%B8%80%E6%AC%A1python%E5%BC%95%E5%85%A5%E7%AC%AC%E4%B8%89%E6%96%B9%E6%BA%90%E7%A0%81%E5%8C%85%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F/</link><pubDate>Tue, 16 Aug 2022 17:13:03 +0800</pubDate><guid>https://blog.thinkmoe.icu/posts/%E8%AE%B0%E4%B8%80%E6%AC%A1python%E5%BC%95%E5%85%A5%E7%AC%AC%E4%B8%89%E6%96%B9%E6%BA%90%E7%A0%81%E5%8C%85%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F/</guid><description>Python虽然挺好用的，但也挺难用的
众所周知，Python由于其“先进”的包管理功能，让你几乎可以通过一条命令安装所有打包好的第三方包。但是当我们想从第三方的项目里面引入少许函数时，这种方式就行不得通了.
例如我想从一个Pytorch项目中将模型定义的函数引入（说的就是你Yolo）到我自己的函数中，项目目录结构如下：
. ├── main.py ├── src │ └── module │ ├── a.py │ ├── __init__.py │ └── __pycache__ │ ├── a.cpython-38.pyc │ └── __init__.cpython-38.pyc └── thirdparty └── codes ├── modules │ ├── b.py │ ├── __init__.py │ ├── __pycache__ │ │ ├── b.cpython-38.pyc │ │ ├── c.cpython-38.pyc │ │ └── __init__.cpython-38.pyc │ └── submodule │ ├── c.py │ └── __pycache__ │ └── c.cpython-38.pyc ├── __pycache__ │ └── b.</description><content type="html"><![CDATA[<blockquote>
<p>Python虽然挺好用的，但也挺难用的</p>
</blockquote>
<p>众所周知，Python由于其“先进”的包管理功能，让你几乎可以通过一条命令安装所有打包好的第三方包。但是当我们想从第三方的项目里面引入少许函数时，这种方式就行不得通了.</p>
<p>例如我想从一个Pytorch项目中将模型定义的函数引入（说的就是你Yolo）到我自己的函数中，项目目录结构如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── main.py
</span></span><span class="line"><span class="cl">├── src
</span></span><span class="line"><span class="cl">│   └── module
</span></span><span class="line"><span class="cl">│       ├── a.py
</span></span><span class="line"><span class="cl">│       ├── __init__.py
</span></span><span class="line"><span class="cl">│       └── __pycache__
</span></span><span class="line"><span class="cl">│           ├── a.cpython-38.pyc
</span></span><span class="line"><span class="cl">│           └── __init__.cpython-38.pyc
</span></span><span class="line"><span class="cl">└── thirdparty
</span></span><span class="line"><span class="cl">    └── codes
</span></span><span class="line"><span class="cl">        ├── modules
</span></span><span class="line"><span class="cl">        │   ├── b.py
</span></span><span class="line"><span class="cl">        │   ├── __init__.py
</span></span><span class="line"><span class="cl">        │   ├── __pycache__
</span></span><span class="line"><span class="cl">        │   │   ├── b.cpython-38.pyc
</span></span><span class="line"><span class="cl">        │   │   ├── c.cpython-38.pyc
</span></span><span class="line"><span class="cl">        │   │   └── __init__.cpython-38.pyc
</span></span><span class="line"><span class="cl">        │   └── submodule
</span></span><span class="line"><span class="cl">        │       ├── c.py
</span></span><span class="line"><span class="cl">        │       └── __pycache__
</span></span><span class="line"><span class="cl">        │           └── c.cpython-38.pyc
</span></span><span class="line"><span class="cl">        ├── __pycache__
</span></span><span class="line"><span class="cl">        │   └── b.cpython-38.pyc
</span></span><span class="line"><span class="cl">        └── run
</span></span><span class="line"><span class="cl">            └── run.py
</span></span></code></pre></div><p>其中<code>a.py</code>和<code>b.py</code>的代码如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># src/module/a.py</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">thirdparty.codes.modules</span> <span class="kn">import</span> <span class="n">b</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">print_a</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;this is a&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">b</span><span class="o">.</span><span class="n">print_b</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">print_a</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># thirdparty/codes/modules/b.py</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">codes.modules.submodule</span> <span class="kn">import</span> <span class="n">c</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">print_b</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;this is b&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">c</span><span class="o">.</span><span class="n">print_c</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># thirdparty/codes/modules/submodule/c.py</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">print_c</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;this is c&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>此时，如果我们分别在主目录和<code>module</code>目录测试<code>a.py</code>文件时会出现如下错误</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
</span></span><span class="line"><span class="cl">  File <span class="s2">&#34;main.py&#34;</span>, line 1, in &lt;module&gt;
</span></span><span class="line"><span class="cl">    from src.module import a
</span></span><span class="line"><span class="cl">  File <span class="s2">&#34;/home/hakureisk/Workspace/tmp/src/module/a.py&#34;</span>, line 1, in &lt;module&gt;
</span></span><span class="line"><span class="cl">    from thirdparty.codes.modules import b
</span></span><span class="line"><span class="cl">  File <span class="s2">&#34;/home/hakureisk/Workspace/tmp/thirdparty/codes/modules/b.py&#34;</span>, line 1, in &lt;module&gt;
</span></span><span class="line"><span class="cl">    from codes.modules.submodule import c
</span></span><span class="line"><span class="cl">ModuleNotFoundError: No module named <span class="s1">&#39;codes&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
</span></span><span class="line"><span class="cl">  File <span class="s2">&#34;a.py&#34;</span>, line 1, in &lt;module&gt;
</span></span><span class="line"><span class="cl">    from thirdparty.codes.modules import b
</span></span><span class="line"><span class="cl">ModuleNotFoundError: No module named <span class="s1">&#39;thirdparty&#39;</span>
</span></span></code></pre></div><p>这种错误在遇到使用<code>git submodule</code>的方式引入第三方项目时非常常见，解决方式呢也有很多种</p>
<p>对于<code>main.py</code>这种处于最外层的入口文件，解决方式非常简单，只需要将<code>thirdparty</code>目录加入到当前执行的系统路径中即可</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl"><span class="n">sys</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;thirdparty&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">sys</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;thirdparty/codes&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">src.module</span> <span class="kn">import</span> <span class="n">a</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">a</span><span class="o">.</span><span class="n">print_a</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># output</span>
</span></span><span class="line"><span class="cl"><span class="n">this</span> <span class="ow">is</span> <span class="n">a</span>
</span></span><span class="line"><span class="cl"><span class="n">this</span> <span class="ow">is</span> <span class="n">b</span>
</span></span><span class="line"><span class="cl"><span class="n">this</span> <span class="ow">is</span> <span class="n">c</span>
</span></span></code></pre></div><p>而对于<code>a.py</code>这种单独测试文件呢就比较麻烦了，你需要将第三方包的绝对路径添加到系统路径之中</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># src/module/a.py</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl">    <span class="n">sys</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;/path/of/the/project/tmp&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">sys</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;/path/of/the/project/tmp/thirdparty&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">thirdparty.codes.modules</span> <span class="kn">import</span> <span class="n">b</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">print_a</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;this is a&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">b</span><span class="o">.</span><span class="n">print_b</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">print_a</span><span class="p">()</span>
</span></span></code></pre></div><p>需要注意的是，这里的demo非常简单，并不能覆盖到全部情况，例如将<code>b.py</code>文件中引入部分改为<code>from modules.submodule import c</code>则上述方法就失效了（<code>main.py</code>除外）</p>
<p>为了解决这种情况，最简单的方式就是将第三方包以<code>pth</code>文件的形式导入到系统路径之中，使其变为<code>pip</code>安装包的引入方式，具体操作如下</p>
<ol>
<li>找到目前环境下<code>site-packages</code>文件目录</li>
</ol>
<p>我们需要将<code>pth</code>文件保存在和第三方包一样的路径之中，通过下面的脚本即可获取当前环境的第三方包路径</p>
<pre><code>python -m site
</code></pre>
<ol start="2">
<li>创建<code>pth</code>文件</li>
</ol>
<p>在对应的目录中，创建对应的<code>pth</code>文件，文件名自定义取一个有辨识度但和已经安装的包不冲突的名字，例如我这使用的<code>thirdparty.pth</code></p>
<pre><code>cd /path/to/site-packages
touch thirdparty.pth
</code></pre>
<p>创建完成后，将需要引入的第三方包路径添加至文件之中</p>
<pre><code># /path/to/site-packages/thirdparty.pth
/path/to/third/party/module

# example
/home/xxx/tmp/
/home/xxx/tmp/thirdparty
</code></pre>
<p>注意，需要将对应的包明确写入文件之中，这是为了方便寻找其子包的存在</p>
<p>最后运行脚本就可以成功引入了: )</p>
]]></content></item><item><title>WSL2更改桥接网络</title><link>https://blog.thinkmoe.icu/posts/wsl2%E6%9B%B4%E6%94%B9%E6%A1%A5%E6%8E%A5%E7%BD%91%E7%BB%9C/</link><pubDate>Thu, 05 May 2022 13:34:24 +0800</pubDate><guid>https://blog.thinkmoe.icu/posts/wsl2%E6%9B%B4%E6%94%B9%E6%A1%A5%E6%8E%A5%E7%BD%91%E7%BB%9C/</guid><description>WSL2默认情况下网络是处于NAT模式之下，在正常情况下联网是没有问题的，但是遇到一些特殊情况下时NAT网络就非常的鸡肋。 例如，NAT的WSL2并不能直接使用宿主机的代理服务器，需要手动获取本机IP和宿主机在WSL2中的IP地址才能进行局域网连接。 在例如本人需要在WSL2中远程连接实验室车辆上的ROS2节点，由于NAT的存在导致小车上ROS2节点发布的Topic并不能在WSL2中接收到，因此我需要将WSL2默认的NAT网络 更改为桥接网络，这样在不影响宿主机上网的同时也能分配给WSL2一个局域网地址
本方法需要通过Hyper-V虚拟网卡进行，因此首先需要安装并开启Windows的Hyper-V功能
修改桥接网络步骤如下(以下步骤均在管理员模式的Powershell中进行)：
从Powershell中开启wsl，生成网卡 wsl.exe 如果只是开机自启的wsl会出现找不到WSL网卡的错误 2. 获取网卡信息
Get-NetAdapter 运行之后可以查看当前Windows中的网卡设备，例如WLAN 3. 桥接网卡 选择WSL2需要桥接的网卡设备，以WLAN为例
Set-VMSwitch WSL -NetAdapterName WLAN 配置WSL2地址 这时，已经将WSL2的网卡桥接到物理网卡之上，需要手动配置WSL2的静态地址，假设路由器的网关为192.168.8.1，需要配置静态地址为192.168.8.123，则可以按照以下步骤进行配置(在WSL2中进行) sudo ip addr flush dev eth0 sudo ip addr add 192.168.8.123/24 dev eth0 sudo ip route add 0.0.0.0/0 via 192.168.8.1 dev eth0 更改过后还需手动更改DNS地址
# /etc/resolv.conf nameserver 192.168.8.1 保存并退出
以上就完成了WSL2的桥接网络配置，需要注意的是，每次都需要手动更新DNS文件，如果连接到别的路由器之下还需要手动更新静态地址和网关地址</description><content type="html"><![CDATA[<p>WSL2默认情况下网络是处于NAT模式之下，在正常情况下联网是没有问题的，但是遇到一些特殊情况下时NAT网络就非常的鸡肋。
例如，NAT的WSL2并不能直接使用宿主机的代理服务器，需要手动获取本机IP和宿主机在WSL2中的IP地址才能进行局域网连接。
在例如本人需要在WSL2中远程连接实验室车辆上的ROS2节点，由于NAT的存在导致小车上ROS2节点发布的Topic并不能在WSL2中接收到，因此我需要将WSL2默认的NAT网络
更改为桥接网络，这样在不影响宿主机上网的同时也能分配给WSL2一个局域网地址</p>
<blockquote>
<p>本方法需要通过Hyper-V虚拟网卡进行，因此首先需要安装并开启Windows的Hyper-V功能</p>
</blockquote>
<p>修改桥接网络步骤如下(以下步骤均在管理员模式的Powershell中进行)：</p>
<ol>
<li>从Powershell中开启wsl，生成网卡</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">wsl</span><span class="p">.</span><span class="py">exe</span>
</span></span></code></pre></div><p>如果只是开机自启的wsl会出现找不到WSL网卡的错误
2. 获取网卡信息</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nb">Get-NetAdapter</span>
</span></span></code></pre></div><p>运行之后可以查看当前Windows中的网卡设备，例如WLAN
3. 桥接网卡
选择WSL2需要桥接的网卡设备，以WLAN为例</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nb">Set-VMSwitch</span> <span class="n">WSL</span> <span class="n">-NetAdapterName</span> <span class="n">WLAN</span>
</span></span></code></pre></div><ol start="4">
<li>配置WSL2地址
这时，已经将WSL2的网卡桥接到物理网卡之上，需要手动配置WSL2的静态地址，假设路由器的网关为<code>192.168.8.1</code>，需要配置静态地址为<code>192.168.8.123</code>，则可以按照以下步骤进行配置(在WSL2中进行)</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo ip addr flush dev eth0
</span></span><span class="line"><span class="cl">sudo ip addr add 192.168.8.123/24 dev eth0
</span></span><span class="line"><span class="cl">sudo ip route add 0.0.0.0/0 via 192.168.8.1 dev eth0
</span></span></code></pre></div><p>更改过后还需手动更改DNS地址</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># /etc/resolv.conf</span>
</span></span><span class="line"><span class="cl">nameserver 192.168.8.1
</span></span></code></pre></div><p>保存并退出</p>
<p>以上就完成了WSL2的桥接网络配置，需要注意的是，每次都需要手动更新DNS文件，如果连接到别的路由器之下还需要手动更新静态地址和网关地址</p>
]]></content></item><item><title>Ubuntu20.04 Install Opencv3.1.0 With Python3</title><link>https://blog.thinkmoe.icu/posts/ubuntu20.04-install-opencv3.1.0-with-python3/</link><pubDate>Mon, 28 Mar 2022 16:40:37 +0800</pubDate><guid>https://blog.thinkmoe.icu/posts/ubuntu20.04-install-opencv3.1.0-with-python3/</guid><description>安装依赖 Ubuntu20.04需要安装以下依赖
sudo apt install -y --no-install-recommends \ build-essential \ git \ wget \ unzip \ yasm \ pkg-config \ libswscale-dev \ libtbb2 \ libtbb-dev \ libjpeg-dev \ libpng-dev \ libtiff-dev \ libopenjp2-7-dev \ libavformat-dev \ libpq-dev \ libgtk2.0-dev libgtk-3-dev \ libgphoto2-dev \ libtiff5-dev libjpeg8-dev libpng-dev cmake make \ libavformat-dev libavcodec-dev libswscale-dev libdc1394-22-dev libavresample-dev \ libxine2-dev libv4l-dev \ libatlas-base-dev \ libfaac-dev libmp3lame-dev libtheora-dev \ libvorbis-dev libxvidcore-dev \ libeigen3-dev \ libgstreamer1.0-0 gstreamer1.</description><content type="html"><![CDATA[<h1 id="安装依赖">安装依赖</h1>
<p>Ubuntu20.04需要安装以下依赖</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt install -y --no-install-recommends <span class="se">\ </span>
</span></span><span class="line"><span class="cl">    build-essential <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    git <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    wget <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    unzip <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    yasm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    pkg-config <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    libswscale-dev <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    libtbb2 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    libtbb-dev <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    libjpeg-dev <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    libpng-dev <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    libtiff-dev <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    libopenjp2-7-dev <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    libavformat-dev <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    libpq-dev <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    libgtk2.0-dev libgtk-3-dev <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    libgphoto2-dev <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    libtiff5-dev libjpeg8-dev libpng-dev cmake make <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    libavformat-dev libavcodec-dev libswscale-dev libdc1394-22-dev libavresample-dev <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    libxine2-dev libv4l-dev <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    libatlas-base-dev <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    libfaac-dev libmp3lame-dev libtheora-dev <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    libvorbis-dev libxvidcore-dev <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    libeigen3-dev <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    libgstreamer1.0-0 gstreamer1.0-plugins-base <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    gstreamer1.0-plugins-good <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    gstreamer1.0-plugins-bad <span class="se">\ </span>
</span></span><span class="line"><span class="cl">    gstreamer1.0-plugins-ugly <span class="se">\ </span>
</span></span><span class="line"><span class="cl">    gstreamer1.0-libav <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    gstreamer1.0-tools <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    python3.8-dev python3-pip <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>
</span></span><span class="line"><span class="cl">pip3 install numpy
</span></span></code></pre></div><h1 id="下载opencv310和contrib">下载opencv3.1.0和contrib</h1>
<p>假设下载目录为<code>OP_DIR=$HOME/opencv_project</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> <span class="nv">$OP_DIR</span>
</span></span><span class="line"><span class="cl">git clone https://github.com/opencv/opencv.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> opencv <span class="o">&amp;&amp;</span> git checkout 3.1.0 <span class="o">&amp;&amp;</span> <span class="nb">cd</span> ..
</span></span><span class="line"><span class="cl">git clone https://github.com/opencv/opencv_contrib.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> opencv_contrib <span class="o">&amp;&amp;</span> git checkout 3.1.0 <span class="o">&amp;&amp;</span> <span class="nb">cd</span> ..
</span></span></code></pre></div><h1 id="修复链接">修复链接</h1>
<p>如果直接cmake检查，在Ubuntu20.04会出现依赖错误</p>
<h2 id="1-linuxvideodevh-not-found">1. linux/videodev.h not found</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo ln -sf /usr/include/libv4l1-videodev.h /usr/include/linux/videodev.h
</span></span></code></pre></div><h2 id="2-ffmpegavformath-not-found">2. ffmpeg/avformat.h not found</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo mkdir -p /usr/include/ffmpeg 
</span></span><span class="line"><span class="cl">sudo ln -sf /usr/include/x86_64-linux-gnu/libavcodec/*.h /usr/include/ffmpeg 
</span></span><span class="line"><span class="cl">sudo ln -sf /usr/include/x86_64-linux-gnu/libavformat/*.h /usr/include/ffmpeg 
</span></span><span class="line"><span class="cl">sudo ln -sf /usr/include/x86_64-linux-gnu/libswscale/*.h /usr/include/ffmpeg 
</span></span></code></pre></div><h2 id="3-sysvideoioh-not-found">3. sys/videoio.h not found</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo mkdir -p /usr/include/sys <span class="o">&amp;&amp;</span> sudo touch /usr/include/sys/videoio.h
</span></span></code></pre></div><h1 id="cmake检查并编译安装">Cmake检查并编译安装</h1>
<pre tabindex="0"><code>cd $OP_DIR
mkdir build &amp;&amp; cd build
cmake \
-D BUILD_TIFF=ON \
-D BUILD_opencv_java=OFF \
-D WITH_CUDA=OFF \
-D WITH_OPENGL=ON \
-D WITH_OPENCL=ON \
-D WITH_IPP=ON \
-D WITH_TBB=ON \
-D WITH_EIGEN=ON \
-D WITH_V4L=ON \
-D WITH_LIBV4L=OFF \
-D BUILD_TESTS=OFF \
-D BUILD_PERF_TESTS=OFF \
-D CMAKE_BUILD_TYPE=RELEASE \
-D OPENCV_EXTRA_MODULES_PATH=$OP_DIR/opencv_contrib/modules \
-D ENABLE_PRECOMPILED_HEADERS=OFF \ # stdlib.io not found
-D PYTHON_EXECUTABLE=$(which python3) \
-D CMAKE_INSTALL_PREFIX=$(python3 -c &#34;import sys; print(sys.prefix)&#34;) \
-D PYTHON_INCLUDE_DIR=$(python3 -c &#34;from distutils.sysconfig import get_python_inc; print(get_python_inc())&#34;) \
-D PYTHON_PACKAGES_PATH=$(python3 -c &#34;from distutils.sysconfig import get_python_lib; print(get_python_lib())&#34;) \
$OP_DIR/opencv \
make -j${nproc}
sudo make install
</code></pre>]]></content></item><item><title>ROS2虚拟环境配置指南</title><link>https://blog.thinkmoe.icu/posts/ros2%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/</link><pubDate>Tue, 22 Feb 2022 14:35:57 +0800</pubDate><guid>https://blog.thinkmoe.icu/posts/ros2%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/</guid><description>在使用CARLA的ROS2包的过程中，需要导入torch对图像进行处理，按照正常情况下，激活conda环境之后应该就能够直接使用虚拟环境中安装的第三方包，但是在ROS2启动的过程中却提示torch not found的错误
开始怀疑是conda环境导致的，于是更换为官方的venv，但是在安装完依赖后编译启动显示还是同样的错误。
在Github搜索后发现，原来通过colcon编译的ROS2节点在启动的时候默认使用系统环境的Python环境运行，并不会加载编译时使用的虚拟环境，因此在虚拟环境中安装的第三方依赖也不会正常使用了。根据rotu的说法，由于ROS2节点的运行文件是由colcon编译生成，而在colcon编译过程中解释器的选择是写死为系统环境的Python的，那是不是ROS2就用不了虚拟环境运行呢？
当然不是，根据上个链接的说法，可以通过修改ROS2的配置文件来间接的让系统使用虚拟环境中的Python解释器，按照theunkn0wn1的描述，总共分为4步
修改setup.cfg文件，添加如下配置 # src/{node}/setup.cfg [build_scripts] executable = /usr/bin/env python3 创建虚拟环境 在创建虚拟环境时，需要将系统环境中的ROS2包链接到虚拟环境中 python3 -m venv venv --system-site-packages --symlinks 这时在目录中会生成venv文件
激活ros2环境配置和虚拟环境配置 source /opt/ros/foxy/setup.zsh source ./venv/bin/activate colcon build并运行 colcon build ros2 run package_name node_name 这时就可以使用到虚拟环境中的第三方包了</description><content type="html"><![CDATA[<p>在使用CARLA的ROS2包的过程中，需要导入torch对图像进行处理，按照正常情况下，激活conda环境之后应该就能够直接使用虚拟环境中安装的第三方包，但是在ROS2启动的过程中却提示<code>torch not found</code>的错误</p>
<p>开始怀疑是conda环境导致的，于是更换为官方的venv，但是在安装完依赖后编译启动显示还是同样的错误。</p>
<p>在Github搜索后发现，原来通过colcon编译的ROS2节点在启动的时候默认使用系统环境的Python环境运行，并不会加载编译时使用的虚拟环境，因此在虚拟环境中安装的第三方依赖也不会正常使用了。根据<a href="https://github.com/colcon/colcon-core/pull/183">rotu</a>的说法，由于ROS2节点的运行文件是由colcon编译生成，而在colcon编译过程中解释器的选择是写死为系统环境的Python的，那是不是ROS2就用不了虚拟环境运行呢？</p>
<p>当然不是，根据上个链接的说法，可以通过修改ROS2的配置文件来间接的让系统使用虚拟环境中的Python解释器，按照<a href="https://github.com/ros2/ros2/issues/1094#issuecomment-927179578">theunkn0wn1</a>的描述，总共分为4步</p>
<ol>
<li>修改setup.cfg文件，添加如下配置</li>
</ol>
<pre tabindex="0"><code># src/{node}/setup.cfg
[build_scripts]
executable = /usr/bin/env python3
</code></pre><ol start="2">
<li>创建虚拟环境
在创建虚拟环境时，需要将系统环境中的ROS2包链接到虚拟环境中</li>
</ol>
<pre tabindex="0"><code>python3 -m venv venv --system-site-packages --symlinks
</code></pre><p>这时在目录中会生成venv文件</p>
<ol start="3">
<li>激活ros2环境配置和虚拟环境配置</li>
</ol>
<pre tabindex="0"><code>source /opt/ros/foxy/setup.zsh
source ./venv/bin/activate
</code></pre><ol start="4">
<li>colcon build并运行</li>
</ol>
<pre tabindex="0"><code>colcon build
ros2 run package_name node_name
</code></pre><p>这时就可以使用到虚拟环境中的第三方包了</p>
]]></content></item><item><title>使用Pytorch预训练网络获取图片特征</title><link>https://blog.thinkmoe.icu/posts/%E4%BD%BF%E7%94%A8pytorch%E9%A2%84%E8%AE%AD%E7%BB%83%E7%BD%91%E7%BB%9C%E8%8E%B7%E5%8F%96%E5%9B%BE%E7%89%87%E7%89%B9%E5%BE%81/</link><pubDate>Fri, 17 Dec 2021 17:52:42 +0800</pubDate><guid>https://blog.thinkmoe.icu/posts/%E4%BD%BF%E7%94%A8pytorch%E9%A2%84%E8%AE%AD%E7%BB%83%E7%BD%91%E7%BB%9C%E8%8E%B7%E5%8F%96%E5%9B%BE%E7%89%87%E7%89%B9%E5%BE%81/</guid><description>由于Carla训练过程中需要使用到图像数据，而通常深度强化学习(DRL)算法中，输入的数据都为一个 向量(Vector)，如果需要使用图像这种二维数据，通常的做法是使用一个CNN网络，提取图像的特征， 将二维数据转化为一维向量数据，这样就能够直接使用现有的DRL算法
例如在stable_baseline3中，支持MLP、CNN和 多种不同类型观测对象混合输入。对于图像数据，都使用了一个基于CNN深度卷积网络来提取特征。
在pytorch中已经有了很多优秀的CNN特征提取网络，在这里我将会使用到MobileNetV3这个网络用 于提取Carla的摄像头图片特征。
读取模型 首先需要安装torchvision这个包，里面包含了现有非常流行的图像处理网络
pip install torchvision 然后打开一个终端，导入torchvision.models模型包
from torchvision import models 导入MobileNetV3并初始化 Pytorch为每个网络都提供了一个预训练好的结构，可以自动下载导入
mobilenet = models.mobilenet.mobilenet_v3_small(pretrained=True) mobilenet.eval() 下面就是MobileNetV3的网络结构，从最终输出层可以得知，MobileNetV3会提取1000个特征值
MobileNetV3( (features): Sequential( (0): ConvNormActivation( (0): Conv2d(3, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False) (1): BatchNorm2d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True) (2): Hardswish() ) (1): InvertedResidual( (block): Sequential( (0): ConvNormActivation( (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=16, bias=False) (1): BatchNorm2d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True) (2): ReLU(inplace=True) ) (1): SqueezeExcitation( (avgpool): AdaptiveAvgPool2d(output_size=1) (fc1): Conv2d(16, 8, kernel_size=(1, 1), stride=(1, 1)) (fc2): Conv2d(8, 16, kernel_size=(1, 1), stride=(1, 1)) (activation): ReLU() (scale_activation): Hardsigmoid() ) (2): ConvNormActivation( (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False) (1): BatchNorm2d(16, eps=0.</description><content type="html"><![CDATA[<p>由于Carla训练过程中需要使用到图像数据，而通常深度强化学习(DRL)算法中，输入的数据都为一个
向量(Vector)，如果需要使用图像这种二维数据，通常的做法是使用一个CNN网络，提取图像的特征，
将二维数据转化为一维向量数据，这样就能够直接使用现有的DRL算法</p>
<p>例如在<a href="https://github.com/DLR-RM/stable-baselines3">stable_baseline3</a>中，支持MLP、CNN和
多种不同类型观测对象混合输入。对于图像数据，都使用了一个基于CNN深度卷积网络来提取特征。</p>
<p>在pytorch中已经有了很多优秀的CNN特征提取网络，在这里我将会使用到<code>MobileNetV3</code>这个网络用
于提取Carla的摄像头图片特征。</p>
<h1 id="读取模型">读取模型</h1>
<p>首先需要安装<code>torchvision</code>这个包，里面包含了现有非常流行的图像处理网络</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">pip</span> <span class="n">install</span> <span class="n">torchvision</span>
</span></span></code></pre></div><p>然后打开一个终端，导入<code>torchvision.models</code>模型包</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">torchvision</span> <span class="kn">import</span> <span class="n">models</span>
</span></span></code></pre></div><h1 id="导入mobilenetv3并初始化">导入MobileNetV3并初始化</h1>
<p>Pytorch为每个网络都提供了一个预训练好的结构，可以自动下载导入</p>
<pre tabindex="0"><code>mobilenet = models.mobilenet.mobilenet_v3_small(pretrained=True)
mobilenet.eval()
</code></pre><p>下面就是MobileNetV3的网络结构，从最终输出层可以得知，MobileNetV3会提取1000个特征值</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">MobileNetV3<span class="o">(</span>
</span></span><span class="line"><span class="cl">  <span class="o">(</span>features<span class="o">)</span>: Sequential<span class="o">(</span>
</span></span><span class="line"><span class="cl">    <span class="o">(</span>0<span class="o">)</span>: ConvNormActivation<span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="o">(</span>0<span class="o">)</span>: Conv2d<span class="o">(</span>3, 16, <span class="nv">kernel_size</span><span class="o">=(</span>3, 3<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>2, 2<span class="o">)</span>, <span class="nv">padding</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">bias</span><span class="o">=</span>False<span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">(</span>1<span class="o">)</span>: BatchNorm2d<span class="o">(</span>16, <span class="nv">eps</span><span class="o">=</span>0.001, <span class="nv">momentum</span><span class="o">=</span>0.01, <span class="nv">affine</span><span class="o">=</span>True, <span class="nv">track_running_stats</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">(</span>2<span class="o">)</span>: Hardswish<span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">(</span>1<span class="o">)</span>: InvertedResidual<span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="o">(</span>block<span class="o">)</span>: Sequential<span class="o">(</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>0<span class="o">)</span>: ConvNormActivation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>0<span class="o">)</span>: Conv2d<span class="o">(</span>16, 16, <span class="nv">kernel_size</span><span class="o">=(</span>3, 3<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>2, 2<span class="o">)</span>, <span class="nv">padding</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">groups</span><span class="o">=</span>16, <span class="nv">bias</span><span class="o">=</span>False<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>1<span class="o">)</span>: BatchNorm2d<span class="o">(</span>16, <span class="nv">eps</span><span class="o">=</span>0.001, <span class="nv">momentum</span><span class="o">=</span>0.01, <span class="nv">affine</span><span class="o">=</span>True, <span class="nv">track_running_stats</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>2<span class="o">)</span>: ReLU<span class="o">(</span><span class="nv">inplace</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>1<span class="o">)</span>: SqueezeExcitation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>avgpool<span class="o">)</span>: AdaptiveAvgPool2d<span class="o">(</span><span class="nv">output_size</span><span class="o">=</span>1<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>fc1<span class="o">)</span>: Conv2d<span class="o">(</span>16, 8, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">))</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>fc2<span class="o">)</span>: Conv2d<span class="o">(</span>8, 16, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">))</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>activation<span class="o">)</span>: ReLU<span class="o">()</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>scale_activation<span class="o">)</span>: Hardsigmoid<span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>2<span class="o">)</span>: ConvNormActivation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>0<span class="o">)</span>: Conv2d<span class="o">(</span>16, 16, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">bias</span><span class="o">=</span>False<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>1<span class="o">)</span>: BatchNorm2d<span class="o">(</span>16, <span class="nv">eps</span><span class="o">=</span>0.001, <span class="nv">momentum</span><span class="o">=</span>0.01, <span class="nv">affine</span><span class="o">=</span>True, <span class="nv">track_running_stats</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">(</span>2<span class="o">)</span>: InvertedResidual<span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="o">(</span>block<span class="o">)</span>: Sequential<span class="o">(</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>0<span class="o">)</span>: ConvNormActivation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>0<span class="o">)</span>: Conv2d<span class="o">(</span>16, 72, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">bias</span><span class="o">=</span>False<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>1<span class="o">)</span>: BatchNorm2d<span class="o">(</span>72, <span class="nv">eps</span><span class="o">=</span>0.001, <span class="nv">momentum</span><span class="o">=</span>0.01, <span class="nv">affine</span><span class="o">=</span>True, <span class="nv">track_running_stats</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>2<span class="o">)</span>: ReLU<span class="o">(</span><span class="nv">inplace</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>1<span class="o">)</span>: ConvNormActivation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>0<span class="o">)</span>: Conv2d<span class="o">(</span>72, 72, <span class="nv">kernel_size</span><span class="o">=(</span>3, 3<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>2, 2<span class="o">)</span>, <span class="nv">padding</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">groups</span><span class="o">=</span>72, <span class="nv">bias</span><span class="o">=</span>False<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>1<span class="o">)</span>: BatchNorm2d<span class="o">(</span>72, <span class="nv">eps</span><span class="o">=</span>0.001, <span class="nv">momentum</span><span class="o">=</span>0.01, <span class="nv">affine</span><span class="o">=</span>True, <span class="nv">track_running_stats</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>2<span class="o">)</span>: ReLU<span class="o">(</span><span class="nv">inplace</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>2<span class="o">)</span>: ConvNormActivation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>0<span class="o">)</span>: Conv2d<span class="o">(</span>72, 24, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">bias</span><span class="o">=</span>False<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>1<span class="o">)</span>: BatchNorm2d<span class="o">(</span>24, <span class="nv">eps</span><span class="o">=</span>0.001, <span class="nv">momentum</span><span class="o">=</span>0.01, <span class="nv">affine</span><span class="o">=</span>True, <span class="nv">track_running_stats</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">(</span>3<span class="o">)</span>: InvertedResidual<span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="o">(</span>block<span class="o">)</span>: Sequential<span class="o">(</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>0<span class="o">)</span>: ConvNormActivation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>0<span class="o">)</span>: Conv2d<span class="o">(</span>24, 88, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">bias</span><span class="o">=</span>False<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>1<span class="o">)</span>: BatchNorm2d<span class="o">(</span>88, <span class="nv">eps</span><span class="o">=</span>0.001, <span class="nv">momentum</span><span class="o">=</span>0.01, <span class="nv">affine</span><span class="o">=</span>True, <span class="nv">track_running_stats</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>2<span class="o">)</span>: ReLU<span class="o">(</span><span class="nv">inplace</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>1<span class="o">)</span>: ConvNormActivation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>0<span class="o">)</span>: Conv2d<span class="o">(</span>88, 88, <span class="nv">kernel_size</span><span class="o">=(</span>3, 3<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">padding</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">groups</span><span class="o">=</span>88, <span class="nv">bias</span><span class="o">=</span>False<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>1<span class="o">)</span>: BatchNorm2d<span class="o">(</span>88, <span class="nv">eps</span><span class="o">=</span>0.001, <span class="nv">momentum</span><span class="o">=</span>0.01, <span class="nv">affine</span><span class="o">=</span>True, <span class="nv">track_running_stats</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>2<span class="o">)</span>: ReLU<span class="o">(</span><span class="nv">inplace</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>2<span class="o">)</span>: ConvNormActivation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>0<span class="o">)</span>: Conv2d<span class="o">(</span>88, 24, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">bias</span><span class="o">=</span>False<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>1<span class="o">)</span>: BatchNorm2d<span class="o">(</span>24, <span class="nv">eps</span><span class="o">=</span>0.001, <span class="nv">momentum</span><span class="o">=</span>0.01, <span class="nv">affine</span><span class="o">=</span>True, <span class="nv">track_running_stats</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">(</span>4<span class="o">)</span>: InvertedResidual<span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="o">(</span>block<span class="o">)</span>: Sequential<span class="o">(</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>0<span class="o">)</span>: ConvNormActivation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>0<span class="o">)</span>: Conv2d<span class="o">(</span>24, 96, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">bias</span><span class="o">=</span>False<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>1<span class="o">)</span>: BatchNorm2d<span class="o">(</span>96, <span class="nv">eps</span><span class="o">=</span>0.001, <span class="nv">momentum</span><span class="o">=</span>0.01, <span class="nv">affine</span><span class="o">=</span>True, <span class="nv">track_running_stats</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>2<span class="o">)</span>: Hardswish<span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>1<span class="o">)</span>: ConvNormActivation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>0<span class="o">)</span>: Conv2d<span class="o">(</span>96, 96, <span class="nv">kernel_size</span><span class="o">=(</span>5, 5<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>2, 2<span class="o">)</span>, <span class="nv">padding</span><span class="o">=(</span>2, 2<span class="o">)</span>, <span class="nv">groups</span><span class="o">=</span>96, <span class="nv">bias</span><span class="o">=</span>False<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>1<span class="o">)</span>: BatchNorm2d<span class="o">(</span>96, <span class="nv">eps</span><span class="o">=</span>0.001, <span class="nv">momentum</span><span class="o">=</span>0.01, <span class="nv">affine</span><span class="o">=</span>True, <span class="nv">track_running_stats</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>2<span class="o">)</span>: Hardswish<span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>2<span class="o">)</span>: SqueezeExcitation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>avgpool<span class="o">)</span>: AdaptiveAvgPool2d<span class="o">(</span><span class="nv">output_size</span><span class="o">=</span>1<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>fc1<span class="o">)</span>: Conv2d<span class="o">(</span>96, 24, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">))</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>fc2<span class="o">)</span>: Conv2d<span class="o">(</span>24, 96, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">))</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>activation<span class="o">)</span>: ReLU<span class="o">()</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>scale_activation<span class="o">)</span>: Hardsigmoid<span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>3<span class="o">)</span>: ConvNormActivation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>0<span class="o">)</span>: Conv2d<span class="o">(</span>96, 40, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">bias</span><span class="o">=</span>False<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>1<span class="o">)</span>: BatchNorm2d<span class="o">(</span>40, <span class="nv">eps</span><span class="o">=</span>0.001, <span class="nv">momentum</span><span class="o">=</span>0.01, <span class="nv">affine</span><span class="o">=</span>True, <span class="nv">track_running_stats</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">(</span>5<span class="o">)</span>: InvertedResidual<span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="o">(</span>block<span class="o">)</span>: Sequential<span class="o">(</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>0<span class="o">)</span>: ConvNormActivation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>0<span class="o">)</span>: Conv2d<span class="o">(</span>40, 240, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">bias</span><span class="o">=</span>False<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>1<span class="o">)</span>: BatchNorm2d<span class="o">(</span>240, <span class="nv">eps</span><span class="o">=</span>0.001, <span class="nv">momentum</span><span class="o">=</span>0.01, <span class="nv">affine</span><span class="o">=</span>True, <span class="nv">track_running_stats</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>2<span class="o">)</span>: Hardswish<span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>1<span class="o">)</span>: ConvNormActivation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>0<span class="o">)</span>: Conv2d<span class="o">(</span>240, 240, <span class="nv">kernel_size</span><span class="o">=(</span>5, 5<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">padding</span><span class="o">=(</span>2, 2<span class="o">)</span>, <span class="nv">groups</span><span class="o">=</span>240, <span class="nv">bias</span><span class="o">=</span>False<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>1<span class="o">)</span>: BatchNorm2d<span class="o">(</span>240, <span class="nv">eps</span><span class="o">=</span>0.001, <span class="nv">momentum</span><span class="o">=</span>0.01, <span class="nv">affine</span><span class="o">=</span>True, <span class="nv">track_running_stats</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>2<span class="o">)</span>: Hardswish<span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>2<span class="o">)</span>: SqueezeExcitation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>avgpool<span class="o">)</span>: AdaptiveAvgPool2d<span class="o">(</span><span class="nv">output_size</span><span class="o">=</span>1<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>fc1<span class="o">)</span>: Conv2d<span class="o">(</span>240, 64, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">))</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>fc2<span class="o">)</span>: Conv2d<span class="o">(</span>64, 240, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">))</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>activation<span class="o">)</span>: ReLU<span class="o">()</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>scale_activation<span class="o">)</span>: Hardsigmoid<span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>3<span class="o">)</span>: ConvNormActivation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>0<span class="o">)</span>: Conv2d<span class="o">(</span>240, 40, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">bias</span><span class="o">=</span>False<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>1<span class="o">)</span>: BatchNorm2d<span class="o">(</span>40, <span class="nv">eps</span><span class="o">=</span>0.001, <span class="nv">momentum</span><span class="o">=</span>0.01, <span class="nv">affine</span><span class="o">=</span>True, <span class="nv">track_running_stats</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">(</span>6<span class="o">)</span>: InvertedResidual<span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="o">(</span>block<span class="o">)</span>: Sequential<span class="o">(</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>0<span class="o">)</span>: ConvNormActivation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>0<span class="o">)</span>: Conv2d<span class="o">(</span>40, 240, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">bias</span><span class="o">=</span>False<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>1<span class="o">)</span>: BatchNorm2d<span class="o">(</span>240, <span class="nv">eps</span><span class="o">=</span>0.001, <span class="nv">momentum</span><span class="o">=</span>0.01, <span class="nv">affine</span><span class="o">=</span>True, <span class="nv">track_running_stats</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>2<span class="o">)</span>: Hardswish<span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>1<span class="o">)</span>: ConvNormActivation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>0<span class="o">)</span>: Conv2d<span class="o">(</span>240, 240, <span class="nv">kernel_size</span><span class="o">=(</span>5, 5<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">padding</span><span class="o">=(</span>2, 2<span class="o">)</span>, <span class="nv">groups</span><span class="o">=</span>240, <span class="nv">bias</span><span class="o">=</span>False<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>1<span class="o">)</span>: BatchNorm2d<span class="o">(</span>240, <span class="nv">eps</span><span class="o">=</span>0.001, <span class="nv">momentum</span><span class="o">=</span>0.01, <span class="nv">affine</span><span class="o">=</span>True, <span class="nv">track_running_stats</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>2<span class="o">)</span>: Hardswish<span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>2<span class="o">)</span>: SqueezeExcitation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>avgpool<span class="o">)</span>: AdaptiveAvgPool2d<span class="o">(</span><span class="nv">output_size</span><span class="o">=</span>1<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>fc1<span class="o">)</span>: Conv2d<span class="o">(</span>240, 64, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">))</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>fc2<span class="o">)</span>: Conv2d<span class="o">(</span>64, 240, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">))</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>activation<span class="o">)</span>: ReLU<span class="o">()</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>scale_activation<span class="o">)</span>: Hardsigmoid<span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>3<span class="o">)</span>: ConvNormActivation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>0<span class="o">)</span>: Conv2d<span class="o">(</span>240, 40, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">bias</span><span class="o">=</span>False<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>1<span class="o">)</span>: BatchNorm2d<span class="o">(</span>40, <span class="nv">eps</span><span class="o">=</span>0.001, <span class="nv">momentum</span><span class="o">=</span>0.01, <span class="nv">affine</span><span class="o">=</span>True, <span class="nv">track_running_stats</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">(</span>7<span class="o">)</span>: InvertedResidual<span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="o">(</span>block<span class="o">)</span>: Sequential<span class="o">(</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>0<span class="o">)</span>: ConvNormActivation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>0<span class="o">)</span>: Conv2d<span class="o">(</span>40, 120, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">bias</span><span class="o">=</span>False<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>1<span class="o">)</span>: BatchNorm2d<span class="o">(</span>120, <span class="nv">eps</span><span class="o">=</span>0.001, <span class="nv">momentum</span><span class="o">=</span>0.01, <span class="nv">affine</span><span class="o">=</span>True, <span class="nv">track_running_stats</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>2<span class="o">)</span>: Hardswish<span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>1<span class="o">)</span>: ConvNormActivation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>0<span class="o">)</span>: Conv2d<span class="o">(</span>120, 120, <span class="nv">kernel_size</span><span class="o">=(</span>5, 5<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">padding</span><span class="o">=(</span>2, 2<span class="o">)</span>, <span class="nv">groups</span><span class="o">=</span>120, <span class="nv">bias</span><span class="o">=</span>False<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>1<span class="o">)</span>: BatchNorm2d<span class="o">(</span>120, <span class="nv">eps</span><span class="o">=</span>0.001, <span class="nv">momentum</span><span class="o">=</span>0.01, <span class="nv">affine</span><span class="o">=</span>True, <span class="nv">track_running_stats</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>2<span class="o">)</span>: Hardswish<span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>2<span class="o">)</span>: SqueezeExcitation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>avgpool<span class="o">)</span>: AdaptiveAvgPool2d<span class="o">(</span><span class="nv">output_size</span><span class="o">=</span>1<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>fc1<span class="o">)</span>: Conv2d<span class="o">(</span>120, 32, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">))</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>fc2<span class="o">)</span>: Conv2d<span class="o">(</span>32, 120, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">))</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>activation<span class="o">)</span>: ReLU<span class="o">()</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>scale_activation<span class="o">)</span>: Hardsigmoid<span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>3<span class="o">)</span>: ConvNormActivation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>0<span class="o">)</span>: Conv2d<span class="o">(</span>120, 48, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">bias</span><span class="o">=</span>False<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>1<span class="o">)</span>: BatchNorm2d<span class="o">(</span>48, <span class="nv">eps</span><span class="o">=</span>0.001, <span class="nv">momentum</span><span class="o">=</span>0.01, <span class="nv">affine</span><span class="o">=</span>True, <span class="nv">track_running_stats</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">(</span>8<span class="o">)</span>: InvertedResidual<span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="o">(</span>block<span class="o">)</span>: Sequential<span class="o">(</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>0<span class="o">)</span>: ConvNormActivation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>0<span class="o">)</span>: Conv2d<span class="o">(</span>48, 144, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">bias</span><span class="o">=</span>False<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>1<span class="o">)</span>: BatchNorm2d<span class="o">(</span>144, <span class="nv">eps</span><span class="o">=</span>0.001, <span class="nv">momentum</span><span class="o">=</span>0.01, <span class="nv">affine</span><span class="o">=</span>True, <span class="nv">track_running_stats</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>2<span class="o">)</span>: Hardswish<span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>1<span class="o">)</span>: ConvNormActivation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>0<span class="o">)</span>: Conv2d<span class="o">(</span>144, 144, <span class="nv">kernel_size</span><span class="o">=(</span>5, 5<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">padding</span><span class="o">=(</span>2, 2<span class="o">)</span>, <span class="nv">groups</span><span class="o">=</span>144, <span class="nv">bias</span><span class="o">=</span>False<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>1<span class="o">)</span>: BatchNorm2d<span class="o">(</span>144, <span class="nv">eps</span><span class="o">=</span>0.001, <span class="nv">momentum</span><span class="o">=</span>0.01, <span class="nv">affine</span><span class="o">=</span>True, <span class="nv">track_running_stats</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>2<span class="o">)</span>: Hardswish<span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>2<span class="o">)</span>: SqueezeExcitation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>avgpool<span class="o">)</span>: AdaptiveAvgPool2d<span class="o">(</span><span class="nv">output_size</span><span class="o">=</span>1<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>fc1<span class="o">)</span>: Conv2d<span class="o">(</span>144, 40, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">))</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>fc2<span class="o">)</span>: Conv2d<span class="o">(</span>40, 144, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">))</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>activation<span class="o">)</span>: ReLU<span class="o">()</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>scale_activation<span class="o">)</span>: Hardsigmoid<span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>3<span class="o">)</span>: ConvNormActivation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>0<span class="o">)</span>: Conv2d<span class="o">(</span>144, 48, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">bias</span><span class="o">=</span>False<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>1<span class="o">)</span>: BatchNorm2d<span class="o">(</span>48, <span class="nv">eps</span><span class="o">=</span>0.001, <span class="nv">momentum</span><span class="o">=</span>0.01, <span class="nv">affine</span><span class="o">=</span>True, <span class="nv">track_running_stats</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">(</span>9<span class="o">)</span>: InvertedResidual<span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="o">(</span>block<span class="o">)</span>: Sequential<span class="o">(</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>0<span class="o">)</span>: ConvNormActivation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>0<span class="o">)</span>: Conv2d<span class="o">(</span>48, 288, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">bias</span><span class="o">=</span>False<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>1<span class="o">)</span>: BatchNorm2d<span class="o">(</span>288, <span class="nv">eps</span><span class="o">=</span>0.001, <span class="nv">momentum</span><span class="o">=</span>0.01, <span class="nv">affine</span><span class="o">=</span>True, <span class="nv">track_running_stats</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>2<span class="o">)</span>: Hardswish<span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>1<span class="o">)</span>: ConvNormActivation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>0<span class="o">)</span>: Conv2d<span class="o">(</span>288, 288, <span class="nv">kernel_size</span><span class="o">=(</span>5, 5<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>2, 2<span class="o">)</span>, <span class="nv">padding</span><span class="o">=(</span>2, 2<span class="o">)</span>, <span class="nv">groups</span><span class="o">=</span>288, <span class="nv">bias</span><span class="o">=</span>False<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>1<span class="o">)</span>: BatchNorm2d<span class="o">(</span>288, <span class="nv">eps</span><span class="o">=</span>0.001, <span class="nv">momentum</span><span class="o">=</span>0.01, <span class="nv">affine</span><span class="o">=</span>True, <span class="nv">track_running_stats</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>2<span class="o">)</span>: Hardswish<span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>2<span class="o">)</span>: SqueezeExcitation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>avgpool<span class="o">)</span>: AdaptiveAvgPool2d<span class="o">(</span><span class="nv">output_size</span><span class="o">=</span>1<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>fc1<span class="o">)</span>: Conv2d<span class="o">(</span>288, 72, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">))</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>fc2<span class="o">)</span>: Conv2d<span class="o">(</span>72, 288, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">))</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>activation<span class="o">)</span>: ReLU<span class="o">()</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>scale_activation<span class="o">)</span>: Hardsigmoid<span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>3<span class="o">)</span>: ConvNormActivation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>0<span class="o">)</span>: Conv2d<span class="o">(</span>288, 96, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">bias</span><span class="o">=</span>False<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>1<span class="o">)</span>: BatchNorm2d<span class="o">(</span>96, <span class="nv">eps</span><span class="o">=</span>0.001, <span class="nv">momentum</span><span class="o">=</span>0.01, <span class="nv">affine</span><span class="o">=</span>True, <span class="nv">track_running_stats</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">(</span>10<span class="o">)</span>: InvertedResidual<span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="o">(</span>block<span class="o">)</span>: Sequential<span class="o">(</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>0<span class="o">)</span>: ConvNormActivation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>0<span class="o">)</span>: Conv2d<span class="o">(</span>96, 576, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">bias</span><span class="o">=</span>False<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>1<span class="o">)</span>: BatchNorm2d<span class="o">(</span>576, <span class="nv">eps</span><span class="o">=</span>0.001, <span class="nv">momentum</span><span class="o">=</span>0.01, <span class="nv">affine</span><span class="o">=</span>True, <span class="nv">track_running_stats</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>2<span class="o">)</span>: Hardswish<span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>1<span class="o">)</span>: ConvNormActivation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>0<span class="o">)</span>: Conv2d<span class="o">(</span>576, 576, <span class="nv">kernel_size</span><span class="o">=(</span>5, 5<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">padding</span><span class="o">=(</span>2, 2<span class="o">)</span>, <span class="nv">groups</span><span class="o">=</span>576, <span class="nv">bias</span><span class="o">=</span>False<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>1<span class="o">)</span>: BatchNorm2d<span class="o">(</span>576, <span class="nv">eps</span><span class="o">=</span>0.001, <span class="nv">momentum</span><span class="o">=</span>0.01, <span class="nv">affine</span><span class="o">=</span>True, <span class="nv">track_running_stats</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>2<span class="o">)</span>: Hardswish<span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>2<span class="o">)</span>: SqueezeExcitation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>avgpool<span class="o">)</span>: AdaptiveAvgPool2d<span class="o">(</span><span class="nv">output_size</span><span class="o">=</span>1<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>fc1<span class="o">)</span>: Conv2d<span class="o">(</span>576, 144, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">))</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>fc2<span class="o">)</span>: Conv2d<span class="o">(</span>144, 576, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">))</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>activation<span class="o">)</span>: ReLU<span class="o">()</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>scale_activation<span class="o">)</span>: Hardsigmoid<span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>3<span class="o">)</span>: ConvNormActivation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>0<span class="o">)</span>: Conv2d<span class="o">(</span>576, 96, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">bias</span><span class="o">=</span>False<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>1<span class="o">)</span>: BatchNorm2d<span class="o">(</span>96, <span class="nv">eps</span><span class="o">=</span>0.001, <span class="nv">momentum</span><span class="o">=</span>0.01, <span class="nv">affine</span><span class="o">=</span>True, <span class="nv">track_running_stats</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">(</span>11<span class="o">)</span>: InvertedResidual<span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="o">(</span>block<span class="o">)</span>: Sequential<span class="o">(</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>0<span class="o">)</span>: ConvNormActivation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>0<span class="o">)</span>: Conv2d<span class="o">(</span>96, 576, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">bias</span><span class="o">=</span>False<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>1<span class="o">)</span>: BatchNorm2d<span class="o">(</span>576, <span class="nv">eps</span><span class="o">=</span>0.001, <span class="nv">momentum</span><span class="o">=</span>0.01, <span class="nv">affine</span><span class="o">=</span>True, <span class="nv">track_running_stats</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>2<span class="o">)</span>: Hardswish<span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>1<span class="o">)</span>: ConvNormActivation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>0<span class="o">)</span>: Conv2d<span class="o">(</span>576, 576, <span class="nv">kernel_size</span><span class="o">=(</span>5, 5<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">padding</span><span class="o">=(</span>2, 2<span class="o">)</span>, <span class="nv">groups</span><span class="o">=</span>576, <span class="nv">bias</span><span class="o">=</span>False<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>1<span class="o">)</span>: BatchNorm2d<span class="o">(</span>576, <span class="nv">eps</span><span class="o">=</span>0.001, <span class="nv">momentum</span><span class="o">=</span>0.01, <span class="nv">affine</span><span class="o">=</span>True, <span class="nv">track_running_stats</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>2<span class="o">)</span>: Hardswish<span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>2<span class="o">)</span>: SqueezeExcitation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>avgpool<span class="o">)</span>: AdaptiveAvgPool2d<span class="o">(</span><span class="nv">output_size</span><span class="o">=</span>1<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>fc1<span class="o">)</span>: Conv2d<span class="o">(</span>576, 144, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">))</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>fc2<span class="o">)</span>: Conv2d<span class="o">(</span>144, 576, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">))</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>activation<span class="o">)</span>: ReLU<span class="o">()</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>scale_activation<span class="o">)</span>: Hardsigmoid<span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">(</span>3<span class="o">)</span>: ConvNormActivation<span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>0<span class="o">)</span>: Conv2d<span class="o">(</span>576, 96, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">bias</span><span class="o">=</span>False<span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">(</span>1<span class="o">)</span>: BatchNorm2d<span class="o">(</span>96, <span class="nv">eps</span><span class="o">=</span>0.001, <span class="nv">momentum</span><span class="o">=</span>0.01, <span class="nv">affine</span><span class="o">=</span>True, <span class="nv">track_running_stats</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">(</span>12<span class="o">)</span>: ConvNormActivation<span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="o">(</span>0<span class="o">)</span>: Conv2d<span class="o">(</span>96, 576, <span class="nv">kernel_size</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">stride</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">bias</span><span class="o">=</span>False<span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">(</span>1<span class="o">)</span>: BatchNorm2d<span class="o">(</span>576, <span class="nv">eps</span><span class="o">=</span>0.001, <span class="nv">momentum</span><span class="o">=</span>0.01, <span class="nv">affine</span><span class="o">=</span>True, <span class="nv">track_running_stats</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">(</span>2<span class="o">)</span>: Hardswish<span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">(</span>avgpool<span class="o">)</span>: AdaptiveAvgPool2d<span class="o">(</span><span class="nv">output_size</span><span class="o">=</span>1<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">(</span>classifier<span class="o">)</span>: Sequential<span class="o">(</span>
</span></span><span class="line"><span class="cl">    <span class="o">(</span>0<span class="o">)</span>: Linear<span class="o">(</span><span class="nv">in_features</span><span class="o">=</span>576, <span class="nv">out_features</span><span class="o">=</span>1024, <span class="nv">bias</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">(</span>1<span class="o">)</span>: Hardswish<span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="o">(</span>2<span class="o">)</span>: Dropout<span class="o">(</span><span class="nv">p</span><span class="o">=</span>0.2, <span class="nv">inplace</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">(</span>3<span class="o">)</span>: Linear<span class="o">(</span><span class="nv">in_features</span><span class="o">=</span>1024, <span class="nv">out_features</span><span class="o">=</span>1000, <span class="nv">bias</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">)</span>
</span></span></code></pre></div><h1 id="测试模型">测试模型</h1>
<p>pytorch官方训练的模型对输入有严格限制，必须是Tensor类型的数组，包含多幅图像。为了测试一张图像，我们可以使用PIL读取图片之后
使用官方的transform工具转为可输入的Tensor类型数据后，插入到空数组中得到特征值</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 读取图像</span>
</span></span><span class="line"><span class="cl"><span class="n">img</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;image/path&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">convert</span><span class="p">(</span><span class="s1">&#39;RGB&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 定义transform</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">torch</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">torchvision</span> <span class="kn">import</span> <span class="n">transforms</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">transform</span> <span class="o">=</span> <span class="n">transforms</span><span class="o">.</span><span class="n">Compose</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">  <span class="n">transforms</span><span class="o">.</span><span class="n">Resize</span><span class="p">(</span><span class="mi">128</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">  <span class="n">transforms</span><span class="o">.</span><span class="n">ToTensor</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">  <span class="n">transforms</span><span class="o">.</span><span class="n">Normalize</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">mean</span><span class="o">=</span><span class="p">[</span><span class="mf">0.485</span><span class="p">,</span> <span class="mf">0.456</span><span class="p">,</span> <span class="mf">0.405</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">=</span><span class="p">[</span><span class="mf">0.229</span><span class="p">,</span> <span class="mf">0.224</span><span class="p">,</span> <span class="mf">0.225</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 获取Tensor</span>
</span></span><span class="line"><span class="cl"><span class="n">img_tensor</span> <span class="o">=</span> <span class="n">transform</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 转为batch</span>
</span></span><span class="line"><span class="cl"><span class="n">batch_t</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">unsqueeze</span><span class="p">(</span><span class="n">img_tensor</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 测试</span>
</span></span><span class="line"><span class="cl"><span class="n">features</span> <span class="o">=</span> <span class="n">mobilenet</span><span class="p">(</span><span class="n">batch_t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">features</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span> <span class="c1"># torch.Size([1000])</span>
</span></span></code></pre></div><p>这样，就有了大小为1000的特征向量，可以作为环境的状态进行DRL训练了</p>
]]></content></item><item><title>Docker多级构建指南</title><link>https://blog.thinkmoe.icu/posts/docker%E5%A4%9A%E7%BA%A7%E6%9E%84%E5%BB%BA%E6%8C%87%E5%8D%97/</link><pubDate>Wed, 25 Aug 2021 09:01:12 +0800</pubDate><guid>https://blog.thinkmoe.icu/posts/docker%E5%A4%9A%E7%BA%A7%E6%9E%84%E5%BB%BA%E6%8C%87%E5%8D%97/</guid><description>多级构建让你的容器更小巧~
在构建Docker镜像的时候经常发现构建出来的容器大小非常的大，而我本地编译出来的二进制文件也不过26MB左右而Docker容器居然有120MB！ 问题出现在哪里了呢？我们一步一步从最起始的地方开始看起
构建方式 Docker容器的构建方法我个人常用以下几种
本地打包二进制后直接放入Docker中运行 容器内打包直接运行 第一种的方式就是在本地编译好要执行的文件之后放入容器之中运行，这种方式无疑是最简单的方法也是最容易理解的方法。 但这种方法仔细一想就会发现有很多问题，假设我们需要在Windows机器编译Linux版本的容器内运行要怎么办呢？ 除此之外，假设我们换了一台机器也需要编译一份Docker镜像时，本地没有对应的编译工具要如何解决呢？ 为了应对上述问题，也就有了第二种方法。
第二种的方式就是将代码放在容器内部编译，这样既解决了编译环境问题也解决了编译平台的问题。 但第二种方法带来的问题就是我今天要说的，那就是打包后的镜像体积过大，完全不如第一种打包出来的镜像。 这是因为，第一种只是将二进制文件放入容器内直接运行，而第二种还添加了项目的源代码文件，除此之外，还有一堆用于 编译二进制文件的工具在镜像之中，因此打包出来的镜像体积会非常巨大。 那有没有一种方法既能随意构建又不产生大体积的镜像呢？那就要谈谈Docker的多级构建了。
多级构建 Docker的多级构建也就是常说的multi-stage build，你可以通过指定多个stage分别完成不同的任务最后合在一起完成最终的构建。
例如有一个Go的项目，我们可以在stage1阶段进行编译操作，而在stage2阶段进行运行操作，这样就相当于构建1和2相结合，完成最后的构建。
多级构建其实非常简单，其精髓就在于一个命令那就是COPY，这个命令不仅仅可以将本地文件拷贝至Docker的build进程上下文中，还可以在多个stage中 进行文件的复制，而ADD命令则只能用于前者，因此我通常在第一级构建时使用ADD命令将所有的源代码复制到Docker上下文中后，使用COPY应对其他层级的构建。COPY的参数非常简单
COPY --from=stage source dest 其中from就是用于表明从哪个stage中复制文件，不添加该参数则默认从宿主机中复制文件。stage可以用数字表示从第几级复制(从0开始)，也可以用字符串来指定层级复制但需要对层级进行命名
# builder stage FROM x as builder # final stage FROM x as final COPY --from=builder /abc /abc COPY --from=0 /abc/abc 实战 以我的Yuki为例，该项目由React和Go组成，其中Go将会提供服务器提供前端接口。
首先分析阶层，我们需要编译两个项目，其中是React另一个是Go，并且Go的编译需要依赖于React。因此很容易得出，以下顺序
编译React 编译Go 运行 为了让编译出来的容器尽可能的小，我们在选取构建容器时也尽量选择小的容器来进行编译例如我最喜欢的alpine。因此在Docker Hub中寻找关于nodejs和golang的alpine版本，由于原版golang的alpine版本不附带gcc因此我选择了第三方的容器tetafro/golang-gcc。而提供运行环境的容器我也选择了alpine:3.14
NodeJS: node:14.17.5-alpine(117MB) Golang: tetafro/golang-gcc:1.16-alpine(425MB) Runtime: alpine:3.14(5.6MB) 在选择完构建容器后就可以正式构建自己的程序了，首先是React的打包，注意的是如果将node_modules文件一并Add的话将不会再拉取一遍不符合我们的要求，因此需要提请编写一个类似于.gitignore文件的.dockerignore文件，例如我使用的
cat ./dockerignore release data web/node_modules web/dist .</description><content type="html"><![CDATA[<blockquote>
<p>多级构建让你的容器更小巧~</p>
</blockquote>
<p>在构建Docker镜像的时候经常发现构建出来的容器大小非常的大，而我本地编译出来的二进制文件也不过26MB左右而Docker容器居然有120MB！
问题出现在哪里了呢？我们一步一步从最起始的地方开始看起</p>
<h2 id="构建方式">构建方式</h2>
<p>Docker容器的构建方法我个人常用以下几种</p>
<ol>
<li>本地打包二进制后直接放入Docker中运行</li>
<li>容器内打包直接运行</li>
</ol>
<p>第一种的方式就是在本地编译好要执行的文件之后放入容器之中运行，这种方式无疑是最简单的方法也是最容易理解的方法。
但这种方法仔细一想就会发现有很多问题，假设我们需要在Windows机器编译Linux版本的容器内运行要怎么办呢？
除此之外，假设我们换了一台机器也需要编译一份Docker镜像时，本地没有对应的编译工具要如何解决呢？
为了应对上述问题，也就有了第二种方法。</p>
<p>第二种的方式就是将代码放在容器内部编译，这样既解决了编译环境问题也解决了编译平台的问题。
但第二种方法带来的问题就是我今天要说的，那就是打包后的镜像体积过大，完全不如第一种打包出来的镜像。
这是因为，第一种只是将二进制文件放入容器内直接运行，而第二种还添加了项目的源代码文件，除此之外，还有一堆用于
编译二进制文件的工具在镜像之中，因此打包出来的镜像体积会非常巨大。
那有没有一种方法既能随意构建又不产生大体积的镜像呢？那就要谈谈Docker的多级构建了。</p>
<h2 id="多级构建">多级构建</h2>
<p>Docker的多级构建也就是常说的<code>multi-stage build</code>，你可以通过指定多个stage分别完成不同的任务最后合在一起完成最终的构建。</p>
<p>例如有一个Go的项目，我们可以在stage1阶段进行编译操作，而在stage2阶段进行运行操作，这样就相当于构建1和2相结合，完成最后的构建。</p>
<p>多级构建其实非常简单，其精髓就在于一个命令那就是<code>COPY</code>，这个命令不仅仅可以将本地文件拷贝至Docker的build进程上下文中，还可以在多个stage中
进行文件的复制，而<code>ADD</code>命令则只能用于前者，因此我通常在第一级构建时使用<code>ADD</code>命令将所有的源代码复制到Docker上下文中后，使用<code>COPY</code>应对其他层级的构建。<code>COPY</code>的参数非常简单</p>
<pre><code>COPY --from=stage source dest
</code></pre>
<p>其中<code>from</code>就是用于表明从哪个stage中复制文件，不添加该参数则默认从宿主机中复制文件。stage可以用数字表示从第几级复制(从0开始)，也可以用字符串来指定层级复制但需要对层级进行命名</p>
<pre><code># builder stage
FROM x as builder

# final stage
FROM x as final
COPY --from=builder /abc /abc
COPY --from=0 /abc/abc
</code></pre>
<h2 id="实战">实战</h2>
<p>以我的<a href="https://github.com/miRemid/yuki">Yuki</a>为例，该项目由<code>React</code>和<code>Go</code>组成，其中<code>Go</code>将会提供服务器提供前端接口。</p>
<p>首先分析阶层，我们需要编译两个项目，其中是<code>React</code>另一个是<code>Go</code>，并且<code>Go</code>的编译需要依赖于<code>React</code>。因此很容易得出，以下顺序</p>
<ol>
<li>编译React</li>
<li>编译Go</li>
<li>运行</li>
</ol>
<p>为了让编译出来的容器尽可能的小，我们在选取构建容器时也尽量选择小的容器来进行编译例如我最喜欢的<code>alpine</code>。因此在<a href="https://hub.docker.com">Docker Hub</a>中寻找关于<code>nodejs</code>和<code>golang</code>的<code>alpine</code>版本，由于原版<code>golang</code>的<code>alpine</code>版本不附带<code>gcc</code>因此我选择了第三方的容器<code>tetafro/golang-gcc</code>。而提供运行环境的容器我也选择了<code>alpine:3.14</code></p>
<ul>
<li>NodeJS: node:14.17.5-alpine(117MB)</li>
<li>Golang: tetafro/golang-gcc:1.16-alpine(425MB)</li>
<li>Runtime: alpine:3.14(5.6MB)</li>
</ul>
<p>在选择完构建容器后就可以正式构建自己的程序了，首先是React的打包，注意的是如果将<code>node_modules</code>文件一并Add的话将不会再拉取一遍不符合我们的要求，因此需要提请编写一个类似于<code>.gitignore</code>文件的<code>.dockerignore</code>文件，例如我使用的</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">cat ./dockerignore
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">release
</span></span><span class="line"><span class="cl">data
</span></span><span class="line"><span class="cl">web/node_modules
</span></span><span class="line"><span class="cl">web/dist
</span></span><span class="line"><span class="cl">.git
</span></span><span class="line"><span class="cl">.cache
</span></span></code></pre></div><p>这样就可以安心写<code>Dockerfile</code>了</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Dockerfile" data-lang="Dockerfile"><span class="line"><span class="cl"><span class="c"># build react</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 使用下载的node容器，并将该阶段命名为node</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">FROM</span><span class="s"> node:14.17.5-alpine as node</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 将所有源代码放入容器的/yuki文件夹中</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ADD</span> . /yuki<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 切换当前工作路径到/yuki/web中，该目录是React工程根目录</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /yuki/web</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 拉取依赖并打包，/yuki/web/dist</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> yarn <span class="o">&amp;&amp;</span> yarn build<span class="err">
</span></span></span></code></pre></div><p>在构建完前端后就可以来编译后端项目了，这时就要使用多级构建中的<code>COPY</code>命令了</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Dockerfile" data-lang="Dockerfile"><span class="line"><span class="cl"><span class="c"># build golang</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 使用下载的go容器，并将该阶段命名为golang</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">FROM</span><span class="s"> tetafro/golang-gcc:1.16-alpine as golang</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 从node层中复制源代码到本层的/yuki中，此时文件夹中已经包含了node层打包好的前端项目</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> --from<span class="o">=</span>node /yuki /yuki<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 切换工作路径</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /yuki</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 静态编译</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> <span class="nv">CGO_ENABLE</span><span class="o">=</span><span class="m">0</span> <span class="nv">GOOS</span><span class="o">=</span>linux <span class="nv">GOARCH</span><span class="o">=</span>amd64 go build -mod<span class="o">=</span>vendor -a -ldflags <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	<span class="s1">&#39; -extldflags &#34;-static&#34;&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-o yuki_linux_amd64<span class="err">
</span></span></span></code></pre></div><p>构建完二进制文件后，就需要将二进制文件和一些必要的静态文件放入到最终的运行容器中运行了</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Dockerfile" data-lang="Dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> alpine:3.14</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 从golang层复制所需要的文件</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> --from<span class="o">=</span>golang /yuki/yuki_linux_amd64 /yuki_linux_amd64<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> --from<span class="o">=</span>golang /yuki/docs /docs<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 切换工作路径</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 运行</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">CMD</span> <span class="p">[</span> <span class="s2">&#34;sh&#34;</span><span class="p">,</span> <span class="s2">&#34;-c&#34;</span><span class="p">,</span> <span class="s2">&#34;/yuki_linux_amd64&#34;</span> <span class="p">]</span><span class="err">
</span></span></span></code></pre></div><p>可以看到，我们最后只复制了必要的二进制文件和所需要的静态文件到最后的容器之中，并没有其他任何东西，因此最终的容器大小理论上是默认大小加上二进制文件大小，事实是这样吗。事实上也确实如此，查看本地静态编译文件大小和打包后的镜像大小发现两者相差几乎等于镜像的大小</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">zsh&gt; <span class="nb">cd</span> release <span class="o">&amp;&amp;</span> ll
</span></span><span class="line"><span class="cl">-rwxrwxr-x <span class="m">1</span> kamir kamir  26M Aug <span class="m">25</span> 09:39 yuki_linux_amd64
</span></span><span class="line"><span class="cl">zsh&gt; docker images <span class="p">|</span> grep yuki
</span></span><span class="line"><span class="cl">yuki                  latest                  eb2e260d4701   <span class="m">5</span> hours ago    32.8MB
</span></span><span class="line"><span class="cl">zsh&gt; docker images <span class="p">|</span> grep alpine
</span></span><span class="line"><span class="cl">alpine                3.14                    021b3423115f   <span class="m">2</span> weeks ago    5.6MB
</span></span></code></pre></div><p>这样一个完美的小容器就诞生了~</p>
]]></content></item><item><title>Ubuntu Server 20.04 设置IP和网关地址</title><link>https://blog.thinkmoe.icu/posts/ubuntu-server-20.04-%E8%AE%BE%E7%BD%AEip%E5%9C%B0%E5%9D%80%E5%92%8C%E7%BD%91%E5%85%B3%E5%9C%B0%E5%9D%80/</link><pubDate>Thu, 19 Aug 2021 15:36:40 +0800</pubDate><guid>https://blog.thinkmoe.icu/posts/ubuntu-server-20.04-%E8%AE%BE%E7%BD%AEip%E5%9C%B0%E5%9D%80%E5%92%8C%E7%BD%91%E5%85%B3%E5%9C%B0%E5%9D%80/</guid><description>Ubuntu从20.04版本开始使用netplan对网络进行管理，百度上使用的/etc/network/interfaces文件已不再适用，需要修改netplan配置文件进行更新
修改配置文件 netplan的配置文件存放在/etc/netplan中，其中有诸如00-installer-config.yaml的配置文件，打开可以发现
# This is the network config written by &amp;#39;subiquity&amp;#39; network: ethernets: # 网卡名称，我这是虚拟机ens33 ens33: # 是否开启dhcp服务，设置为true后后续的ip和网关可以不用设置 dhcp4: no # IP地址，一般设置一个就行 # 后面的24是子网掩码数目，代表255.255.255.0(11111111.11111111.11111111.00000000) addresses: [192.168.1.106/24] optional: true # 网关地址 gateway4: 192.168.1.253 # dns地址 nameservers: addresses: [233.5.5.5, 192.168.1.253] version: 2 当然，这只是最为基础的网络配置，对于多张网卡还可以进行其他的配置，详情可以参考Netplan官方文档
在修改完文件之后，终端输入以下命令应用配置，Ping外网测试连通性
sudo netplay apply ping 8.8.8.8</description><content type="html"><![CDATA[<p>Ubuntu从20.04版本开始使用<code>netplan</code>对网络进行管理，百度上使用的<code>/etc/network/interfaces</code>文件已不再适用，需要修改<code>netplan</code>配置文件进行更新</p>
<h2 id="修改配置文件">修改配置文件</h2>
<p><code>netplan</code>的配置文件存放在<code>/etc/netplan</code>中，其中有诸如<code>00-installer-config.yaml</code>的配置文件，打开可以发现</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># This is the network config written by &#39;subiquity&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">network</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ethernets</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 网卡名称，我这是虚拟机ens33</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ens33</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 是否开启dhcp服务，设置为true后后续的ip和网关可以不用设置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">dhcp4</span><span class="p">:</span><span class="w"> </span><span class="kc">no</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># IP地址，一般设置一个就行</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 后面的24是子网掩码数目，代表255.255.255.0(11111111.11111111.11111111.00000000)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">addresses</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="m">192.168.1.106</span><span class="l">/24]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">optional</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 网关地址</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">gateway4</span><span class="p">:</span><span class="w"> </span><span class="m">192.168.1.253</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># dns地址</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">nameservers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">addresses</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="m">233.5.5.5</span><span class="p">,</span><span class="w"> </span><span class="m">192.168.1.253</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="m">2</span><span class="w">
</span></span></span></code></pre></div><p>当然，这只是最为基础的网络配置，对于多张网卡还可以进行其他的配置，详情可以参考<a href="%22https://netplan.io/examples/%22">Netplan官方文档</a></p>
<p>在修改完文件之后，终端输入以下命令应用配置，Ping外网测试连通性</p>
<pre><code>sudo netplay apply
ping 8.8.8.8</code></pre>
]]></content></item><item><title>Websocket关闭错误代码含义</title><link>https://blog.thinkmoe.icu/posts/websocket%E5%85%B3%E9%97%AD%E9%94%99%E8%AF%AF%E4%BB%A3%E7%A0%81%E5%90%AB%E4%B9%89/</link><pubDate>Sat, 07 Aug 2021 15:00:19 +0800</pubDate><guid>https://blog.thinkmoe.icu/posts/websocket%E5%85%B3%E9%97%AD%E9%94%99%E8%AF%AF%E4%BB%A3%E7%A0%81%E5%90%AB%E4%B9%89/</guid><description>前情 在处理B站直播的Websocket源时，经常发生连接关闭的错误，最常见的就是close 1006 (abnormal closure): unexpected EOF错误，你说http的状态码还知道，这websocet的状态码还真不知道，于是去查了查记录一下
RFC 6455 根据RFC 6455定义的内容，Websocket在处理关闭时设置了一系列的代码提示。当对一个已经建立的连接进行关闭时，在终端处可能提供一个关闭的解释说明，客户端可以根据这个代码来推测终端关闭连接的原因从而更新客户端连接的代码。当然，终端在关闭时也可以忽视代码直接进行关闭
1000 Normal Closure 1000表明这是一个正常的关闭，表明要传输的数据已经全部完成可以退出
1001 Going Away 1001说明终端可能已经找不到该连接，例如服务可能宕机或浏览器重定向至其他页面
1002 Protocal error 1002说明连接被终端由于消息协议错误而进行强制性退出
1003 Unsupported Data 1003说明终端接受到一个无法处理的数据而进行强制性退出(例如，服务器可能只能够处理文本数据但接受到了二进制数据)
1004 &amp;mdash;Reserved&amp;mdash; 1004字段保留，未来可能用得到
1005 No Status Rcvd 1005是一个保留数据，绝对不允许终端将其设置为关闭时的状态码。It is designated for use in applications expecting a status code to indicate the no stats code was actually present.
1006 Abnormal Closure 1006是一个保留数据，绝对不允许终端将其设置为关闭时的状态码。它是用来指定需要状态码标志连接异常关闭的程序，例如没有发送或接受控制数据
1007 Invalid frame payload data 1007说明终端收到了一个不符合规定的格式数据而关闭连接(例如，non-UTF-8格式的数据包括了一段text消息)
1008 Policy Violation 1008说明终端收到了一个违反服务规则的消息而关闭连接，这是一个多功能状态码，它可以用于没有其他合适的状态码时发送出去例如(1003或1009)或者在有必要隐藏自己的规则信息时发送出去
1009 Message Too Big 1009说明终端收到了一个过大的数据而关闭连接</description><content type="html"><![CDATA[<h2 id="前情">前情</h2>
<p>在处理B站直播的Websocket源时，经常发生连接关闭的错误，最常见的就是<code>close 1006 (abnormal closure): unexpected EOF</code>错误，你说http的状态码还知道，这websocet的状态码还真不知道，于是去查了查记录一下</p>
<h2 id="rfc-6455">RFC 6455</h2>
<p>根据<a href="https://tools.ietf.org/pdf/rfc6455.pdf">RFC 6455</a>定义的内容，Websocket在处理关闭时设置了一系列的代码提示。当对一个已经建立的连接进行关闭时，在终端处可能提供一个关闭的解释说明，客户端可以根据这个代码来推测终端关闭连接的原因从而更新客户端连接的代码。当然，终端在关闭时也可以忽视代码直接进行关闭</p>
<ul>
<li>1000 Normal Closure</li>
</ul>
<p>1000表明这是一个正常的关闭，表明要传输的数据已经全部完成可以退出</p>
<ul>
<li>1001 Going Away</li>
</ul>
<p>1001说明终端可能已经找不到该连接，例如服务可能宕机或浏览器重定向至其他页面</p>
<ul>
<li>1002 Protocal error</li>
</ul>
<p>1002说明连接被终端由于消息协议错误而进行强制性退出</p>
<ul>
<li>1003 Unsupported Data</li>
</ul>
<p>1003说明终端接受到一个无法处理的数据而进行强制性退出(例如，服务器可能只能够处理文本数据但接受到了二进制数据)</p>
<ul>
<li>1004 &mdash;Reserved&mdash;</li>
</ul>
<p>1004字段保留，未来可能用得到</p>
<ul>
<li>1005 No Status Rcvd</li>
</ul>
<p>1005是一个保留数据，绝对不允许终端将其设置为关闭时的状态码。It is designated for use in applications expecting a status code to indicate the no stats code was actually present.</p>
<ul>
<li>1006 Abnormal Closure</li>
</ul>
<p>1006是一个保留数据，绝对不允许终端将其设置为关闭时的状态码。它是用来指定需要状态码标志连接异常关闭的程序，例如没有发送或接受控制数据</p>
<ul>
<li>1007 Invalid frame payload data</li>
</ul>
<p>1007说明终端收到了一个不符合规定的格式数据而关闭连接(例如，non-UTF-8格式的数据包括了一段text消息)</p>
<ul>
<li>1008 Policy Violation</li>
</ul>
<p>1008说明终端收到了一个违反服务规则的消息而关闭连接，这是一个多功能状态码，它可以用于没有其他合适的状态码时发送出去例如(1003或1009)或者在有必要隐藏自己的规则信息时发送出去</p>
<ul>
<li>1009 Message Too Big</li>
</ul>
<p>1009说明终端收到了一个过大的数据而关闭连接</p>
<ul>
<li>
<p>1010 Mandatory Ext</p>
</li>
<li>
<p>1011 Internal Server Error</p>
</li>
</ul>
<p>1011说明服务端在处理请求时遇到了一个意外情况</p>
<ul>
<li>1015 TLS handshake</li>
</ul>
<p>1005是一个保留数据，绝对不允许终端将其设置为关闭时的状态码。它用于处理在TLS握手时发生的错误。</p>
<h2 id="错误处理">错误处理</h2>
<p>了解1006错误之后猜测是客户端在退出时没有发送退出信息导致异常关闭，图省事直接处理err忽略完事</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">_</span><span class="p">,</span> <span class="nx">body</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">cli</span><span class="p">.</span><span class="nx">conn</span><span class="p">.</span><span class="nf">ReadMessage</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nx">websocket</span><span class="p">.</span><span class="nf">IsUnexpectedCloseError</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">websocket</span><span class="p">.</span><span class="nx">CloseGoingAway</span><span class="p">,</span> <span class="nx">websocket</span><span class="p">.</span><span class="nx">CloseAbnormalClosure</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">DPrintf</span><span class="p">(</span><span class="s">&#34;Unexpected Close Error&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">closeConn</span> <span class="o">&lt;-</span> <span class="kd">struct</span><span class="p">{}{}</span>
</span></span><span class="line"><span class="cl">    <span class="k">continue</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div>]]></content></item><item><title>Leetcode 每日一题</title><link>https://blog.thinkmoe.icu/posts/leetcode-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</link><pubDate>Fri, 23 Jul 2021 11:50:27 +0800</pubDate><guid>https://blog.thinkmoe.icu/posts/leetcode-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</guid><description>2021/7/23 1893 Check if All the Integers in a Range Are Covered (EASY) You are given a 2D integer array ranges and two integers left and right. Each ranges[i] = [starti, endi] represents an inclusive interval between starti and endi.
Return true if each integer in the inclusive range [left, right] is covered by at least one interval in ranges. Return false otherwise.
An integer x is covered by an interval ranges[i] = [starti, endi] if starti &amp;lt;= x &amp;lt;= endi.</description><content type="html"><![CDATA[<h2 id="2021723-1893-check-if-all-the-integers-in-a-range-are-covered-easy">2021/7/23 1893 Check if All the Integers in a Range Are Covered (EASY)</h2>
<p>You are given a 2D integer array <code>ranges</code> and two integers <code>left</code> and <code>right</code>. Each <code>ranges[i] = [starti, endi]</code> represents an inclusive interval between <code>starti</code> and <code>endi</code>.</p>
<p>Return <code>true</code> if each integer in the inclusive range <code>[left, right]</code> is covered by <strong>at least one</strong> interval in <code>ranges</code>. Return <code>false</code> otherwise.</p>
<p>An integer <code>x</code> is covered by an interval <code>ranges[i] = [starti, endi] if starti &lt;= x &lt;= endi.</code></p>
<h4 id="暴力">暴力</h4>
<p>简单题直接暴力破解即可，无需多言</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">isCovered</span><span class="p">(</span><span class="nx">ranges</span> <span class="p">[][]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">left</span><span class="p">,</span> <span class="nx">right</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">boolMap</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="kt">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">num</span> <span class="o">:=</span> <span class="nx">left</span><span class="p">;</span> <span class="nx">num</span> <span class="o">&lt;=</span> <span class="nx">right</span><span class="p">;</span> <span class="nx">num</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">var</span> <span class="nx">flag</span> <span class="p">=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">r</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">ranges</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="nx">num</span> <span class="o">&gt;=</span> <span class="nx">r</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="nx">num</span> <span class="o">&lt;=</span> <span class="nx">r</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">flag</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">                <span class="k">break</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="nx">boolMap</span><span class="p">[</span><span class="nx">num</span><span class="p">]</span> <span class="p">=</span> <span class="nx">flag</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">boolMap</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">!</span><span class="nx">v</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>执行用时：4 ms, 在所有 Go 提交中击败了21.05%的用户</p>
<p>内存消耗：2.6 MB, 在所有 Go 提交中击败了14.91%的用户</p>
<h4 id="差分数组">差分数组</h4>
<p>另一种简单的方法就是差分数组，先统计每组Range的氛围，然后再看提供的数字是否处于范围之内即可</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">isCovered</span><span class="p">(</span><span class="nx">ranges</span> <span class="p">[][]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">left</span><span class="p">,</span> <span class="nx">right</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">diff</span> <span class="o">:=</span> <span class="p">[</span><span class="mi">52</span><span class="p">]</span><span class="kt">int</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 1. check ranges
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">ranges</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">diff</span><span class="p">[</span><span class="nx">v</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">        <span class="nx">diff</span><span class="p">[</span><span class="nx">v</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">--</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 2. check num in left right range
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">cnt</span> <span class="o">:=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">right</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">cnt</span> <span class="o">+=</span> <span class="nx">diff</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">i</span> <span class="o">&gt;=</span> <span class="nx">left</span> <span class="o">&amp;&amp;</span> <span class="nx">cnt</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>执行用时：0 ms, 在所有 Go 提交中击败了100%的用户</p>
<p>内存消耗：2.5 MB, 在所有 Go 提交中击败了80.70%的用户</p>
<h2 id="2021726-1713-minimum-operations-to-make-a-subsequence-hard">2021/7/26 1713 Minimum Operations to Make a Subsequence (HARD)</h2>
<p>You are given an array target that consists of distinct integers and another integer array arr that can have duplicates.</p>
<p>In one operation, you can insert any integer at any position in arr. For example, if arr = [1,4,1,2], you can add 3 in the middle and make it [1,4,3,1,2]. Note that you can insert the integer at the very beginning or end of the array.</p>
<p>Return the minimum number of operations needed to make target a subsequence of arr.</p>
<p>A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements&rsquo; relative order. For example, [2,7,4] is a subsequence of [4,2,3,7,2,1,4] (the underlined elements), while [2,4,2] is not.</p>
<h4 id="贪心">贪心</h4>
<p>题目要求寻找到两个数组中的最少插入元素个数使target成为arr的子集，可以转换思路，寻找到两个数组的最长公共子集，最后要插入的个数就是target数组的长度减去最长公共子集长度</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">minOperations</span><span class="p">(</span><span class="nx">target</span> <span class="p">[]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">arr</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">n</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">target</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">pos</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">val</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">target</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">pos</span><span class="p">[</span><span class="nx">val</span><span class="p">]</span> <span class="p">=</span> <span class="nx">i</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">d</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">val</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">arr</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">idx</span><span class="p">,</span> <span class="nx">has</span> <span class="o">:=</span> <span class="nx">pos</span><span class="p">[</span><span class="nx">val</span><span class="p">];</span> <span class="nx">has</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">p</span> <span class="o">:=</span> <span class="nx">sort</span><span class="p">.</span><span class="nf">SearchInts</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span> <span class="nx">idx</span><span class="p">);</span> <span class="nx">p</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">d</span><span class="p">[</span><span class="nx">p</span><span class="p">]</span> <span class="p">=</span> <span class="nx">idx</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">d</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span> <span class="nx">idx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">n</span> <span class="o">-</span> <span class="nb">len</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>执行用时：168 ms, 在所有 Go 提交中击败了63.89%的用户</p>
<p>内存消耗：12.3 MB, 在所有 Go 提交中击败了91.67%的用户</p>
<h2 id="2021726-671-second-minimum-node-in-a-binary-tree-easy">2021/7.26 671 Second Minimum Node In a Binary Tree (EASY)</h2>
<p>Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly two or zero sub-node. If the node has two sub-nodes, then this node&rsquo;s value is the smaller value among its two sub-nodes. More formally, the property root.val = min(root.left.val, root.right.val) always holds.</p>
<p>Given such a binary tree, you need to output the second minimum value in the set made of all the nodes&rsquo; value in the whole tree.</p>
<p>If no such second minimum value exists, output -1 instead.</p>
<h4 id="dfs暴力">DFS暴力</h4>
<p>由题意可知，根节点的值是最小的，要找到整棵树中的第二小的值只需要对所有节点进行遍历，寻找到大于根节点的最大值即可</p>
<p>初始化一个<code>ans</code>等于-1，代表未找到第二小的值，对树进行遍历，当值大于root的值并大于ans时，更新ans的值。最后返回ans的值，就是第二小的值</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">findSecondMinimumValue</span><span class="p">(</span><span class="nx">root</span> <span class="o">*</span><span class="nx">TreeNode</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">ans</span> <span class="o">:=</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="nx">rootVal</span> <span class="o">:=</span> <span class="nx">root</span><span class="p">.</span><span class="nx">Val</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">dfs</span> <span class="kd">func</span><span class="p">(</span><span class="o">*</span><span class="nx">TreeNode</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">dfs</span> <span class="p">=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">node</span> <span class="o">*</span><span class="nx">TreeNode</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">node</span> <span class="o">==</span> <span class="kc">nil</span> <span class="o">||</span> <span class="nx">ans</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="nx">node</span><span class="p">.</span><span class="nx">Val</span> <span class="o">&gt;=</span> <span class="nx">ans</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">node</span><span class="p">.</span><span class="nx">Val</span> <span class="p">&gt;</span> <span class="nx">rootVal</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">ans</span> <span class="p">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">Val</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="nf">dfs</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">Left</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">dfs</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">Right</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nf">dfs</span><span class="p">(</span><span class="nx">root</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">ans</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="2021728-863">2021/7.28 863</h2>
<p>Given the root of a binary tree, the value of a target node target, and an integer k, return an array of the values of all nodes that have a distance k from the target node.</p>
<p>You can return the answer in any order.</p>
<h4 id="哈系dfs">哈系+DFS</h4>
<p>首先寻找到所有节点的父节点，然后从Target节点出发，寻找距离K的节点即可</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">distanceK</span><span class="p">(</span><span class="nx">root</span> <span class="o">*</span><span class="nx">TreeNode</span><span class="p">,</span> <span class="nx">target</span> <span class="o">*</span><span class="nx">TreeNode</span><span class="p">,</span> <span class="nx">k</span> <span class="kt">int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 1. get all father node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">var</span> <span class="nx">fathers</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="o">*</span><span class="nx">TreeNode</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">getFather</span> <span class="kd">func</span><span class="p">(</span><span class="nx">root</span> <span class="o">*</span><span class="nx">TreeNode</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">getFather</span> <span class="p">=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">root</span> <span class="o">*</span><span class="nx">TreeNode</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">root</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">root</span><span class="p">.</span><span class="nx">Left</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">fathers</span><span class="p">[</span><span class="nx">root</span><span class="p">.</span><span class="nx">Left</span><span class="p">.</span><span class="nx">Val</span><span class="p">]</span> <span class="p">=</span> <span class="nx">root</span>
</span></span><span class="line"><span class="cl">			<span class="nf">getFather</span><span class="p">(</span><span class="nx">root</span><span class="p">.</span><span class="nx">Left</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">root</span><span class="p">.</span><span class="nx">Right</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">fathers</span><span class="p">[</span><span class="nx">root</span><span class="p">.</span><span class="nx">Right</span><span class="p">.</span><span class="nx">Val</span><span class="p">]</span> <span class="p">=</span> <span class="nx">root</span>
</span></span><span class="line"><span class="cl">			<span class="nf">getFather</span><span class="p">(</span><span class="nx">root</span><span class="p">.</span><span class="nx">Right</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nf">getFather</span><span class="p">(</span><span class="nx">root</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">res</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 2. find the target node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">var</span> <span class="nx">getNode</span> <span class="kd">func</span><span class="p">(</span><span class="o">*</span><span class="nx">TreeNode</span><span class="p">,</span> <span class="o">*</span><span class="nx">TreeNode</span><span class="p">,</span> <span class="kt">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">getNode</span> <span class="p">=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">from</span> <span class="o">*</span><span class="nx">TreeNode</span><span class="p">,</span> <span class="nx">dis</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">node</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">dis</span> <span class="o">==</span> <span class="nx">k</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">res</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="nx">node</span><span class="p">.</span><span class="nx">Val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">node</span><span class="p">.</span><span class="nx">Left</span> <span class="o">!=</span> <span class="nx">from</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nf">getNode</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">Left</span><span class="p">,</span> <span class="nx">node</span><span class="p">,</span> <span class="nx">dis</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">node</span><span class="p">.</span><span class="nx">Right</span> <span class="o">!=</span> <span class="nx">from</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nf">getNode</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">Right</span><span class="p">,</span> <span class="nx">node</span><span class="p">,</span> <span class="nx">dis</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">fathers</span><span class="p">[</span><span class="nx">node</span><span class="p">.</span><span class="nx">Val</span><span class="p">]</span> <span class="o">!=</span> <span class="nx">from</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nf">getNode</span><span class="p">(</span><span class="nx">fathers</span><span class="p">[</span><span class="nx">node</span><span class="p">.</span><span class="nx">Val</span><span class="p">],</span> <span class="nx">node</span><span class="p">,</span> <span class="nx">dis</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nf">getNode</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">res</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>执行用时：0 ms, 在所有 Go 提交中击败了100%的用户</p>
<p>内存消耗：3.2 MB, 在所有 Go 提交中击败了52.08%的用户</p>
<h2 id="2021730-171-excel-sheet-column-number-easy">2021/7.30 171 Excel Sheet Column Number (EASY)</h2>
<p>Given a string columnTitle that represents the column title as appear in an Excel sheet, return its corresponding column number.</p>
<pre><code>A -&gt; 1
B -&gt; 2
...
Z -&gt; 26
AA -&gt; 27
...
</code></pre>
<h4 id="遍历">遍历</h4>
<p>进制转换题，非常简单</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">titleToNumber</span><span class="p">(</span><span class="nx">columnTitle</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">num</span> <span class="kt">int</span> <span class="p">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">mul</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">columnTitle</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">--</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">k</span> <span class="o">:=</span> <span class="nx">columnTitle</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">-</span> <span class="sc">&#39;A&#39;</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="nx">num</span> <span class="o">+=</span> <span class="nb">int</span><span class="p">(</span><span class="nx">k</span><span class="p">)</span> <span class="o">*</span> <span class="nx">mul</span>
</span></span><span class="line"><span class="cl">        <span class="nx">mul</span> <span class="o">*=</span> <span class="mi">26</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">num</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="987-2021731-vertical-order-traversall-of-a-binary-tree">987 2021/7/31 Vertical Order Traversall of a Binary Tree</h2>
<p>Give the root of a binary tree, calculate the vertical order traversal of the binary tree.</p>
<p>For each node at position (row, col), its left and right children will be at positions (row + 1, col - 1) and (row + 1, col + 1) respectively. The rootof the tree is at (0, 0)</p>
<p>The vertical order traversal of a binary tree is a list of top-to-bottom orderings for each column index starting from the leftmost column and ending on the rightmost column. There may be multiple nodes in the same row and same column. In such a case, sort these nodes by their valeus.</p>
<p>Return the vertical order traversal of the binary tree.</p>
<h4 id="dfs暴力sorthash">DFS暴力+Sort+Hash</h4>
<p>Map直接存同col的节点，然后从小到大遍历并排序输出即可</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">verticalTraversal</span><span class="p">(</span><span class="nx">root</span> <span class="o">*</span><span class="nx">TreeNode</span><span class="p">)</span> <span class="p">(</span><span class="nx">res</span> <span class="p">[][]</span><span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 1. hash map, find the same coloumn nodes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">var</span> <span class="nx">hashMap</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">][]</span><span class="kt">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">left</span><span class="p">,</span> <span class="nx">right</span> <span class="p">=</span> <span class="mi">999</span><span class="p">,</span> <span class="o">-</span><span class="mi">999</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">dfs</span> <span class="kd">func</span><span class="p">(</span><span class="nx">root</span> <span class="o">*</span><span class="nx">TreeNode</span><span class="p">,</span> <span class="nx">row</span><span class="p">,</span> <span class="nx">col</span> <span class="kt">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">dfs</span> <span class="p">=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">root</span> <span class="o">*</span><span class="nx">TreeNode</span><span class="p">,</span> <span class="nx">row</span><span class="p">,</span> <span class="nx">col</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">root</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">col</span> <span class="p">&lt;</span> <span class="nx">left</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">left</span> <span class="p">=</span> <span class="nx">col</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">col</span> <span class="p">&gt;</span> <span class="nx">right</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">right</span> <span class="p">=</span> <span class="nx">col</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">hashMap</span><span class="p">[</span><span class="nx">col</span><span class="p">];</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">hashMap</span><span class="p">[</span><span class="nx">col</span><span class="p">]</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">hashMap</span><span class="p">[</span><span class="nx">col</span><span class="p">],</span> <span class="nx">root</span><span class="p">.</span><span class="nx">Val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">hashMap</span><span class="p">[</span><span class="nx">col</span><span class="p">]</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="nx">hashMap</span><span class="p">[</span><span class="nx">col</span><span class="p">]</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">hashMap</span><span class="p">[</span><span class="nx">col</span><span class="p">],</span> <span class="nx">root</span><span class="p">.</span><span class="nx">Val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="nf">dfs</span><span class="p">(</span><span class="nx">root</span><span class="p">.</span><span class="nx">Left</span><span class="p">,</span> <span class="nx">row</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nx">col</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">dfs</span><span class="p">(</span><span class="nx">root</span><span class="p">.</span><span class="nx">Right</span><span class="p">,</span> <span class="nx">row</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nx">col</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nf">dfs</span><span class="p">(</span><span class="nx">root</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="nx">left</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">right</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">arr</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">hashMap</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">sort</span><span class="p">.</span><span class="nf">Ints</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="nx">res</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="nx">arr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Leetcode-cn测试集有问题</p>
<pre><code>Input:
[3, 1, 4, 0, 2, 2]
Output:
[[0], [1], [2, 2, 3], [4]]
Expect:
[[0], [1], [3, 2, 2], [4]] # 题意从小到大，但预期为从大到小
</code></pre>
<h2 id="516-longest-palindromic-subsequence-medium">516 Longest Palindromic Subsequence [Medium]</h2>
<p>Given a string <code>s</code>, find the longest palindromic subsequence&rsquo;s length in s.</p>
<p>A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.</p>
<h4 id="heading"></h4>
]]></content></item><item><title>Windows11是如何运行安卓应用的</title><link>https://blog.thinkmoe.icu/posts/windows11%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8C%E5%AE%89%E5%8D%93%E5%BA%94%E7%94%A8%E7%9A%84/</link><pubDate>Thu, 01 Jul 2021 15:25:32 +0800</pubDate><guid>https://blog.thinkmoe.icu/posts/windows11%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8C%E5%AE%89%E5%8D%93%E5%BA%94%E7%94%A8%E7%9A%84/</guid><description>本文翻译自arstechnica
微软在发布Windows11时公布了一个令人惊喜的东西，Windows11将支持Win应用和安卓应用同时运行。但是，并没有在关键的地方留下太多的信息。这些应用是否是通过模拟器运行的呢？现存与Windows的Linux子系统将会被放弃吗？我们将在这篇文章得到答案，同时感谢以下开发者探讨这些细节。
微软官方将这个功能称之为“为安卓而生的Windows子系统”，这也向你说明了许多关于它如何工作的信息。Windows目前拥有一个Linux子系统（WSL），它使用Windows下的Hyper-V虚拟机的功能让Windows能在一个独立的环境下使用一个真正意义上的Linux系统来运行Linux应用。（Hyper-V让次系统能够访问宿主机的硬件而不是通过在原生资源上套用一个顶层的管理操作系统从而只能使用少数宿主机资源）。一个现实中的安卓手机运行的是Linux内核，而微软正在为Windows的安卓子系统建立一个基于WSL的安卓框架。这看上去非常类似于在Hyper-V虚拟机中运行x86架构的安卓系统。
在Windows下运行安卓应用就如同在原生机器上运行Windwos原生应用一样，顶层有窗口栏，任务图标，并且可以“钉”在开始菜单中。在发布会中，微软说：“在屏幕背后，我们还创建栏一个代理应用用于处理安卓运行和Windows引用之间的交互”。这大概可以推测，系统将会提供类似于启动快捷键、图标和卸载入口，并且其窗口化的模式让应用看起来像原生应用一样。
微软正在尝试通过类似于小型模拟器或不基于模拟器的形式来实现这个功能，而这一切取决于你的电脑和应用兼容性。Windows系统和安卓系统都能在x86架构和arm架构下运行，但安卓更倾向于Arm而Windows倾向于x86.如果你正在使用Arm架构的Windows并想在Windows上运行安卓应用，一切都可能非常顺利。但如果你使用的是x86的Windows，微软在像方法让你能够使用到x86类型的安卓应用。Arm的应用只需要支持一件东西，那就是&amp;quot;Intel Bridge Technology&amp;quot;，该技术的目的就是能让arm架构的代码转化为x86架构能够运行的代码。微软正在寻求在AMD处理器上能够实现相同功能的方法。
微软的方法类似于其他一些操作系统如何启动和运行Android应用程序。ChromeOS的安卓支持可能是最适合的例子了。ChromeOS运行在Linux内核之中，并且它存储了一个容器化的安卓框架来运行应用。如果你有一个x86架构的ChromeBook，ChromeOS会使用安卓的Arm-to-x86编译版本。如果你使用的是Linux桌面系统，有一个名为Anbox的应用将会帮你完成上述一样的事情，在Linux系统之上加载一个安卓框架。你甚至能在WSL中运行Anbox。
许多人上一次体验x86的安卓还是在2012年时，intel推行的Atom-powered的x86架构手机。X86已经走了一段很久的历史了，直到2016年安卓ChromeOS开始，才让其缓了一口气。甚至在2016年启动之前，谷歌还在减少推送x86架构的app支持，并且谷歌开发者工具也将arm和x86分离。回到2016年，谷歌希望25%的商城应用不再需要去支持x86架构而是转向arm应用。现如今，众多的x86用户需要感谢chromeos来让其能够运行安卓应用。
亚马逊，区别于谷歌商店的市场系统 微软并不会在Windows上使用谷歌市场，同时，微软也并不会尝试自己来建立经济市场而是通过合作伙伴亚马逊，用在FireOs设备上的亚马逊市场来进行安卓应用下载。亚马逊已经推出来一个预览版本，但并没有提供一个准确的稳定性版本开放日期。
我们并没有看到一个安卓应用是如何在Windows上启动和关闭的，所以并不清楚它们是如何在Windows上工作地。微软放出了很多截图，展示来微软商店在推送亚马逊App商店的安卓应用。从这些放出的消息来看，亚马逊App已经内置于Windows之中，但并没有看到微软商店能够直接安装安装应用。关键点就是安装按钮，对于Windows应用，安装按钮显示的是&amp;quot;Get&amp;quot;来表明安装一个应用。对于安卓应用来说，则显示的是&amp;quot;从亚马逊商店中获得&amp;quot;，并且使用来一个小盒子和箭头图标来表示，这代表你将会通过另一个额外的应用来获取该安卓应用。
华尔街提供了一个额外的细节来展示其是如何工作的。这听起来就像是亚马逊在给Windows提供了一个亚马逊商城客户端。你只需要登录你的亚马逊帐号，就可以下载应用了。微软上面只提供了搜索的功能。确切来说，这表明你将会在Windows上同时运行两个应用商店，使用两份空间来检查更新。这看上去并不稳定。
微软工程师Miguel de Icaza确认，Windows11将会通过sideloading技术来支持那些我们不需要的亚马逊功能。您应该立即为F-Droid等开源商店提供选项，以及在APKMIRROR应用上加载的能力。 在有人获得整个Google Play商店工作之前，这可能只是时间问题。
由于多年的默认和推动加上额外的架构支持，X86应用程序普遍存在于Google商店中。但是亚马逊App商店X86普遍存在吗？你可以在任何安卓设备上侧载亚马逊应用商店，但专门使用Amazon的Echo File设备的都是ARM。许多应用程序都已经开发完成并在所有架构上运行，所以&amp;hellip;&amp;hellip;也许。
如果微软撤回了Surface Duo并与Google一起使用的Windows 11中的实际Play商店会很好。在Play商店外使用Android的问题是您丢失对Google Play服务API的访问和推送通知。亚马逊一直在为Fire操作系统构建自己的替代API和云服务，如果你不能拥有Google Play，这是下一个最好的事情。
这就是我们现在在Windows 11 Android兼容性上所拥有的一切。但放心，我们会在一些实际代码出来时更深入的探究。</description><content type="html"><![CDATA[<blockquote>
<p>本文翻译自<a href="https://arstechnica.com/gadgets/2021/06/microsofts-windows-subsystem-for-android-sounds-a-lot-like-chrome-os/">arstechnica</a></p>
</blockquote>
<p>微软在发布Windows11时公布了一个令人惊喜的东西，Windows11将支持Win应用和安卓应用同时运行。但是，并没有在关键的地方留下太多的信息。这些应用是否是通过模拟器运行的呢？现存与Windows的Linux子系统将会被放弃吗？我们将在这篇文章得到答案，同时感谢以下<a href="https://www.youtube.com/watch?v=egZ82QGshX8">开发者</a>探讨这些细节。</p>
<p>微软官方将这个功能称之为“为安卓而生的Windows子系统”，这也向你说明了许多关于它如何工作的信息。Windows目前拥有一个Linux子系统（WSL），它使用Windows下的Hyper-V虚拟机的功能让Windows能在一个独立的环境下使用一个真正意义上的Linux系统来运行Linux应用。（Hyper-V让次系统能够访问宿主机的硬件而不是通过在原生资源上套用一个顶层的管理操作系统从而只能使用少数宿主机资源）。一个现实中的安卓手机运行的是Linux内核，而微软正在为Windows的安卓子系统建立一个基于WSL的安卓框架。这看上去非常类似于在Hyper-V虚拟机中运行x86架构的安卓系统。</p>
<p>在Windows下运行安卓应用就如同在原生机器上运行Windwos原生应用一样，顶层有窗口栏，任务图标，并且可以“钉”在开始菜单中。在发布会中，微软说：“在屏幕背后，我们还创建栏一个代理应用用于处理安卓运行和Windows引用之间的交互”。这大概可以推测，系统将会提供类似于启动快捷键、图标和卸载入口，并且其窗口化的模式让应用看起来像原生应用一样。</p>
<p>微软正在尝试通过类似于小型模拟器或不基于模拟器的形式来实现这个功能，而这一切取决于你的电脑和应用兼容性。Windows系统和安卓系统都能在x86架构和arm架构下运行，但安卓更倾向于Arm而Windows倾向于x86.如果你正在使用Arm架构的Windows并想在Windows上运行安卓应用，一切都可能非常顺利。但如果你使用的是x86的Windows，微软在像方法让你能够使用到x86类型的安卓应用。Arm的应用只需要支持一件东西，那就是&quot;Intel Bridge Technology&quot;，该技术的目的就是能让arm架构的代码转化为x86架构能够运行的代码。微软正在寻求在AMD处理器上能够实现相同功能的方法。</p>
<p>微软的方法类似于其他一些操作系统如何启动和运行Android应用程序。ChromeOS的安卓支持可能是最适合的例子了。ChromeOS运行在Linux内核之中，并且它存储了一个容器化的安卓框架来运行应用。如果你有一个x86架构的ChromeBook，ChromeOS会使用安卓的Arm-to-x86编译版本。如果你使用的是Linux桌面系统，有一个名为Anbox的应用将会帮你完成上述一样的事情，在Linux系统之上加载一个安卓框架。你甚至能在WSL中运行Anbox。</p>
<p>许多人上一次体验x86的安卓还是在2012年时，intel推行的Atom-powered的x86架构手机。X86已经走了一段很久的历史了，直到2016年安卓ChromeOS开始，才让其缓了一口气。甚至在2016年启动之前，谷歌还在减少推送x86架构的app支持，并且谷歌开发者工具也将arm和x86分离。回到2016年，谷歌希望25%的商城应用不再需要去支持x86架构而是转向arm应用。现如今，众多的x86用户需要感谢chromeos来让其能够运行安卓应用。</p>
<h3 id="亚马逊区别于谷歌商店的市场系统">亚马逊，区别于谷歌商店的市场系统</h3>
<p>微软并不会在Windows上使用谷歌市场，同时，微软也并不会尝试自己来建立经济市场而是通过合作伙伴亚马逊，用在FireOs设备上的亚马逊市场来进行安卓应用下载。亚马逊已经推出来一个预览版本，但并没有提供一个准确的稳定性版本开放日期。</p>
<p>我们并没有看到一个安卓应用是如何在Windows上启动和关闭的，所以并不清楚它们是如何在Windows上工作地。微软放出了很多截图，展示来微软商店在推送亚马逊App商店的安卓应用。从这些放出的消息来看，亚马逊App已经内置于Windows之中，但并没有看到微软商店能够直接安装安装应用。关键点就是安装按钮，对于Windows应用，安装按钮显示的是&quot;Get&quot;来表明安装一个应用。对于安卓应用来说，则显示的是&quot;从亚马逊商店中获得&quot;，并且使用来一个小盒子和箭头图标来表示，这代表你将会通过另一个额外的应用来获取该安卓应用。</p>
<p>华尔街提供了一个额外的细节来展示其是如何工作的。这听起来就像是亚马逊在给Windows提供了一个亚马逊商城客户端。你只需要登录你的亚马逊帐号，就可以下载应用了。微软上面只提供了搜索的功能。确切来说，这表明你将会在Windows上同时运行两个应用商店，使用两份空间来检查更新。这看上去并不稳定。</p>
<p>微软工程师<a href="https://twitter.com/migueldeicaza/status/1408222245265330178">Miguel de Icaza</a>确认，Windows11将会通过sideloading技术来支持那些我们不需要的亚马逊功能。您应该立即为F-Droid等开源商店提供选项，以及在APKMIRROR应用上加载的能力。 在有人获得整个Google Play商店工作之前，这可能只是时间问题。</p>
<p>由于多年的默认和推动加上额外的架构支持，X86应用程序普遍存在于Google商店中。但是亚马逊App商店X86普遍存在吗？你可以在任何安卓设备上侧载亚马逊应用商店，但专门使用Amazon的Echo File设备的都是ARM。许多应用程序都已经开发完成并在所有架构上运行，所以&hellip;&hellip;也许。</p>
<p>如果微软撤回了Surface Duo并与Google一起使用的Windows 11中的实际Play商店会很好。在Play商店外使用Android的问题是您丢失对Google Play服务API的访问和推送通知。亚马逊一直在为Fire操作系统构建自己的替代API和云服务，如果你不能拥有Google Play，这是下一个最好的事情。</p>
<p>这就是我们现在在Windows 11 Android兼容性上所拥有的一切。但放心，我们会在一些实际代码出来时更深入的探究。</p>
]]></content></item><item><title>React钩子对比Redux，谁能在状态管理更胜一筹?</title><link>https://blog.thinkmoe.icu/posts/react%E9%92%A9%E5%AD%90%E5%AF%B9%E6%AF%94redux%E8%B0%81%E8%83%BD%E5%9C%A8%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E6%9B%B4%E8%83%9C%E4%B8%80%E7%AD%B9/</link><pubDate>Mon, 21 Jun 2021 14:47:25 +0800</pubDate><guid>https://blog.thinkmoe.icu/posts/react%E9%92%A9%E5%AD%90%E5%AF%B9%E6%AF%94redux%E8%B0%81%E8%83%BD%E5%9C%A8%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E6%9B%B4%E8%83%9C%E4%B8%80%E7%AD%B9/</guid><description>本文翻译自Nicola Grujicic
React状态管理：Hook和Redux，两者有何不同？ 世界上很多包括我在内的开发者都有一个疑惑，在听到人们使用Hook代替Redux时，为什么要将一个多级别工作非常完美的组件用一个新的还未完成的东西替代
许多人在疑惑useContext和useReducer是否能代替Redux
今天，我将会尝试去回答这个问题。我将会解释React的钩子(useContext,useReducer)和Redux的不同之处以及使用场景
两者最大的查表在于如何管理应用的全局状态
Redux是当开发者需要创建一个大型的复杂的应用时管理全局状态的最佳实践，它提供了一个相当于存储中心的组件用于保管需要在整个应用中使用的状态信息。并通过一系列规则保证状态只有在指向性的数据流中被更新
Reack钩子则是用另一种全新的方式在组件的生命周期中来管理状态信息并且并不依赖于组件。它在16.8版本中首次提出，旨在通过组件分享逻辑来降低组件之间的复杂性
两者最大的不同就是，Redux创建了一个包裹在整个应用之外的全局状态容器，这个容器被称之为store并且通过useReducer创建一个独立的组件用于和应用组件进行合作
另外一点是，React钩子使用useContext和useReducer联合去和组件状态管理进行合作，这已经是另一个层面的合作关系。它让通过useReducer创建的状态容器和它的dispatch函数能够传递给从最顶端组件以下的任意一个组件之中。你可以在最顶端组件中定义它们使其变为全局状态
如果我们将我们创建的所有state放置在最外层的组件，这体验感觉就和使用Redux没有什么区别
所以是Context(上下文)可能代替Redux(但也不一定)
对于Redux，使用钩子的好处有
并不需要持续关注Redux第三方依赖的更新，避免更新所导致的Bug和问题，可以让你的应用大小变得更小也因此会有更快的速度来处理状态变化。可以让代码更为清晰便于理解，并且通过钩子来创建组件可以用更少的代码获取更快的响应速度
尽管看上去使用useReducer和Redux没什么区别，但它并不是Redux。useReducer函数和其reducer紧密联系在一起，使得能够使用它的dispatch函数。但我们仅仅向reducer传递dispatch的action对象而已
你可以认为Redux是一个全局状态总线，它将承载任意一个事件(action)并且基于action提供的数据和状态进行处理
总结 Redux和其他React状态管理解决方案之所以被提出是因为在React组件中管理一个全局状态是一个非常愚蠢的想法。如果这么做会导致一系列问题，如多源数据和使用虚拟模型代替原始模型展示等等
如果钩子能够让状态管理更清晰，我认为在小型应用中可以尝试不使用Redux。但对于大型的复杂的应用程序，全局状态管理仍然不能被忽略</description><content type="html"><![CDATA[<blockquote>
<p>本文翻译自<a href="https://www.framelessgrid.com/react-hooks-vs-redux-for-state-management-in-2021/">Nicola Grujicic</a></p>
</blockquote>
<h2 id="react状态管理hook和redux两者有何不同">React状态管理：Hook和Redux，两者有何不同？</h2>
<p>世界上很多包括我在内的开发者都有一个疑惑，在听到人们使用Hook代替Redux时，为什么要将一个多级别工作非常完美的组件用一个新的还未完成的东西替代</p>
<blockquote>
<p>许多人在疑惑useContext和useReducer是否能代替Redux</p>
</blockquote>
<p>今天，我将会尝试去回答这个问题。我将会解释React的钩子(useContext,useReducer)和Redux的不同之处以及使用场景</p>
<blockquote>
<p>两者最大的查表在于如何管理应用的全局状态</p>
</blockquote>
<p>Redux是当开发者需要创建一个大型的复杂的应用时管理全局状态的最佳实践，它提供了一个相当于存储中心的组件用于保管需要在整个应用中使用的状态信息。并通过一系列规则保证状态只有在指向性的数据流中被更新</p>
<p><img src="https://images.ctfassets.net/yytn7c23rcp1/5IgvC7d2l2CXbkxHm2Syol/b1494f62db8cdc974f85086a8c12a9a1/redux_diagram.png" alt="Redux"></p>
<p>Reack钩子则是用另一种全新的方式在组件的生命周期中来管理状态信息并且并不依赖于组件。它在16.8版本中首次提出，旨在通过组件分享逻辑来降低组件之间的复杂性</p>
<p>两者最大的不同就是，Redux创建了一个包裹在整个应用之外的全局状态容器，这个容器被称之为<code>store</code>并且通过<code>useReducer</code>创建一个独立的组件用于和应用组件进行合作</p>
<p>另外一点是，React钩子使用useContext和useReducer联合去和组件状态管理进行合作，这已经是另一个层面的合作关系。它让通过useReducer创建的状态容器和它的<code>dispatch</code>函数能够传递给从最顶端组件以下的任意一个组件之中。你可以在最顶端组件中定义它们使其变为全局状态</p>
<p>如果我们将我们创建的所有state放置在最外层的组件，这体验感觉就和使用Redux没有什么区别</p>
<blockquote>
<p>所以是Context(上下文)可能代替Redux(但也不一定)</p>
</blockquote>
<p>对于Redux，使用钩子的好处有</p>
<p>并不需要持续关注Redux第三方依赖的更新，避免更新所导致的Bug和问题，可以让你的应用大小变得更小也因此会有更快的速度来处理状态变化。可以让代码更为清晰便于理解，并且通过钩子来创建组件可以用更少的代码获取更快的响应速度</p>
<p>尽管看上去使用useReducer和Redux没什么区别，但它并不是Redux。useReducer函数和其reducer紧密联系在一起，使得能够使用它的dispatch函数。但我们仅仅向reducer传递dispatch的action对象而已</p>
<p><strong>你可以认为Redux是一个全局状态总线，它将承载任意一个事件(action)并且基于action提供的数据和状态进行处理</strong></p>
<h2 id="总结">总结</h2>
<p>Redux和其他React状态管理解决方案之所以被提出是因为在React组件中管理一个全局状态是一个非常愚蠢的想法。如果这么做会导致一系列问题，如多源数据和使用虚拟模型代替原始模型展示等等</p>
<p>如果钩子能够让状态管理更清晰，我认为在小型应用中可以尝试不使用Redux。但对于大型的复杂的应用程序，全局状态管理仍然不能被忽略</p>
]]></content></item><item><title>利用fusuma为Linux添加触控板手势</title><link>https://blog.thinkmoe.icu/posts/%E5%88%A9%E7%94%A8fusuma%E4%B8%BAlinux%E6%B7%BB%E5%8A%A0%E8%A7%A6%E6%8E%A7%E6%9D%BF%E6%89%8B%E5%8A%BF/</link><pubDate>Sat, 19 Jun 2021 21:07:52 +0800</pubDate><guid>https://blog.thinkmoe.icu/posts/%E5%88%A9%E7%94%A8fusuma%E4%B8%BAlinux%E6%B7%BB%E5%8A%A0%E8%A7%A6%E6%8E%A7%E6%9D%BF%E6%89%8B%E5%8A%BF/</guid><description>之前一直在新笔记本上用虚拟机开Linux编写毕设，现在毕业答辩已经完成，所以就直接将Win10更换到Linux系统。但是众所周知，Linux并没有自带触控板手势驱动，但我早已习惯于win上的一些手势，所以我开始寻找一个合适的触控板手势驱动。
在最初，我发现了一个名为libinput-gesture的库，其Github上有3k赞，于是我立马就尝试了这个库。安装过程一切畅通，但最后运行的阶段却出了问题。在启动该库时提示我启动失败，但并没有给其他错误信息。我检查了xinput和libinput对触控板的驱动，并没有任何问题。谷歌了一下发现这玩意对arch用户非常良好，但对我这使用的ubuntu来说会出现这种情况。于是我把目光转向另一个库，fusuma。
fusuma这个包非常完美的解决了Ubuntu触控板手势的问题，并且安装过程极其简单，配置也十分简洁明了。
安装 配置用户权限 首先需要配置一下用户状态组，将用户添加到input组中
sudo gpasswd -a $USER input newgrp input // 立刻刷新 对于Debian系用户(Ubuntu,Debian,Mint,Pop!OS) 安装libinput sudo apt install libinput-tools 安装Ruby 由于fusuma需要在ruby上运行，因此需要安装ruby。
sudo apt install ruby 安装Fusuma sudo gem install fusuma 安装xdotool(可选，但是对后续非常有用建议安装) sudo apt install xdotool 对于Arch用户 sudo pacman -S libinput ruby xdotool sudo gem install fusuma 启动 fusuma 配置 Fusuma的配置非常简单，首先需要在用户目录下创建配置文件~/.config/fusuma/config.yml
mkdir -p $HOME/.config/fusuma touch $HOME/.config/fusuma/config.yml 这里简单贴出我使用的配置，可以在配置中发现，其实手势是通过xdotool工具间接调用系统的快捷键来实现手势控制的
swipe: 3: left: command: &amp;#34;xdotool key alt+Right&amp;#34; # History forward right: command: &amp;#34;xdotool key alt+Left&amp;#34; # History back #up: #command: &amp;#34;xdotool key super&amp;#34; # Activity #down: #command: &amp;#34;xdotool key super&amp;#34; # Activity 4: left: command: &amp;#34;xdotool key alt+u&amp;#34; # Switch to next workspace right: command: &amp;#34;xdotool key alt+d&amp;#34; # Switch to previous workspace up: command: &amp;#34;xdotool key alt+u&amp;#34; # Switch to next workspace down: command: &amp;#34;xdotool key alt+d&amp;#34; # Switch to previous workspace pinch: in: command: &amp;#34;xdotool keydown ctrl click 4 keyup ctrl&amp;#34; # Zoom in out: command: &amp;#34;xdotool keydown ctrl click 5 keyup ctrl&amp;#34; # Zoom out 在添加完配置文件后，重新启动fusuma即可使用手势动作了</description><content type="html"><![CDATA[<p>之前一直在新笔记本上用虚拟机开Linux编写毕设，现在毕业答辩已经完成，所以就直接将Win10更换到Linux系统。但是众所周知，Linux并没有自带触控板手势驱动，但我早已习惯于win上的一些手势，所以我开始寻找一个合适的触控板手势驱动。</p>
<p>在最初，我发现了一个名为<code>libinput-gesture</code>的库，其Github上有3k赞，于是我立马就尝试了这个库。安装过程一切畅通，但最后运行的阶段却出了问题。在启动该库时提示我启动失败，但并没有给其他错误信息。我检查了<code>xinput</code>和<code>libinput</code>对触控板的驱动，并没有任何问题。谷歌了一下发现这玩意对arch用户非常良好，但对我这使用的ubuntu来说会出现这种情况。于是我把目光转向另一个库，<code>fusuma</code>。</p>
<p><code>fusuma</code>这个包非常完美的解决了Ubuntu触控板手势的问题，并且安装过程极其简单，配置也十分简洁明了。</p>
<h2 id="安装">安装</h2>
<h4 id="配置用户权限">配置用户权限</h4>
<p>首先需要配置一下用户状态组，将用户添加到<code>input</code>组中</p>
<pre><code>sudo gpasswd -a $USER input
newgrp input // 立刻刷新
</code></pre>
<h4 id="对于debian系用户ubuntudebianmintpopos">对于Debian系用户(Ubuntu,Debian,Mint,Pop!OS)</h4>
<ol>
<li>安装libinput</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">sudo apt install libinput-tools
</span></span></code></pre></div><ol start="2">
<li>安装Ruby</li>
</ol>
<p>由于fusuma需要在ruby上运行，因此需要安装ruby。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">sudo apt install ruby
</span></span></code></pre></div><ol start="3">
<li>安装Fusuma</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">sudo gem install fusuma
</span></span></code></pre></div><ol start="4">
<li>安装xdotool(可选，但是对后续非常有用建议安装)</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">sudo apt install xdotool
</span></span></code></pre></div><h4 id="对于arch用户">对于Arch用户</h4>
<pre><code>sudo pacman -S libinput ruby xdotool
sudo gem install fusuma
</code></pre>
<h4 id="启动">启动</h4>
<pre><code>fusuma
</code></pre>
<h2 id="配置">配置</h2>
<p>Fusuma的配置非常简单，首先需要在用户目录下创建配置文件<code>~/.config/fusuma/config.yml</code></p>
<pre><code>mkdir -p $HOME/.config/fusuma
touch $HOME/.config/fusuma/config.yml
</code></pre>
<p>这里简单贴出我使用的配置，可以在配置中发现，其实手势是通过<code>xdotool</code>工具间接调用系统的快捷键来实现手势控制的</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">swipe</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">3</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">left</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;xdotool key alt+Right&#34;</span><span class="w"> </span><span class="c"># History forward</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">right</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;xdotool key alt+Left&#34;</span><span class="w"> </span><span class="c"># History back</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c">#up:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c">#command: &#34;xdotool key super&#34; # Activity</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c">#down:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c">#command: &#34;xdotool key super&#34; # Activity</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">4</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">left</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;xdotool key alt+u&#34;</span><span class="w"> </span><span class="c"># Switch to next workspace</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">right</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;xdotool key alt+d&#34;</span><span class="w"> </span><span class="c"># Switch to previous workspace</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">up</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;xdotool key alt+u&#34;</span><span class="w"> </span><span class="c"># Switch to next workspace</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">down</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;xdotool key alt+d&#34;</span><span class="w"> </span><span class="c"># Switch to previous workspace</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">pinch</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">in</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;xdotool keydown ctrl click 4 keyup ctrl&#34;</span><span class="w"> </span><span class="c"># Zoom in</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">out</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;xdotool keydown ctrl click 5 keyup ctrl&#34;</span><span class="w"> </span><span class="c"># Zoom out</span><span class="w">
</span></span></span></code></pre></div><p>在添加完配置文件后，重新启动fusuma即可使用手势动作了</p>
<blockquote>
<p>配置文件中的alt+u和alt+d为本人自定义快捷键，请更换为自己系统快捷键</p>
</blockquote>
<h2 id="开机自启动">开机自启动</h2>
<p>Fusuma的开机自启动也比较简单，有两种方式</p>
<h4 id="通过桌面管理器自启">通过桌面管理器自启</h4>
<p>大部分用户使用的桌面都带有Autostart的功能，如官方提供的教程所说(Gnome用户)：</p>
<ol>
<li>使用<code>which fusuma</code>查看fusuma位置</li>
<li>打开<code>gnome-session-properties</code></li>
<li>添加Fusuma相关信息</li>
<li>在命令末尾添加<code>-d</code>选项</li>
</ol>
<h4 id="通过systemd开机启动">通过systemd开机启动</h4>
<p>这种方式适用于所有用户，但需要注意的是，由于触控板驱动是用户层使用的，在service文件中如果采取系统级别的启动需要额外添加环境配置信息，如果是以用户服务启动则无需添加</p>
<ol>
<li>系统服务</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># /etc/systemd/system/fusuma.service</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>Unit<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">Description</span><span class="o">=</span>Fusuma touchpad gestures
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>Service<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">EnvironmentFile</span><span class="o">=</span><span class="s2">&#34;DISPLAY=:0&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">ExecStart</span><span class="o">=</span>/usr/local/bin/fusuma
</span></span><span class="line"><span class="cl"><span class="nv">ExecReload</span><span class="o">=</span>/bin/kill -HUP <span class="nv">$MAINPID</span>
</span></span><span class="line"><span class="cl"><span class="nv">KillMode</span><span class="o">=</span>process
</span></span><span class="line"><span class="cl"><span class="nv">Restart</span><span class="o">=</span>on-failure
</span></span><span class="line"><span class="cl"><span class="nv">RestartSec</span><span class="o">=</span>42s
</span></span><span class="line"><span class="cl"><span class="nv">User</span><span class="o">=</span>youruser
</span></span><span class="line"><span class="cl"><span class="nv">Group</span><span class="o">=</span>yourusergroup
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>Install<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">WantedBy</span><span class="o">=</span>multi-user.target
</span></span></code></pre></div><blockquote>
<p>参考<a href="https://github.com/iberianpig/fusuma/issues/52">Github Fusuma Issue</a></p>
</blockquote>
<p>然后启动服务，并设置自启</p>
<pre><code>sudo systemctl enable fusuma
sudo systemctl start fusuma
# 查看启动状态
sudo systemctl status fusuma
</code></pre>
<ol start="2">
<li>用户服务</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># $HOME/.config/systemd/user/fusuma.service</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>Unit<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">Description</span><span class="o">=</span>Fusuma touchpad gestures
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>Service<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">ExecStart</span><span class="o">=</span>/usr/local/bin/fusuma -d
</span></span><span class="line"><span class="cl"><span class="nv">ExecReload</span><span class="o">=</span>/bin/kill -HUP <span class="nv">$MAINPID</span>
</span></span><span class="line"><span class="cl"><span class="nv">KillMode</span><span class="o">=</span>process
</span></span><span class="line"><span class="cl"><span class="nv">Restart</span><span class="o">=</span>on-failure
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>Install<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">WantedBy</span><span class="o">=</span>multi-user.target
</span></span></code></pre></div><p>然后启动服务，并设置自启</p>
<pre><code>systemctl --user enable fusuma
systemctl --user start fusuma
# 查看启动状态
systemctl --user status fusuma
</code></pre>
<p>最后就可以通过手势来操控桌面了~</p>
]]></content></item><item><title>Innodb事物隔离级别及其锁 美团技术学习</title><link>https://blog.thinkmoe.icu/posts/innodb%E4%BA%8B%E7%89%A9%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E5%8F%8A%E5%85%B6%E9%94%81-%E7%BE%8E%E5%9B%A2%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/</link><pubDate>Sun, 13 Jun 2021 12:40:53 +0800</pubDate><guid>https://blog.thinkmoe.icu/posts/innodb%E4%BA%8B%E7%89%A9%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E5%8F%8A%E5%85%B6%E9%94%81-%E7%BE%8E%E5%9B%A2%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/</guid><description>&lt;blockquote>
&lt;p>本文是阅读&lt;a href="https://tech.meituan.com/2014/08/20/innodb-lock.html">美团技术团队&lt;/a>的记录形文章，更详细内容请访问美团技术团队官方网站&lt;/p>
&lt;/blockquote></description><content type="html"><![CDATA[<blockquote>
<p>本文是阅读<a href="https://tech.meituan.com/2014/08/20/innodb-lock.html">美团技术团队</a>的记录形文章，更详细内容请访问美团技术团队官方网站</p>
</blockquote>
<h1 id="两段锁">两段锁</h1>
<p>数据库遵循的是两段锁协议，将事务分成两个阶段：加锁和解锁</p>
<ul>
<li>加锁阶段：在该阶段对任何数据进行读操作之前都要申请并获得S锁，在进行写操作之前要获取X锁</li>
<li>解锁阶段：当事务释放一个封锁后，进入解锁阶段，在该阶段只能进行解锁操作不能进行加锁阶段</li>
</ul>
<p>两段锁可以保证事务的并发调度是串行化的</p>
<h1 id="四种隔离级别">四种隔离级别</h1>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody>
<tr>
<td>未提交读(RU)</td>
<td>可能</td>
<td>可能</td>
<td>可能</td>
</tr>
<tr>
<td>已提交读(RC)</td>
<td>不可能</td>
<td>可能</td>
<td>可能</td>
</tr>
<tr>
<td>可重复读(RR)</td>
<td>不可能</td>
<td>不可能</td>
<td>可能</td>
</tr>
<tr>
<td>可串行化(SE)</td>
<td>不可能</td>
<td>不可能</td>
<td>不可能</td>
</tr>
</tbody>
</table>
<ul>
<li>RU：允许脏读，可能读取到其他会话中未提交事务修改的数据</li>
<li>RC：只能读取到已提交的数据，Oracle默认级别</li>
<li>RR：在同一个事务内的查询都是事务开始时刻一致性的，InnoDB默认级别，真正消除了不可重复读，但存在幻读</li>
<li>SE：完全串行执行，读写相互阻塞</li>
</ul>
<h1 id="mysql锁的种类">MySQL锁的种类</h1>
<p>MySQL中有很多种锁，行锁、表锁等等。表锁是对一整张表加锁，但是会锁住整张表导致并发能力下降，一般在DDL时使用</p>
<p>行锁则锁住数据行，只锁住有限的数据，并发能力强</p>
<h1 id="已提交读rc">已提交读(RC)</h1>
<p>在RC中，数据的读取是不加锁的，但是写入、修改和删除是需要加锁的</p>
<table>
<thead>
<tr>
<th>事务A</th>
<th>事务B</th>
</tr>
</thead>
<tbody>
<tr>
<td>begin;</td>
<td>begin;</td>
</tr>
<tr>
<td>update class_teacher set class_name=&lsquo;Class1&rsquo; where teacher_id=1;</td>
<td>update class_teacher set class_name=‘初三三班’ where teacher_id=1;</td>
</tr>
<tr>
<td>commit;</td>
<td></td>
</tr>
</tbody>
</table>
<p>为了防止并发过程中修改冲突，事务A中会给teacher_id=1的数据行加锁，并一直不commit，这样事务B就一直拿不到该行锁，wait直到超时</p>
<p>需要注意的是，teacher_id是有索引的，如果查询的是没有索引的字段呢，那么MySQL会给整张表的所有数据行加行锁(表锁?)。这是因为在SQL运行过程中，MySQL并不知道哪些数据行是需要查询的，如果一个条件无法通过索引快速过滤，就会将所有记录加锁后返回，再由MySQL Server层进行过滤</p>
<p>但MySQL在这种情况做了一些改进，在Server过滤时会将不满足条件的数据调用unlock_row的方法释放该记录的锁，这就保证了只有持有满足条件的行会上锁</p>
<p>这种情况同样适用于RR级别，因此在对一个数据量很大的表做批量修改时，如果无法使用索引，MySQL的过滤速度将会特别慢</p>
<h1 id="可重复读rr">可重复读(RR)</h1>
<p>RR是InnoDB的默认隔离级别</p>
<h1 id="读read">读(Read)</h1>
<p>可重读是指在一个事务的多个实例并发读取数据时保持一致性</p>
<p>例如在RC隔离级别下，如果事务A对数据表的某一行进行读取后，事务B也对该行做了修改并提交该事务。此时事务A又对该行进行了读取，最终返回的结果和第一次读取是不一致的，这就是不可重复读RC</p>
<p>但在RR级别下，即使别的事务对数据进行了修改，后面读取的数据和前面是保持一致的，这就是RR，而如何实现的呢，那就是MVCC了</p>
<h2 id="不可重复读和幻读的区别">不可重复读和幻读的区别</h2>
<p>不可重复读重点在于update和delete，而幻读重点在于insert</p>
<p>如果使用锁来实现的话，在可重复读中sql第一次读取数据后就对数据加锁，其他事务无法修改就可实现可重复读但是无法锁住insert的数据，因此事务A如果先读取数据或修改数据，事务B还是可以insert提交数据，这时A中就会发现凭空多出了一条数据，这就是幻读，简单的行锁是不能避免幻读的需要更高级的串行隔离级别，读写用各自的锁并互斥，这样就能有效避免幻读、不可重复读、脏读等问题但会影响数据库的并发性能</p>
<h2 id="悲观锁和乐观锁">悲观锁和乐观锁</h2>
<ul>
<li>悲观锁<br>
指数据对修改持保持态度，在整个数据处理过程中都把数据锁住其他事务不能干扰只能等待。悲观锁往往凭靠数据库提供的锁来实现，在悲观锁的情况下，为了保证事务的隔离性就需要一致性锁定读。读取时也需要加锁，保证其他事务不能修改该数据；修改时也要加锁，保证其他事务在修改时不能读取数据</li>
<li>乐观锁<br>
乐观锁采用更为宽松的情况下，大部分基于数据版本记录来实现。版本记录就是在数据添加一个版本字段，通常为<code>version</code>。在读取数据时，同时将版本号一并读出，在更新该数据时对其版本号加1。此提交的数据版本会和数据表对应记录的当前版本信息对比，如果提交数据版本号大于数据库表当前版本号，则予以更新，否则认为是过期数据</li>
</ul>
<h2 id="innodb中的mvvc">InnoDB中的MVVC</h2>
<p>在InnoDB中，每行数据都会新增两个隐藏字段用于记录何时创建和过期(删除)</p>
<p>在实际中，存储的并不是时间，而是事务的版本号，每开启一个事务，版本号就会递增，在RR级别下</p>
<ul>
<li>SELECT时，读取创建版本号&lt;=当前事务版本号，删除版本号为空或&gt;当前事务版本号</li>
<li>INSERT时，保存当前事务版本号为行的创建版本号</li>
<li>DELETE时，保存当前事务版本号为行的删除版本号</li>
<li>UPDATE时，插入一条新纪录，保存当前事务版本号为行创建版本号，同时保存当前事务版本号到原来删除的行</li>
</ul>
<p>MVVC会占用额外的控件，进行更多的行检查和维护工作，但能减少行的使用，大多数读操作都不用加锁</p>
<p>从理论上说RR也不能解决幻读问题，只有串行化能够解决幻读。但在MySQL中，RR级别下不存在幻读情况</p>
<h1 id="写当前读">写(当前读)</h1>
<p>在MySQL中，事务采用了Next-Key锁来解决幻读问题</p>
<h2 id="next-key">Next-Key</h2>
<p>Next-Key锁是行锁和GAP的合并</p>
<h1 id="串行化">串行化</h1>
<p>在串行化读写互斥并一并加锁，并使用悲观锁作为机制因此实现简单且更为安全，但是严重影响并发性能造成严重的性能问题</p>
<p>如果业务并发特别少且要求数据可靠，可以考虑该隔离级别</p>]]></content></item><item><title>用官方的方式安装Archlinux</title><link>https://blog.thinkmoe.icu/posts/%E7%94%A8%E5%AE%98%E6%96%B9%E7%9A%84%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85archlinux/</link><pubDate>Sun, 23 May 2021 22:47:09 +0800</pubDate><guid>https://blog.thinkmoe.icu/posts/%E7%94%A8%E5%AE%98%E6%96%B9%E7%9A%84%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85archlinux/</guid><description>Archlinux是一个非常干净的Linux发行版，干净到以致于图形化界面都没有，本文将按照官方wiki，逐步安装Archlinux
由于国内网络问题，可以到一些镜像网站中来下载iso镜像，这里选择清华镜像，下载最新的5.15版本
关于启动盘，可以使用USBWriter或者Rufus来制作，这里就不多加赘述
准备过程 检查引导模式 要安装Arch，首先要确认自己电脑的引导模式，可以通过以下指令来检查
ls /sys/firmware/efi/efivars 如果该指令没有出错并列出了文件列表，则你的电脑是使用UEFI模式引导的。如果文件不存在，则系统将会使用BIOS(或CSM)模式来引导启动。如果电脑并不是以你想要的方式启动，则需要到主板BIOS中手动设置引导模式
连接网络 Arch的安装一定需要联网，因此在确认引导模式之后，必须要检查网络连接状态。你可以通过以下步骤来检查自己的网络状态:
确保网卡正确插入，例如通过ip link来检查 对于无线用户，确保无线网卡工作正常，可以通过rfkill list来检查 连接到互联网 有线用户：插入网线 无线用户：通过iwctl接入WIFI 移动热点：通过mmcli连接热点 配置网络连接 DHCP：动态IP、DNS服务，适用于有线网络、无线网络…… 静态IP地址 确认网络连接ping www.baidu.com 更改时间配置 首先通过date -R来检查时间是否正确，如果不正确则可以通过timedatectl来更改时区
首先通过timedatectl list-timezones来获取时区列表 选择自己所在时区，以国内为例，通过timedatectl set-timezone Asia/Shanghai来更改时区 同步时区timedatectl set-ntp true 分区 电脑中的硬盘将会以设备块的形式出现在系统之中，例如/dev/sda,/dev/nvmeOn1，可以通过fdisk来查看
fdisk -l 以下列表的分区是必要的
用于存放根目录的/分区 对UEFI模式的用户来说还需要一个EFI system partition 对于BIOS用户，需要将root分区挂载到/mnt中，而UEFI还需要将EFI system partition挂载到/mnt/boot或/mnt/efi分区之中
假设当前为BIOS模式，且硬盘为/dev/sda大小为15G，我们可以用fdisk来对硬盘进行分区
fdisk /dev/sda # 进入分区模式 g # 创建分区表 n # 创建swap分区 # 选择任意一个编号（通常默认） # 选择起始区域（通常默认） +2G # n # 创建根目录分区 # 选择任意一个编号（通常默认） # 选择起始区域（通常默认） +13G t # 更改分区类型 1 # 选择swap分区 L # 查看所有类型 19 # 选择Linux swap # 如果是efi用户，还需要更改efi分区类型 格式化 分区完后，需要将所有分区进行格式化。通常来说，分区时efi分区为第一个区，其次是swap区然后是根目录区，按照这个顺序以此格式化。在这里，只有两个分区分别为</description><content type="html"><![CDATA[<p>Archlinux是一个非常干净的Linux发行版，干净到以致于图形化界面都没有，本文将按照<a href="https://wiki.archlinux.org/title/Installation_guide">官方wiki</a>，逐步安装Archlinux</p>
<p>由于国内网络问题，可以到一些镜像网站中来下载iso镜像，这里选择<a href="https://mirrors.tuna.tsinghua.edu.cn/archlinux/iso/2021.04.01/">清华镜像</a>，下载最新的5.15版本</p>
<blockquote>
<p>关于启动盘，可以使用<a href="https://sourceforge.net/projects/usbwriter/">USBWriter</a>或者<a href="https://rufus.ie">Rufus</a>来制作，这里就不多加赘述</p>
</blockquote>
<h2 id="准备过程">准备过程</h2>
<h3 id="检查引导模式">检查引导模式</h3>
<p>要安装Arch，首先要确认自己电脑的引导模式，可以通过以下指令来检查</p>
<pre><code>ls /sys/firmware/efi/efivars
</code></pre>
<p>如果该指令没有出错并列出了文件列表，则你的电脑是使用UEFI模式引导的。如果文件不存在，则系统将会使用BIOS(或CSM)模式来引导启动。如果电脑并不是以你想要的方式启动，则需要到主板BIOS中手动设置引导模式</p>
<h3 id="连接网络">连接网络</h3>
<p>Arch的安装一定需要联网，因此在确认引导模式之后，必须要检查网络连接状态。你可以通过以下步骤来检查自己的网络状态:</p>
<ul>
<li>确保网卡正确插入，例如通过<code>ip link</code>来检查</li>
<li>对于无线用户，确保无线网卡工作正常，可以通过<code>rfkill list</code>来检查</li>
<li>连接到互联网
<ul>
<li>有线用户：插入网线</li>
<li>无线用户：通过<code>iwctl</code>接入WIFI</li>
<li>移动热点：通过<code>mmcli</code>连接热点</li>
</ul>
</li>
<li>配置网络连接
<ul>
<li>DHCP：动态IP、DNS服务，适用于有线网络、无线网络……</li>
<li>静态IP地址</li>
</ul>
</li>
<li>确认网络连接<code>ping www.baidu.com</code></li>
</ul>
<h3 id="更改时间配置">更改时间配置</h3>
<p>首先通过<code>date -R</code>来检查时间是否正确，如果不正确则可以通过<code>timedatectl</code>来更改时区</p>
<ul>
<li>首先通过<code>timedatectl list-timezones</code>来获取时区列表</li>
<li>选择自己所在时区，以国内为例，通过<code>timedatectl set-timezone Asia/Shanghai</code>来更改时区</li>
<li>同步时区<code>timedatectl set-ntp true</code></li>
</ul>
<h3 id="分区">分区</h3>
<p>电脑中的硬盘将会以设备块的形式出现在系统之中，例如<code>/dev/sda</code>,<code>/dev/nvmeOn1</code>，可以通过<code>fdisk</code>来查看</p>
<pre><code>fdisk -l
</code></pre>
<p>以下列表的分区是必要的</p>
<ul>
<li>用于存放根目录的<code>/</code>分区</li>
<li>对<code>UEFI</code>模式的用户来说还需要一个<code>EFI system partition</code></li>
</ul>
<p>对于<code>BIOS</code>用户，需要将<code>root</code>分区挂载到<code>/mnt</code>中，而<code>UEFI</code>还需要将<code>EFI system partition</code>挂载到<code>/mnt/boot</code>或<code>/mnt/efi</code>分区之中</p>
<p>假设当前为<code>BIOS</code>模式，且硬盘为<code>/dev/sda</code>大小为15G，我们可以用<code>fdisk</code>来对硬盘进行分区</p>
<pre><code>fdisk /dev/sda # 进入分区模式
g # 创建分区表
n # 创建swap分区
# 选择任意一个编号（通常默认）
# 选择起始区域（通常默认）
+2G # 
n # 创建根目录分区
# 选择任意一个编号（通常默认）
# 选择起始区域（通常默认）
+13G
t # 更改分区类型
1 # 选择swap分区
L # 查看所有类型
19 # 选择Linux swap

# 如果是efi用户，还需要更改efi分区类型
</code></pre>
<h3 id="格式化">格式化</h3>
<p>分区完后，需要将所有分区进行格式化。通常来说，分区时efi分区为第一个区，其次是swap区然后是根目录区，按照这个顺序以此格式化。在这里，只有两个分区分别为</p>
<ul>
<li>/dev/sda1: swap</li>
<li>/dev/sda2: 根目录</li>
</ul>
<p>因此格式化操作如下</p>
<pre><code>mkswap /dev/sda1 
swapon /dev/sda1
mkfs.ext4 /dev/sda2
</code></pre>
<h3 id="挂载">挂载</h3>
<p>分区完之后，将硬盘挂载到<code>/mnt</code>目录中，efi用户还需要将引导分区挂载到<code>/mnt/boot</code>中</p>
<pre><code>mount /dev/sda2 /mnt
</code></pre>
<h2 id="正式安装">正式安装</h2>
<h3 id="更换镜像源">更换镜像源</h3>
<p>在挂载完文件系统后，就是Archlinux的正式安装了。不过由于网络问题，国内推荐更换镜像源来加快安装速度</p>
<p>使用<code>vim</code>或<code>nano</code>打开<code>/etc/pacman.d/mirrorlist</code>，将国内镜像地址填写在文件的最开头处，以清华镜像为例</p>
<pre><code>Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch
</code></pre>
<h3 id="基本安装">基本安装</h3>
<p>使用<code>pacstrap</code>将基础包安装进文件系统之中，官方要求安装以下三个</p>
<pre><code>pacstrap /mnt base linux linux-firmware
</code></pre>
<p>但是，为了后续系统顺利使用，还需要安装文本处理工具和网络连接工具和dhcpcd，如果需要编译还可以安装base-devel，这些都可以按需进行安装</p>
<pre><code>pacstrap /mnt vim dhcpcd base-devel sudo
</code></pre>
<h2 id="配置系统">配置系统</h2>
<h3 id="fstab">Fstab</h3>
<p>生成自动挂载分区文件，可以使用<code>fstab</code>进行</p>
<pre><code>genfstab -U /mnt &gt;&gt; /mnt/etc/fstab
</code></pre>
<p>接下来就需要在新系统内部进行操作了</p>
<pre><code>arch-chroot /mnt
</code></pre>
<h3 id="配置时间">配置时间</h3>
<p>新系统需要定义好时间信息，在这选择<code>Asia/Shanghai</code></p>
<pre><code>ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
hwclock --systohc # 生成/etc/adjtime
</code></pre>
<h3 id="位置信息">位置信息</h3>
<p>我们需要对Arch系统的地理位置信息进行更改，通常使用<code>en_US.UTF-8</code>。修改<code>/etc/locale.gen</code>将含有<code>zh_CN.UTF-8 UTF-8</code>、<code>zh_HK.UTF-8 UTF-8</code>、<code>zh_TW.UTF-8 UTF-8</code>、<code>en_US.UTF-8 UTF-8</code>的字段去除注释后保存</p>
<p>运行下面的指令配置地理位置文件</p>
<pre><code>locale-gen
</code></pre>
<p>随后创建<code>locale.conf</code>文件，并配置<code>LANG</code>变量</p>
<pre><code># /etc/locale.conf
LANG=en_US.UTF-8
</code></pre>
<h3 id="网络配置">网络配置</h3>
<p>创建<code>hostname</code>文件，填入你想要的主机名称</p>
<pre><code># /etc/hostname
archlinux
</code></pre>
<p>然后打开<code>hosts</code>文件，填入以下信息</p>
<pre><code># /etc/hosts
127.0.0.1   localhost
::1         localhost
127.0.1.1   archlinux.localdomain archlinux
</code></pre>
<p>如果主机拥有永久性IP地址，可以替换<code>127.0.1.1</code></p>
<h3 id="配置root密码">配置Root密码</h3>
<pre><code>passwd
</code></pre>
<h3 id="添加用户">添加用户</h3>
<p>一般来说不会使用Root用户来运行系统，因为权限太高了，因此需要创建一个普通用户来使用Archlinux</p>
<p>可以通过<code>useradd</code>来创建一个用户，并通过<code>passwd</code>来更改密码</p>
<pre><code>useradd -m coder
passwd coder
</code></pre>
<p>在创建完用户之后，还需要将用户添加到<code>wheel</code>用户组中，这样后续就能够使用<code>sudo</code>来运行较高权限的指令了</p>
<pre><code>usermod -aG wheel,audio,video,optical,storage coder
</code></pre>
<p>随后，通过<code>visudo</code>修改文件中的用户组部分，找到<code>wheel</code>那一行并删除注释，保存退出</p>
<pre><code>%wheel ALL=(ALL) ALL
</code></pre>
<h3 id="安装intel-ucode非intel-cpu跳过">安装Intel-ucode(非Intel CPU跳过)</h3>
<p>这个包是用来优化intel的，其他cpu可以查看wiki</p>
<pre><code>pacman -S intel-ucode
</code></pre>
<h3 id="安装bootloader">安装Bootloader</h3>
<p>这里选择安装目前最为流行的<code>grub2</code>，在安装之前可以安装另外两个包来自动设置启动选项</p>
<pre><code>pacman -S os-prober ntfs-3g
</code></pre>
<p>如果你使用的是BIOS引导</p>
<ul>
<li>
<p>安装grub</p>
<pre><code>  pacman -S grub
</code></pre>
</li>
<li>
<p>部署grub</p>
<pre><code>  grub-install --target=i386-pc /dev/sda
</code></pre>
</li>
<li>
<p>生成配置文件</p>
<pre><code>  grub-mkconfig -o /boot/grub/grub.cfg
</code></pre>
</li>
</ul>
<p>如果你使用UEFI引导</p>
<ul>
<li>
<p>安装grub和efibootmgr等</p>
<pre><code>  pacman -S grub efibootmgr dosfstools mtools
</code></pre>
</li>
<li>
<p>挂载efi分区</p>
<pre><code>  mkdir /boot/efi
  mount /dev/sda1(你的efi分区) /boot/efi
</code></pre>
</li>
<li>
<p>部署grub</p>
<pre><code>  grub-install --target=x86_64-efi --bootloader-id=grub_uefi --recheck
</code></pre>
</li>
<li>
<p>生成配置文件</p>
<pre><code>  grub-mkconfg -o /boot/grub/grub.cfg
</code></pre>
</li>
</ul>
<p>到此为止，Arch的安装基本完成，<code>exit</code>退出后，关机，拔出引导U盘后重启即可进入系统</p>
<h3 id="aur">AUR</h3>
<p>除了pacman之外，还有第三方软件包<code>aur</code>可以供arch用户使用，这里使用<a href="https://github.com/Jguer/yay">yay</a>工具来使用<code>aur</code></p>
<p>首先下载<code>yay</code>的<code>PKGBUILD</code>文件</p>
<pre><code>sudo pacman -S git
git clone https://aur.archlinux.org/yay.git
cd yay
</code></pre>
<p>由于网络问题，在<code>clone</code>和编译安装<code>yay</code>时会非常缓慢，这里可以修改<code>PKGBUILD</code>文件和设置环境变量来解决</p>
<p>修改<code>PKGBUILD</code>文件，将其中的<code>https://github.com/Jguer/yay</code>地址替换为<code>https://hub.fastgit.org/Jguer/yay</code></p>
<p>然后执行安装指令</p>
<pre><code>GO111MODULE=on GOPROXY=https://goproxy.cn makepkg -si
# 如果不想保留golang则
# GO111MODULE=on GOPROXY=https://goproxy.cn makepkg -sir
</code></pre>
<p>安装完<code>yay</code>后，添加国内aur<code>archlinuxcn</code>。修改<code>/etc/pacman.conf</code>文件，在最后添加</p>
<pre><code># /etc/pacman.conf
[archlinuxcn]
Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch
</code></pre>
<p>然后更新软件源并安装GPG key</p>
<pre><code>sudo pacman -Syy &amp;&amp; sudo pacman -S archlinuxcn-keyring
</code></pre>
<p>如果遇到下述错误</p>
<pre><code>ERROR: 5984EA8F3C could not be locally signed
</code></pre>
<p>可以通过清除缓存来解决</p>
<pre><code>sudo rm -rf /etc/pacman.d/gnupg
sudo pacman-key --init
sudo pacman-key --populate archlinux
</code></pre>
<h2 id="桌面环境">桌面环境</h2>
<h3 id="图形驱动">图形驱动</h3>
<p>按照<a href="https://wiki.archlinux.org/index.php/Xorg#Driver_installation">官方Wiki</a>的表格自行选择驱动安装，例如本人是Intel集显，则执行</p>
<pre><code>sudo pacman -S xf86-xvideo-intel
</code></pre>
<p>对于Nividia独显驱动，由于某原因并不推荐安装，如果要安装则在上述链接中自行查询</p>
<h3 id="x11">X11</h3>
<p>安装完图形驱动后，就可以正式安装桌面环境了，这里选择<code>X11</code>，直接在终端执行</p>
<pre><code>sudo pacman -S xorg xorg-init
</code></pre>
<p>安装完之后，选择一个你喜欢的桌面例如<code>Xfce</code>、<code>KDE</code>、<code>Gnome</code>等等，这里我选择的是桌面管理器<code>sway</code></p>
<pre><code>sudo pacman -S sway alacritty adobe-source-code-pro-fonts dmenu
</code></pre>
<p>安装完之后，需要配置一下<code>X11</code>的启动项，将初始配置文件复制到用户目录中，然后在文件末尾添加<code>exec sway</code>的选项</p>
<pre><code>cp /etc/X11/xinit/xinitrc $HOME/.xinitrc
</code></pre>
<p>最后在终端中输入<code>startx</code>即可进入<code>sway</code>桌面了，输入<code>win+shift+enter</code>即可打开终端</p>
<p>具体<code>sway</code>的配置，可以从<code>etc/sway/config</code>中查看，将该文件复制到<code>$HOME/.config/sway/config</code>就可以自行修改配置<code>sway</code>了，例如添加</p>
<pre><code>font pongo:SourceCodePro Medium 12
</code></pre>
<p>即可修改<code>sway</code>桌面的字体和大小了</p>
<p>如果想在登录后自动启动桌面，则可以在终端配置文件中如bash终端的<code>.bash_profile</code>或zsh的<code>.zshrc</code>中，添加下述内容即可</p>
<pre><code>[[ $(fgconsole 2&gt;/dev/null)==1 ]] &amp;&amp; exec startx --vt1</code></pre>
]]></content></item><item><title>Hugo+Github Action自动部署静态页面</title><link>https://blog.thinkmoe.icu/posts/hugo+github-action%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/</link><pubDate>Sat, 22 May 2021 17:37:27 +0800</pubDate><guid>https://blog.thinkmoe.icu/posts/hugo+github-action%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/</guid><description>Hugo Hugo is one of the most popular open-source static site generators. With its amazing speed and flexibility, Hugo makes building websites fun again.
安装 如果你是Windows用户，可以直接从Github Release页面下载对应的版本即可
如果你是Linux用户则有三种方式来安装Hugo
从Github Release下载 从包管理器下载 自行编译 在这介绍下自行编译，最新的Hugo使用到了go1.16的io/fs包，因此如果想自行编译最新版本的Hugo则要安装或更新系统go版本至1.16+。安装完语言编译环境后按以下步骤进行
mkdir $HOME/src cd $HOME/src git clone https://github.com/gohugoio/hugo.git cd hugo go install 如果你想让Hugo支持sass的话则需要编译另一个版本
CGO_ENABLED=1 go install --tags extended 在终端中输入hugo version来检查是否编译成功
创建站点 安装完Hugo后就可以来创建一个网站站点，假设名称为demo
hugo new site demo cd demo git init 在初始化站点后，需要为站点选择一个主题，这里选择我使用的Hermit
git submodule add https://github.com/Track3/hermit.git themes/hermit cp themes/hermit/exampleSite/config.toml .</description><content type="html"><![CDATA[<h2 id="hugohttpsgohugoio"><a href="https://gohugo.io/">Hugo</a></h2>
<blockquote>
<p>Hugo is one of the most popular open-source static site generators. With its amazing speed and flexibility, Hugo makes building websites fun again.</p>
</blockquote>
<h3 id="安装">安装</h3>
<p>如果你是Windows用户，可以直接从<a href="https://github.com/gohugoio/hugo/releases">Github Release</a>页面下载对应的版本即可</p>
<p>如果你是Linux用户则有三种方式来安装Hugo</p>
<ul>
<li>从<a href="https://github.com/gohugoio/hugo/releases">Github Release</a>下载</li>
<li>从包管理器下载</li>
<li>自行编译</li>
</ul>
<p>在这介绍下自行编译，最新的Hugo使用到了<code>go1.16</code>的<code>io/fs</code>包，因此如果想自行编译最新版本的Hugo则要安装或更新系统<code>go</code>版本至<code>1.16+</code>。安装完语言编译环境后按以下步骤进行</p>
<pre><code>mkdir $HOME/src
cd $HOME/src
git clone https://github.com/gohugoio/hugo.git
cd hugo
go install
</code></pre>
<p>如果你想让Hugo支持<code>sass</code>的话则需要编译另一个版本</p>
<pre><code>CGO_ENABLED=1 go install --tags extended
</code></pre>
<p>在终端中输入<code>hugo version</code>来检查是否编译成功</p>
<h3 id="创建站点">创建站点</h3>
<p>安装完Hugo后就可以来创建一个网站站点，假设名称为<code>demo</code></p>
<pre><code>hugo new site demo
cd demo
git init
</code></pre>
<p>在初始化站点后，需要为站点选择一个主题，这里选择我使用的<a href="https://github.com/Track3/hermit">Hermit</a></p>
<pre><code>git submodule add https://github.com/Track3/hermit.git themes/hermit
cp themes/hermit/exampleSite/config.toml .
</code></pre>
<p>随后创建一篇新文章</p>
<pre><code>hugo new posts/Hello-hugo.md
</code></pre>
<p>添加完文章后输入以下指令进行预览</p>
<pre><code>hugo server -D
</code></pre>
<p><img src="https://i.loli.net/2021/05/22/ULygZGTj8bPilw6.png" alt="预览图"></p>
<h2 id="github-action自动化发布">Github Action自动化发布</h2>
<p>当完成一个站点之后，可以发布到github page中，在这介绍如何使用Github Action来自动化部署站点到github page中</p>
<p>Github Page分为用户Page和项目Page，用户Page通常为<code>username.github.io</code>而项目Page通常为<code>username.github.io/project</code>，但也可以通过添加<code>CNAME</code>文件来自定义域名，在这展示项目Page</p>
<p>首先创建一个项目(<code>Repository</code>)，假设为<code>demo</code>记住要设置为公开，然后在你的站点的根目录创建以下文件并写入</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="c"># .github/workflows/gh-pages.yml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">github pages</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">master </span><span class="w"> </span><span class="c"># 要编译的文件分支</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pull_request</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">deploy</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-20.04</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">submodules</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">  </span><span class="c"># Fetch Hugo themes (true OR recursive)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">fetch-depth</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">    </span><span class="c"># Fetch all history for .GitInfo and .Lastmod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Setup Hugo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-hugo@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">hugo-version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;latest&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">extended</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">hugo --minify</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Deploy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-gh-pages@v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">github_token</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.GITHUB_TOKEN }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">publish_dir</span><span class="p">:</span><span class="w"> </span><span class="l">./public</span><span class="w">
</span></span></span></code></pre></div><p>在部署到Github之前，还需要更改Hugo的根配置，将<code>config.toml</code>中的<code>baseURL</code>更改为<code>https://{username}.github.io/demo</code>，如果配置了域名则为<code>https://{CUSTOM_DOMAIN}/demo</code></p>
<p>随后，将你的站点所有文件push到Github中</p>
<pre><code>git remote add origin https://github.com/{your_user_name}/{your_project}.git
git add .
git commit -m &quot;Upload&quot;
git push -u origin master
</code></pre>
<p>这时，前往你的项目页面查看<code>Actions</code>标签查看编译结果，如果成功则如下所示</p>
<p><img src="https://i.loli.net/2021/05/22/bwJztQ7qr9k2PnM.png" alt="Action"></p>
<p>完成编译之后，还不能立刻通过网址来访问，需要在项目的<code>Settings\Pages</code>中，选择Github Page的来源，在这选择<code>gh-pages</code></p>
<p>设置成功后访问<code>https://{username}.github.com/{project_name}</code>即可，如果配置了<code>CNAME</code>则通过<code>https://{CUSTOM_DOMAIN}/{project_name}</code>即可</p>
<p><img src="https://i.loli.net/2021/05/22/Z6gRYaLcfUbpByx.png" alt="结果"></p>
]]></content></item><item><title>TCP和HTTP和HTTPS</title><link>https://blog.thinkmoe.icu/posts/tcp%E5%92%8Chttp%E5%92%8Chttps/</link><pubDate>Wed, 24 Feb 2021 21:49:01 +0800</pubDate><guid>https://blog.thinkmoe.icu/posts/tcp%E5%92%8Chttp%E5%92%8Chttps/</guid><description>本文主要介绍一下TCP和HTTP&amp;amp;HTTPS之间的关系
TCP TCP是传输层上的面向连接的可靠传输协议
三次握手 TCP的连接通过三次握手来完成，第一次握手由客户端发起，客户端设置数据包中SYN字段为1，ACK字段为1并随机选取一个值x作为该数据包的seq发送给服务器并调整当前状态为SYN_SEND 服务器在接受到来自客户端的SYN=1的数据包后知道要开始建立连接，于是服务器设置SYN字段为1，ACK为1，随机选取一个值y作为该包的seq并设置下一个希望得到的数据包序列号为x+1最后发送给客户端并调整当前转台为SYN_RECIVE 客户端在收到第二个握手包后可以确定服务端与自己的连接是互通的，于是设置数据包的ACK字段为1，seq为x+1并设置希望下一个来自服务端的数据包的序列号为y+1发送给服务端服务端在接受到第三个握手包后可以确定客户端与自己的连接是互通的，由此可以确保数据的传输 四次挥手 TCP的断开连接可以由客户端或服务端发起，设发起的一方为客户端
客户端设置数据包的FIN字段为1，假设当前seq为u发送该包之后客户端调整状态为FIN_WAIT1 服务端在收到FIN的数据包后调整状态为CLOSE_WAIT并设置数据包的ACK为1，ack为u+1,seq为w 客户端在收到服务端的ACK包后进入FIN_WAIT2状态，持续等待；服务端在发送完ACK包后不会立刻断开连接，而是会等待服务端所有数据全部传输完成之后在向客户端发起第三次挥手，其FIN为1，ACK为1，seq为v，ack为u+1 客户端在收到该FIN后进入TIME_WAIT状态并向服务端发送ACK=1，seq为u+1，ack=v+1的数据包通知服务端关闭连接，服务端在收到后会立刻关闭连接而客户端则会等待2 如果客户端出现故障会如何 服务端会在与客户端连接之后设置一个计时器，当客户端出现故障，服务端不可能一直等待下去，计时器会在建立时开始及时，通常为2个消失，每一次收到客户端连接之后都会重置计时器。当计时器结束之后服务端可以认为客户端出现故障或不再需要数据，此时就关闭连接
HTTP HTTP是一种明文传输的超文本传输协议
由于其是明文的因此非常的不安全，由此诞生了HTTPS
HTTPS HTTPS是建立在HTTP之上的，其在传输过程中加上了一层SSL/TLS用于给文本加密
HTTPS的加密解密同时使用了对称加密和非对称加密，由于非对称加密的性能要比对称加密低，因此HTTPS会在交换对称加密密钥时进行非对称加密传输，防止被中间人猜出。然后再根据得到的密钥文件对要传输的内容进行对称加密
认证问题 在HTTPS中，每一个连接都会在其头部添加数字签名，生成数字签名的密钥由CA发放
服务端报文经过HASH处理后生成摘要信息，摘要信息使用私钥加密生成签名，随同报文一起发送给客户端
客户端接受后将签名提取出来并用公钥进行解密，如果能正确解密则说明该报文是来自服务端的
数据完整性 在解决认证问题后就要解决数据完整性的问题，而这个问题就会使用上述的摘要信息进行完成
客户端在对摘要进行解密后会得到该报文的Hash摘要，客户端只需要通过把报文中的数据提取出来进行相同的Hash操作得到另一份摘要后与前一份进行对比就能判断传输的数据是否完整了
而Hash算法等相关信息都会在证书交换中进行传送
工作流程 Client Hello
客户端向服务端发送Client Hello消息，该消息包含客户端生成的随机数Random1、客户端支持的加密套件和SSL版本信息等 Server Hello
服务端向客户端发送Server Hello消息，该消息会从Client Hello中确定一份加密套件，该套件决定了后续加密和生成摘要所需使用的集体算法，除此之外还会生成一个随机数Random2 Certificate
服务端下发证书给客户端，让客户端验证自己的身份，客户端验证通过后取出公钥 Certificate Verify 客户端收到服务端的证书后先从CA验证证书合法性，提取证书中的公钥并生成随机数Random3，再用刚刚提取的公钥对随机数加密生成PreMasterKey发送给服务端 Client Key Exchange 服务端通过私钥解密得到Random3，此时客户端服务端均包含三个随机数，双方根据之前协定的算法生成一份密钥，在握手结束后的数据传输均使用该密钥进行对称加密 EncryptedHandshakeMessage 客户端将前面的握手消息生成摘要再用协商好的密钥加密发送给服务端，服务端用密钥解密如果能够解出则说明密钥一致 Change Cipher Spec 服务端通知客户端后续消息均使用加密 Encrypted Handshake Message 服务端将握手消息生成摘要加密发送给客户端，客户端接受后解密，成功则说明一致 Application data 此时双方已安全协商密钥，至此后续所有应用层数据都将使用该密钥进行加密后通过TCP进行传输 TLS版本区别 在1.0和1.1计算Finish报文时，进行的是md5+sha1组合运行而1.2下变成了单次sha1 在证书校验中，1.0和1.1会对握手信息使用md5+sha1进行摘要运算(对于ECC证书只做SHA1计算)，在1.2下验证报文多出两个字节hash_alg和sign_alg，假如加密套件存在SHA384则使用SHA384进行加密 RTT问题 由于HTTPS是建立在HTTP之上的，而HTTP是通过TCP实现的，因此HTTPS的建立也需要经历TCP的3次握手但远远不够
这是因为HTTPS除了需要交换连接信息还需要交换证书文件，保证数据完整性等等内容，这会需要增加连接的数量
实际上HTTPS会比HTTP多7个RTT，首先3个握手RTT，然后跳转HTTPS1个RTT，再TCP连接443端口3个RTT，然后开始完成加密套件的协商和证书身份确认。在浏览器获取到证书后也会验证证书的有效性并获取CA域名，解析CA成功后与CA握手并进行OCSP请求确认证书状态
握手优化 由于HTTPS会比HTTP多很多RTT，因此假如在同一时刻大量请求会导致服务端承受不住因此需要对握手进行优化</description><content type="html"><![CDATA[<blockquote>
<p>本文主要介绍一下TCP和HTTP&amp;HTTPS之间的关系</p>
</blockquote>
<h1 id="tcp">TCP</h1>
<p>TCP是传输层上的面向连接的可靠传输协议</p>
<h2 id="三次握手">三次握手</h2>
<ol>
<li>TCP的连接通过三次握手来完成，第一次握手由客户端发起，客户端设置数据包中SYN字段为1，ACK字段为1并随机选取一个值x作为该数据包的seq发送给服务器并调整当前状态为SYN_SEND</li>
<li>服务器在接受到来自客户端的SYN=1的数据包后知道要开始建立连接，于是服务器设置SYN字段为1，ACK为1，随机选取一个值y作为该包的seq并设置下一个希望得到的数据包序列号为x+1最后发送给客户端并调整当前转台为SYN_RECIVE</li>
<li>客户端在收到第二个握手包后可以确定服务端与自己的连接是互通的，于是设置数据包的ACK字段为1，seq为x+1并设置希望下一个来自服务端的数据包的序列号为y+1发送给服务端服务端在接受到第三个握手包后可以确定客户端与自己的连接是互通的，由此可以确保数据的传输</li>
</ol>
<h2 id="四次挥手">四次挥手</h2>
<p>TCP的断开连接可以由客户端或服务端发起，设发起的一方为客户端</p>
<ol>
<li>客户端设置数据包的FIN字段为1，假设当前seq为u发送该包之后客户端调整状态为FIN_WAIT1</li>
<li>服务端在收到FIN的数据包后调整状态为CLOSE_WAIT并设置数据包的ACK为1，ack为u+1,seq为w</li>
<li>客户端在收到服务端的ACK包后进入FIN_WAIT2状态，持续等待；服务端在发送完ACK包后不会立刻断开连接，而是会等待服务端所有数据全部传输完成之后在向客户端发起第三次挥手，其FIN为1，ACK为1，seq为v，ack为u+1</li>
<li>客户端在收到该FIN后进入TIME_WAIT状态并向服务端发送ACK=1，seq为u+1，ack=v+1的数据包通知服务端关闭连接，服务端在收到后会立刻关闭连接而客户端则会等待2</li>
</ol>
<h2 id="如果客户端出现故障会如何">如果客户端出现故障会如何</h2>
<p>服务端会在与客户端连接之后设置一个计时器，当客户端出现故障，服务端不可能一直等待下去，计时器会在建立时开始及时，通常为2个消失，每一次收到客户端连接之后都会重置计时器。当计时器结束之后服务端可以认为客户端出现故障或不再需要数据，此时就关闭连接</p>
<h1 id="http">HTTP</h1>
<p>HTTP是一种明文传输的超文本传输协议</p>
<p>由于其是明文的因此非常的不安全，由此诞生了HTTPS</p>
<h1 id="https">HTTPS</h1>
<p>HTTPS是建立在HTTP之上的，其在传输过程中加上了一层SSL/TLS用于给文本加密</p>
<p>HTTPS的加密解密同时使用了对称加密和非对称加密，由于非对称加密的性能要比对称加密低，因此HTTPS会在交换对称加密密钥时进行非对称加密传输，防止被中间人猜出。然后再根据得到的密钥文件对要传输的内容进行对称加密</p>
<h2 id="认证问题">认证问题</h2>
<p>在HTTPS中，每一个连接都会在其头部添加数字签名，生成数字签名的密钥由CA发放</p>
<p>服务端报文经过HASH处理后生成摘要信息，摘要信息使用私钥加密生成签名，随同报文一起发送给客户端</p>
<p>客户端接受后将签名提取出来并用公钥进行解密，如果能正确解密则说明该报文是来自服务端的</p>
<h2 id="数据完整性">数据完整性</h2>
<p>在解决认证问题后就要解决数据完整性的问题，而这个问题就会使用上述的摘要信息进行完成</p>
<p>客户端在对摘要进行解密后会得到该报文的Hash摘要，客户端只需要通过把报文中的数据提取出来进行相同的Hash操作得到另一份摘要后与前一份进行对比就能判断传输的数据是否完整了</p>
<p>而Hash算法等相关信息都会在证书交换中进行传送</p>
<h2 id="工作流程">工作流程</h2>
<ol>
<li>Client Hello<br>
客户端向服务端发送Client Hello消息，该消息包含客户端生成的随机数Random1、客户端支持的加密套件和SSL版本信息等</li>
<li>Server Hello<br>
服务端向客户端发送Server Hello消息，该消息会从Client Hello中确定一份加密套件，该套件决定了后续加密和生成摘要所需使用的集体算法，除此之外还会生成一个随机数Random2</li>
<li>Certificate<br>
服务端下发证书给客户端，让客户端验证自己的身份，客户端验证通过后取出公钥</li>
<li>Certificate Verify
客户端收到服务端的证书后先从CA验证证书合法性，提取证书中的公钥并生成随机数Random3，再用刚刚提取的公钥对随机数加密生成PreMasterKey发送给服务端</li>
<li>Client Key Exchange
服务端通过私钥解密得到Random3，此时客户端服务端均包含三个随机数，双方根据之前协定的算法生成一份密钥，在握手结束后的数据传输均使用该密钥进行对称加密</li>
<li>EncryptedHandshakeMessage
客户端将前面的握手消息生成摘要再用协商好的密钥加密发送给服务端，服务端用密钥解密如果能够解出则说明密钥一致</li>
<li>Change Cipher Spec
服务端通知客户端后续消息均使用加密</li>
<li>Encrypted Handshake Message
服务端将握手消息生成摘要加密发送给客户端，客户端接受后解密，成功则说明一致</li>
<li>Application data
此时双方已安全协商密钥，至此后续所有应用层数据都将使用该密钥进行加密后通过TCP进行传输</li>
</ol>
<h2 id="tls版本区别">TLS版本区别</h2>
<ol>
<li>在1.0和1.1计算Finish报文时，进行的是md5+sha1组合运行而1.2下变成了单次sha1</li>
<li>在证书校验中，1.0和1.1会对握手信息使用md5+sha1进行摘要运算(对于ECC证书只做SHA1计算)，在1.2下验证报文多出两个字节hash_alg和sign_alg，假如加密套件存在SHA384则使用SHA384进行加密</li>
</ol>
<h2 id="rtt问题">RTT问题</h2>
<p>由于HTTPS是建立在HTTP之上的，而HTTP是通过TCP实现的，因此HTTPS的建立也需要经历TCP的3次握手但远远不够</p>
<p>这是因为HTTPS除了需要交换连接信息还需要交换证书文件，保证数据完整性等等内容，这会需要增加连接的数量</p>
<p>实际上HTTPS会比HTTP多7个RTT，首先3个握手RTT，然后跳转HTTPS1个RTT，再TCP连接443端口3个RTT，然后开始完成加密套件的协商和证书身份确认。在浏览器获取到证书后也会验证证书的有效性并获取CA域名，解析CA成功后与CA握手并进行OCSP请求确认证书状态</p>
<h2 id="握手优化">握手优化</h2>
<p>由于HTTPS会比HTTP多很多RTT，因此假如在同一时刻大量请求会导致服务端承受不住因此需要对握手进行优化</p>
<ol>
<li>Session id<br>
这个方法的实现放在服务端，在客户端请求服务端后会对客户端生成一个session id，保存与该客户端的协商信息，在后续再收到该客户端连接时可以直接通过session id来获取协商信息直接开始数据传输</li>
<li>Session Ticket<br>
Session id在负载均衡会出现问题，而Ticket的方法则不会因为他主要是现在客户端需要浏览器支持，ticket是只有服务端知道的安全密钥加密过的会话信息，浏览器在Hello时带上ticket服务端就能成功解密进行快速握手</li>
</ol>
<h2 id="certificate-chain">Certificate Chain</h2>
<p>TLS的身份认证是通过证书信任链完成的，浏览器从站点证书开始递归校验父证书，直至出现根证书</p>
]]></content></item><item><title>Web用户认证方法对比</title><link>https://blog.thinkmoe.icu/posts/web%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81%E6%96%B9%E6%B3%95%E5%AF%B9%E6%AF%94/</link><pubDate>Fri, 08 Jan 2021 21:33:13 +0000</pubDate><guid>https://blog.thinkmoe.icu/posts/web%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81%E6%96%B9%E6%B3%95%E5%AF%B9%E6%AF%94/</guid><description>&lt;blockquote>
&lt;p>本文翻译自&lt;a href="https://testdriven.io/blog/web-authentication-methods/#authentication-vs-authorization">testdriven.io&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>在这篇文章，我们将从一名Python开发者的视角来观察目前最常见的几种处理Web认证的方式&lt;/p>
&lt;blockquote>
&lt;p>尽管本片文章所有的代码是面向Python开发者的，但是实际上对所有的Web开发者，每种认证方法实际上都是差不多的&lt;/p>
&lt;/blockquote>
&lt;h1 id="认证vs授权authentication-vs-authorization">认证vs授权(Authentication vs Authorization)&lt;/h1>
&lt;p>认证是一种处理用户或设备尝试通过凭证来访问受限系统的过程。而授权则是验证用户或设备是否有权限来访问系统提供的确切服务&lt;/p>
&lt;p>简单来讲就是&lt;/p>
&lt;ul>
&lt;li>认证：你是谁？&lt;/li>
&lt;li>授权：你可以做什么？&lt;/li>
&lt;/ul>
&lt;p>认证比授权出现的更早，用户必须在获得访问资源权限之前经过合法验证。最常见的用户认证方法就是&lt;code>username&lt;/code>和&lt;code>password&lt;/code>。一旦认证完成，不同身份例如&lt;code>admin&lt;/code>、&lt;code>moderator&lt;/code>等等，都将被附加在用户身上用于提供访问系统的身份信息。&lt;/p>
&lt;p>有了上述的解释，让我们来看一看验证用户的不同方法吧&lt;/p></description><content type="html"><![CDATA[<blockquote>
<p>本文翻译自<a href="https://testdriven.io/blog/web-authentication-methods/#authentication-vs-authorization">testdriven.io</a></p>
</blockquote>
<p>在这篇文章，我们将从一名Python开发者的视角来观察目前最常见的几种处理Web认证的方式</p>
<blockquote>
<p>尽管本片文章所有的代码是面向Python开发者的，但是实际上对所有的Web开发者，每种认证方法实际上都是差不多的</p>
</blockquote>
<h1 id="认证vs授权authentication-vs-authorization">认证vs授权(Authentication vs Authorization)</h1>
<p>认证是一种处理用户或设备尝试通过凭证来访问受限系统的过程。而授权则是验证用户或设备是否有权限来访问系统提供的确切服务</p>
<p>简单来讲就是</p>
<ul>
<li>认证：你是谁？</li>
<li>授权：你可以做什么？</li>
</ul>
<p>认证比授权出现的更早，用户必须在获得访问资源权限之前经过合法验证。最常见的用户认证方法就是<code>username</code>和<code>password</code>。一旦认证完成，不同身份例如<code>admin</code>、<code>moderator</code>等等，都将被附加在用户身上用于提供访问系统的身份信息。</p>
<p>有了上述的解释，让我们来看一看验证用户的不同方法吧</p>
<h1 id="http基本认证http-basic-authentication">HTTP基本认证(HTTP Basic Authentication)</h1>
<p>基本认证是一种建立在HTTP协议上的最基础的验证方式。在基本认证中，每一个请求<code>Header</code>都要携带登录凭证信息</p>
<pre tabindex="0"><code>&#34;Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=&#34; your-website.com
</code></pre><p>用户名和密码都没有被加密，并且用户名和密码通过<code>:</code>组合在一起<code>username:password</code>。这个字符串通常需要通过<code>Base64</code>编码生成</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">base64</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">auth</span> <span class="o">=</span> <span class="s2">&#34;username:password&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">auth_bytes</span> <span class="o">=</span> <span class="n">auth</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s1">&#39;ascii&#39;</span><span class="p">)</span> <span class="c1"># convert to bytes</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">auth_bytes</span>
</span></span><span class="line"><span class="cl"><span class="sa">b</span><span class="s1">&#39;username:password&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">encoded</span> <span class="o">=</span> <span class="n">base64</span><span class="o">.</span><span class="n">b64encode</span><span class="p">(</span><span class="n">auth_bytes</span><span class="p">)</span> <span class="c1"># base64 encode</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">encoded</span>
</span></span><span class="line"><span class="cl"><span class="sa">b</span><span class="s1">&#39;dXNlcm5hbWU6cGFzc3dvcmQ=&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">base64</span><span class="o">.</span><span class="n">b64decode</span><span class="p">(</span><span class="n">encoded</span><span class="p">)</span> <span class="c1"># base64 decode</span>
</span></span><span class="line"><span class="cl"><span class="sa">b</span><span class="s1">&#39;username:password&#39;</span><span class="o">.</span>
</span></span></code></pre></div><p>这种方法是无状态的因此客户端必须在每个请求中携带次凭证，这种方法非常适合单一的简单的不需要持久<code>sessions</code>的API的调用</p>
<h2 id="流程">流程</h2>
<ol>
<li>未认证的客户端请求一个受限的资源</li>
<li>HTTP返回401状态码并携带<code>Basic</code>值的名为<code>WWW-Authenticate</code>的header</li>
<li><code>WWW-Authenticate: Basic</code>让浏览器提示用户密码输入</li>
<li>在输入凭证之后，在每一个请求的Header中都将携带该凭证<code>Authorization: Basic dcdvcmQ=</code>
<img src="https://testdriven.io/static/images/blog/web-authentication-methods/basic_auth.png" alt="基本认证"></li>
</ol>
<h2 id="优点">优点</h2>
<ol>
<li>步骤少，认证过程快</li>
<li>实现简单</li>
<li>主流浏览器都支持</li>
</ol>
<h2 id="缺点">缺点</h2>
<ol>
<li>Base64并不是真正意义上的加密算法，只是另一种呈现数据的方式。Base64字符串很容易在发送文本的时候被解码。弱安全性会遭来各种各样的攻击，因此<code>HTTPS/SSL</code>非常有必要</li>
<li>在每个请求都必须携带凭证</li>
<li>用户只能通过写入一个错误的凭证用于登出</li>
</ol>
<h2 id="第三方依赖python下同">第三方依赖(Python下同)</h2>
<ul>
<li><a href="https://flask-httpauth.readthedocs.io/">Flask-HTTPAuth</a></li>
<li><a href="https://github.com/hirokiky/django-basicauth/">django-basicauth</a></li>
<li><a href="https://fastapi.tiangolo.com/advanced/security/http-basic-auth/">FastAPI:HTTP Basic Auth</a></li>
</ul>
<h2 id="代码">代码</h2>
<p>用<code>Flask-HTTP</code>可以使用Flask非常轻松的实现基本认证</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">flask_httpauth</span> <span class="kn">import</span> <span class="n">HTTPBasicAuth</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">werkzeug.security</span> <span class="kn">import</span> <span class="n">generate_password_hash</span><span class="p">,</span> <span class="n">check_password_hash</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">auth</span> <span class="o">=</span> <span class="n">HTTPBasicAuth</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">users</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;username&#34;</span><span class="p">:</span> <span class="n">generate_password_hash</span><span class="p">(</span><span class="s2">&#34;password&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@auth.verify_password</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">verify_password</span><span class="p">(</span><span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">username</span> <span class="ow">in</span> <span class="n">users</span> <span class="ow">and</span> <span class="n">check_password_hash</span><span class="p">(</span><span class="n">users</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;username&#34;</span><span class="p">),</span> <span class="n">password</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">username</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@app.route</span><span class="p">(</span><span class="s2">&#34;/&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@auth.login_required</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="sa">f</span><span class="s2">&#34;You have successfully logged in, </span><span class="si">{</span><span class="n">auth</span><span class="o">.</span><span class="n">current_user</span><span class="p">()</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span></span></code></pre></div><h2 id="资料">资料</h2>
<ul>
<li><a href="https://tools.ietf.org/html/rfc7617">IETF: The &lsquo;Basic&rsquo; HTTP Authentication Scheme</a></li>
<li><a href="https://blog.miguelgrinberg.com/post/restful-authentication-with-flask">RESTful Authentication with Flask</a></li>
<li><a href="https://www.django-rest-framework.org/api-guide/authentication/#basicauthentication">DRF Basic Authentication Guide</a></li>
<li><a href="https://gist.github.com/nilsdebruin/8b36cd98c9949a1a87e3a582f70146f1">FastAPI Basic Authentication Example</a></li>
</ul>
<h1 id="http摘要验证http-digest-authentication">HTTP摘要验证(HTTP Digest Authentication)</h1>
<p>HTTP摘要验证(或称HTTP摘要权限验证)是一种比HTTP基本认证更安全的方式。这两种方法的最大的区别就是传输的密码是用md5算法的Hash字符串</p>
<h2 id="流程-1">流程</h2>
<ol>
<li>未验证的客户端请求一个受限资源</li>
<li>服务端生成一个随机的值用于提示并通过返回一个值为<code>Digest</code>的<code>WWW-Authenticate</code>Header并返回401未验证状态码，整个Header为<code>WWW-Authenticate: Digest nonce=&quot;44f0437004157342f50f935906ad46fc&quot;</code></li>
<li><code>WWW-Authenticate</code>会让浏览器提示输入帐号密码</li>
<li>在输入凭证之后，密码会进行Hash处理并在每一个请求的Header中添加一条声明信息<code>Authorization: Digest username=&quot;username&quot;,nonce=&quot;16e30069e45a7f47b4e2606aeeb7ab62&quot;, response=&quot;89549b93e13d438cd0946c6d93321c52&quot;</code></li>
<li>通过账户名，服务端获取对应的密码进行Hash处理并对声明中的信息进行比较是否相同
![HTTP Digest Authentication]https://testdriven.io/static/images/blog/web-authentication-methods/digest_auth.png)</li>
</ol>
<h2 id="优点-1">优点</h2>
<ol>
<li>比基本验证拥有更强的安全性</li>
<li>实现简单</li>
<li>主流浏览器基本都支持</li>
</ol>
<h2 id="缺点-1">缺点</h2>
<ol>
<li>必须在每个请求都携带凭证</li>
<li>用户只能重新提交个不正确的凭证来登出</li>
<li>与基本验证相比，由于密码不能加密保存因此在服务端安全性较差</li>
<li>很容易收到中间人袭击</li>
</ol>
<h2 id="第三方依赖">第三方依赖</h2>
<ul>
<li><a href="https://flask-httpauth.readthedocs.io/">Flask-HTTPAuth</a></li>
</ul>
<h2 id="代码-1">代码</h2>
<p>用<code>Flask-HTTP</code>可以使用Flask非常轻松的实现</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">flask_httpauth</span> <span class="kn">import</span> <span class="n">HTTPDigestAuth</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s2">&#34;SECRET_KEY&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;change me&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">auth</span> <span class="o">=</span> <span class="n">HTTPDigestAuth</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">users</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;username&#34;</span><span class="p">:</span> <span class="s2">&#34;password&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@auth.get_password</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_user</span><span class="p">(</span><span class="n">username</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">username</span> <span class="ow">in</span> <span class="n">users</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">users</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">username</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@app.route</span><span class="p">(</span><span class="s2">&#34;/&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@auth.login_required</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="sa">f</span><span class="s2">&#34;You have successfully logged in, </span><span class="si">{</span><span class="n">auth</span><span class="o">.</span><span class="n">current_user</span><span class="p">()</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span></span></code></pre></div><h2 id="资料-1">资料</h2>
<ul>
<li><a href="https://tools.ietf.org/html/rfc7616">IETF: HTTP Digest Access Authentication</a></li>
<li><a href="https://2.python-requests.org/en/latest/user/authentication/#digest-authentication">Digest Authentication from the Requests library</a></li>
</ul>
<h1 id="会话认证session-based-auth">会话认证(Session-based Auth)</h1>
<p>通过会话，用户状态可以存储在服务端上。这并不需要用户每次请求都携带账户密码信息。而是在他们登录过后，在服务端会验证登录凭证，如果是合法的，就会创建一个会话并存储在会话池中，然后返回该会话的唯一标识ID(Session ID)给浏览器，浏览器会将该ID当作cookie保存在浏览器中并在每次请求时携带该cookie</p>
<h2 id="流程-2">流程</h2>
<p><img src="https://testdriven.io/static/images/blog/web-authentication-methods/session_auth.png" alt="Session-based Auth"></p>
<h2 id="优点-2">优点</h2>
<ol>
<li>由于不需要携带登录凭证，在后续的判断登录会十分迅速</li>
<li>提高了用户体验</li>
<li>容易实现，很多框架(例如Django)提供了这种验证方法并开箱即用</li>
</ol>
<h2 id="缺点-2">缺点</h2>
<ol>
<li>Session是有状态的。服务端会跟踪每一个会话。用于存储会话信息的会话池需要给众多服务提供验证服务。因此，这对RESTful服务来说并不友好，因为REST是一种无状态协议</li>
<li>每一个请求都会携带cookie信息，就算是不需要验证的请求也如此</li>
<li>对CSRF攻击的防护不足([什么是CSRF，如何在Flask中抵御CSRF攻击]https://testdriven.io/blog/csrf-flask/))</li>
</ol>
<h2 id="第三方依赖-1">第三方依赖</h2>
<ol>
<li><a href="https://flask-login.readthedocs.io/">Flask-Login</a></li>
<li><a href="https://flask-httpauth.readthedocs.io/">Flask-HTTPAuth</a></li>
<li><a href="https://docs.djangoproject.com/en/3.1/topics/auth/">User authentication in Django</a></li>
<li><a href="https://github.com/MushroomMaula/fastapi_login">FastAPI-Login</a></li>
<li><a href="https://github.com/frankie567/fastapi-users">FastAPI-Users</a></li>
</ol>
<h2 id="代码-2">代码</h2>
<p><code>Flask-login</code>对会话验证非常合适，该包负责登录和注销，并可以在一段时间内记住用户信息</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">request</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">flask_login</span> <span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">LoginManager</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">UserMixin</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">current_user</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">login_required</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">login_user</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">werkzeug.security</span> <span class="kn">import</span> <span class="n">generate_password_hash</span><span class="p">,</span> <span class="n">check_password_hash</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">update</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">SECRET_KEY</span><span class="o">=</span><span class="s2">&#34;change_this_key&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">login_manager</span> <span class="o">=</span> <span class="n">LoginManager</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">login_manager</span><span class="o">.</span><span class="n">init_app</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">users</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;username&#34;</span><span class="p">:</span> <span class="n">generate_password_hash</span><span class="p">(</span><span class="s2">&#34;password&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">User</span><span class="p">(</span><span class="n">UserMixin</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@login_manager.user_loader</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">user_loader</span><span class="p">(</span><span class="n">username</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">username</span> <span class="ow">in</span> <span class="n">users</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">user_model</span> <span class="o">=</span> <span class="n">User</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">user_model</span><span class="o">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">username</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">user_model</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@app.route</span><span class="p">(</span><span class="s2">&#34;/login&#34;</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;POST&#34;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">login_page</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">get_json</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">username</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;username&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">password</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;password&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">username</span> <span class="ow">in</span> <span class="n">users</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">check_password_hash</span><span class="p">(</span><span class="n">users</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">username</span><span class="p">),</span> <span class="n">password</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">user_model</span> <span class="o">=</span> <span class="n">User</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="n">user_model</span><span class="o">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">username</span>
</span></span><span class="line"><span class="cl">            <span class="n">login_user</span><span class="p">(</span><span class="n">user_model</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="s2">&#34;Wrong credentials&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="s2">&#34;logged in&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@app.route</span><span class="p">(</span><span class="s2">&#34;/&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@login_required</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">protected</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="sa">f</span><span class="s2">&#34;Current user: </span><span class="si">{</span><span class="n">current_user</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span></span></code></pre></div><h2 id="资料-2">资料</h2>
<ul>
<li><a href="https://tools.ietf.org/id/draft-broyer-http-cookie-auth-00.html">IETF: Cookie-based HTTP Authentication</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-add-authentication-to-your-app-with-flask-login">How To Add Authentication to Your App with Flask-Login</a></li>
<li><a href="https://testdriven.io/blog/flask-spa-auth/">Session-based Auth with Flask for Single Page Apps</a></li>
<li><a href="https://testdriven.io/blog/csrf-flask/">CSRF Protection in Flask</a></li>
<li><a href="https://learndjango.com/tutorials/django-login-and-logout-tutorial">Django Login and Logout Tutorial</a></li>
<li><a href="https://testdriven.io/blog/django-spa-auth/">Django Session-based Auth for Single Page Apps</a></li>
<li><a href="https://frankie567.github.io/fastapi-users/configuration/authentication/cookie/">FastAPI-Users: Cookie Auth</a></li>
</ul>
<h1 id="令牌验证token-based-authentication">令牌验证(Token-Based Authentication)</h1>
<p>这种方法是将cookies用令牌认证替代。用户提供登录凭证服务端返回一种标识令牌，这个令牌将会在后续的请求中携带</p>
<p>最常见并广泛应用的令牌是<code>JSON Web Token</code>([JWT]https://jwt.io/))。JWT由三部分组成</p>
<ul>
<li>Header(携带令牌的类型和使用的Hash算法类型)</li>
<li>Payload(携带对该令牌信息的声明结构体)</li>
<li>Signature(用于验证信息是否在传输过程中发生错误)</li>
</ul>
<p>以上三部分都将使用base64编码，并且每部分都会进行Hash处理，不同类型中间用<code>.</code>分割。由于这些信息都被编码过，任何人都能通过解码来查看携带的信息。但是只有验证的用户才能生成合法的令牌。令牌将会通过签名来验证合法性。</p>
<blockquote>
<p>JWT是一种紧凑的、URL安全的方法，用于表示在两方互相传输的声明。在JWT中，声明信息被编码成JSON信息，用于JWS或者JWE，从而使声明可以进行数字签名或完整性保护[IETE]https://tools.ietf.org/html/rfc7519)(翻译的不是很好)</p>
</blockquote>
<p>服务端并不需要保存令牌，令牌只能使用签名来验证。最近，由于RESTful API和单页应用程序的兴起，令牌验证这种方法的采用有所增加</p>
<h2 id="流程-3">流程</h2>
<p><img src="https://testdriven.io/static/images/blog/web-authentication-methods/token_auth.png" alt="Token-Based Auth"></p>
<h2 id="优点-3">优点</h2>
<ol>
<li>无状态。服务端不需要存储令牌，只需要令牌中的签名用于验证。这方每个请求不需要调用数据库从而更加快速</li>
<li>对多个服务需要验证的微服务架构来说非常合适。我们只需要配置如何处理令牌和令牌密钥。</li>
</ol>
<h2 id="缺点-3">缺点</h2>
<ol>
<li>客户端需要考虑如何存储令牌，这可能导致XSS或者CSRF攻击</li>
<li>令牌不可删除，只能过期。这意味着如果令牌泄漏，攻击者可以使用这个令牌直至过期。因此非常有必要对令牌设置一个较短的过期时间例如15分钟</li>
<li>需要在令牌快过期时进行令牌的自动刷新</li>
<li>删除令牌的唯一方式是创建一个数据库或者黑名单。这会对微服务架构来说增加额外的负担和潜在的问题。</li>
</ol>
<h2 id="第三方依赖-2">第三方依赖</h2>
<ul>
<li><a href="https://github.com/vimalloc/flask-jwt-extended">Flask-JWT-Extended</a></li>
<li><a href="https://flask-httpauth.readthedocs.io/">Flask-HTTPAuth</a></li>
<li><a href="https://github.com/SimpleJWT/django-rest-framework-simplejwt">Simple JWT for Django REST Framework</a></li>
<li><a href="https://github.com/IndominusByte/fastapi-jwt-auth">FastAPI JWT Auth</a></li>
</ul>
<h2 id="代码-3">代码</h2>
<p><code>Flask-JWT-Extended</code>可以提供处理JWT的许多方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">jsonify</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">flask_jwt_extended</span> <span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">JWTManager</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">jwt_required</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">create_access_token</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">get_jwt_identity</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">werkzeug.security</span> <span class="kn">import</span> <span class="n">check_password_hash</span><span class="p">,</span> <span class="n">generate_password_hash</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">update</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">JWT_SECRET_KEY</span><span class="o">=</span><span class="s2">&#34;please_change_this&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">jwt</span> <span class="o">=</span> <span class="n">JWTManager</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">users</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;username&#34;</span><span class="p">:</span> <span class="n">generate_password_hash</span><span class="p">(</span><span class="s2">&#34;password&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@app.route</span><span class="p">(</span><span class="s2">&#34;/login&#34;</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;POST&#34;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">login_page</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">username</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">json</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;username&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">password</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">json</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;password&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">username</span> <span class="ow">in</span> <span class="n">users</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">check_password_hash</span><span class="p">(</span><span class="n">users</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">username</span><span class="p">),</span> <span class="n">password</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">access_token</span> <span class="o">=</span> <span class="n">create_access_token</span><span class="p">(</span><span class="n">identity</span><span class="o">=</span><span class="n">username</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">jsonify</span><span class="p">(</span><span class="n">access_token</span><span class="o">=</span><span class="n">access_token</span><span class="p">),</span> <span class="mi">200</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="s2">&#34;Wrong credentials&#34;</span><span class="p">,</span> <span class="mi">400</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@app.route</span><span class="p">(</span><span class="s2">&#34;/&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@jwt_required</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">protected</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">jsonify</span><span class="p">(</span><span class="n">logged_in_as</span><span class="o">=</span><span class="n">get_jwt_identity</span><span class="p">()),</span> <span class="mi">200</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span></span></code></pre></div><h2 id="资料-3">资料</h2>
<ul>
<li><a href="https://jwt.io/introduction">Introduction to JSON Web Tokens</a></li>
<li><a href="https://tools.ietf.org/html/rfc7519">IETF: JSON Web Token (JWT)</a></li>
<li><a href="https://simpleisbetterthancomplex.com/tutorial/2018/12/19/how-to-use-jwt-authentication-with-django-rest-framework.html">How to Use JWT Authentication with Django REST Framework</a></li>
<li><a href="https://testdriven.io/blog/fastapi-jwt-auth/">Securing FastAPI with JWT Token-based Authentication</a></li>
<li><a href="https://blog.asayer.io/jwt-authentication-best-practices">JWT Authentication Best Practices</a></li>
</ul>
<h1 id="一次性密码one-time-passwords">一次性密码(One Time Passwords)</h1>
<p>一次性密码通常用于确认认证消息。OTPs会随机生成代码用于验证用户是否是声明中的。也经常用于APP中的二次验证</p>
<p>为了使用OTPs，必须要有一个可靠可信赖的系统。这个系统将会用于验证email或电话</p>
<p>现代OTPs是无状态的，并且有很多方法来验证。尽管有很多类型的OTPs，但是基于时间的OTPs(TOTPs)是目前毫无争议使用最多的方法。验证代码在生成过后会在一段时间后过期。</p>
<p>由于你添加了一层安全检查，OTPS可以用于处理一些安全性高度需要的APP例如银行或其他金融服务</p>
<h2 id="流程-4">流程</h2>
<p>传统的OTPS验证流程如下</p>
<ul>
<li>客户端发送用户密码</li>
<li>在认证过后，服务端生成随机的代码，保存在服务端并返回给可信赖的系统</li>
<li>客户通过可信赖系统获取生成的代码，在APP中输入返回给客户端</li>
<li>服务端验证代码是否和保存的一致，如果符合则放行</li>
</ul>
<p>基于时间的TOTPS流程如下</p>
<ul>
<li>客户端发送用户密码</li>
<li>在认证后，服务端通过随机种子生成随机代码，保存在服务端并返回给可信赖的系统</li>
<li>客户通过可信赖系统获取生成的代码，在APP中输入返回给客户端</li>
<li>服务端验证代码是否和存储的代码一致并且没有过期，如果符合则放行</li>
</ul>
<p>例如<a href="https://en.wikipedia.org/wiki/Google_Authenticator">Google Authenticator</a>, <a href="https://www.microsoft.com/en-us/account/authenticator">Microsoft Authenticator</a>, <a href="https://en.wikipedia.org/wiki/FreeOTP">FreeOTP</a>的OTP代理商工作流程</p>
<ul>
<li>在代理生认证2FA后，服务器生成一个随机种子，并以唯一的二维码形式发送给用户</li>
<li>用户通过2FA应用扫描二维码用于验证信赖设备</li>
<li>当OTP需要时，用户会检查设备中的代码，并且在Web中输入</li>
<li>服务端验证输入的代码，如果符合则放行</li>
</ul>
<h2 id="优点-4">优点</h2>
<ul>
<li>添加了一层防护层</li>
<li>密码泄漏的危险性降低，或者说服务只会通过OTP验证</li>
</ul>
<h2 id="缺点-4">缺点</h2>
<ul>
<li>你需要存储OTPs生成的种子</li>
<li>如果你丢失了回复代码，OTP代理商例如Google Authenticator非常难设置</li>
<li>当可信赖设备不可使用时会产生诸多问题(没电，网络错误等等)。因此，添加备用设备非常有必要</li>
</ul>
<h2 id="第三方依赖-3">第三方依赖</h2>
<ul>
<li><a href="https://pyauth.github.io/pyotp/">PyOTP - The Python One-Time Password Library</a></li>
<li><a href="https://github.com/django-otp/django-otp">django-otp</a></li>
</ul>
<h2 id="代码-4">代码</h2>
<p><code>PyOTP</code>提供了基于时间和基于计数器的OTPs</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">time</span> <span class="kn">import</span> <span class="n">sleep</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pyotp</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">otp</span> <span class="o">=</span> <span class="n">pyotp</span><span class="o">.</span><span class="n">TOTP</span><span class="p">(</span><span class="n">pyotp</span><span class="o">.</span><span class="n">random_base32</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    <span class="n">code</span> <span class="o">=</span> <span class="n">otp</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;OTP generated: </span><span class="si">{</span><span class="n">code</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Verify OTP: </span><span class="si">{</span><span class="n">otp</span><span class="o">.</span><span class="n">verify</span><span class="p">(</span><span class="n">code</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">sleep</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Verify after 30s: </span><span class="si">{</span><span class="n">otp</span><span class="o">.</span><span class="n">verify</span><span class="p">(</span><span class="n">code</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span></code></pre></div><pre tabindex="0"><code>OTP generated: 474771
Verify OTP: True
Verify after 30s: False
</code></pre><h2 id="资料-4">资料</h2>
<ul>
<li><a href="https://tools.ietf.org/html/rfc6238">IETF: TOTP: Time-Based One-Time Password Algorithm</a></li>
<li><a href="https://tools.ietf.org/html/rfc2289">IETF: A One-Time Password System</a></li>
<li><a href="https://hackernoon.com/implementing-2fa-how-time-based-one-time-password-actually-works-with-python-examples-cm1m3ywt">Implementing 2FA: How Time-Based One-Time Password Actually Works (With Python Examples)</a></li>
</ul>
<h1 id="oauth和openid">OAuth和OpenID</h1>
<p>OAuth/OAuth2和OpenID时目前比较火的认证方法。他们都要求实现社交登录(一种单点登录形式)，使用来自社交网络服务(例如Facebook，Twitter或谷歌)现有的信息介入第三方网站，而不是创建一个新的登录账户</p>
<p>这种类型的认证授权可以在你需要高度安全认证时使用。一些提供商有组够多的资源来处理认证。利用这些久经考验的认证系统可以让你的应用更为的安全。</p>
<p>这种方法通常与会话认证搭配使用</p>
<h2 id="流程-5">流程</h2>
<p>你浏览一些需要登录的网站，你进入登录界面并发现一个<code>使用谷歌登录</code>的按钮。你点击按钮后会引导你进入谷歌登录界面。一旦登录认证完成，你会被重定向至刚刚浏览的需要登录的网站。这是一种使用OpenID认证的例子。它会让你用一个现成的账户登录而并不需要再创建一个新帐号</p>
<p>最著名的OpenID提供商有谷歌，Facebook，Github</p>
<p>在登录过后，你进入网站的下载服务，在下载大文件时直接接入到谷歌云中。网站是如何访问你的谷歌云的呢？这就是OAuth发挥作用的时候。你可以在授予访问其他网站上资源的权限，比如此时的谷歌云访问权限。</p>
<h2 id="优点-5">优点</h2>
<ul>
<li>提高了安全性</li>
<li>更容易且快速的登录流程，不需要额外创建一个账户</li>
<li>由于认证时无密码的，一旦出现安全漏洞，不会对第三方造成损害</li>
</ul>
<h2 id="缺点-5">缺点</h2>
<ul>
<li>你需要依赖不在你掌控的第三方APP。如果OpenID服务宕机，用户就不能再进行登录</li>
<li>人通常会护士OAuth应用的授权信息</li>
<li>没有配置OpenID提供上账户的用户将无法访问你的应用。最好的方法是本站注册和OAuth认证同时做。</li>
</ul>
<h2 id="第三方依赖-4">第三方依赖</h2>
<p>社交登录</p>
<ul>
<li><a href="https://authomatic.github.io/authomatic/">Authomatic</a></li>
<li><a href="https://python-social-auth.readthedocs.io/">Python Social Auth</a></li>
<li><a href="https://flask-dance.readthedocs.io/">Flask-Dance</a></li>
<li><a href="https://django-allauth.readthedocs.io/">django-allauth</a></li>
</ul>
<p>创建自己的OAuth或OpenID服务</p>
<ul>
<li><a href="https://authlib.org/">Authlib</a></li>
<li><a href="https://oauthlib.readthedocs.io/">OAuthLib</a></li>
<li><a href="https://flask-oauthlib.readthedocs.io/">Flask-OAuthlib</a></li>
<li><a href="https://django-oauth-toolkit.readthedocs.io/">Django OAuth Toolkit</a></li>
<li><a href="https://django-oidc-provider.readthedocs.io/">Django OIDC Provider</a></li>
<li><a href="https://fastapi.tiangolo.com/tutorial/security/simple-oauth2/">FastAPI: Simple OAuth2 with Password and Bearer</a></li>
<li><a href="https://fastapi.tiangolo.com/tutorial/security/oauth2-jwt/#advanced-usage-with-scopes">FastAPI: OAuth2 with Password (and hashing), Bearer with JWT tokens</a></li>
</ul>
<h2 id="代码-5">代码</h2>
<p>你可以通过<code>Flask-Dance</code>接入Github服务</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">url_for</span><span class="p">,</span> <span class="n">redirect</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">flask_dance.contrib.github</span> <span class="kn">import</span> <span class="n">make_github_blueprint</span><span class="p">,</span> <span class="n">github</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">app</span><span class="o">.</span><span class="n">secret_key</span> <span class="o">=</span> <span class="s2">&#34;change me&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s2">&#34;GITHUB_OAUTH_CLIENT_ID&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;1aaf1bf583d5e425dc8b&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s2">&#34;GITHUB_OAUTH_CLIENT_SECRET&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;dee0c5bc7e0acfb71791b21ca459c008be992d7c&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">github_blueprint</span> <span class="o">=</span> <span class="n">make_github_blueprint</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">app</span><span class="o">.</span><span class="n">register_blueprint</span><span class="p">(</span><span class="n">github_blueprint</span><span class="p">,</span> <span class="n">url_prefix</span><span class="o">=</span><span class="s2">&#34;/login&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@app.route</span><span class="p">(</span><span class="s2">&#34;/&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="ow">not</span> <span class="n">github</span><span class="o">.</span><span class="n">authorized</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="n">url_for</span><span class="p">(</span><span class="s2">&#34;github.login&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">resp</span> <span class="o">=</span> <span class="n">github</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;/user&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">resp</span><span class="o">.</span><span class="n">ok</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="sa">f</span><span class="s2">&#34;You have successfully logged in, </span><span class="si">{</span><span class="n">resp</span><span class="o">.</span><span class="n">json</span><span class="p">()[</span><span class="s1">&#39;login&#39;</span><span class="p">]</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span></span></code></pre></div><h2 id="资料-5">资料</h2>
<ul>
<li><a href="https://developer.okta.com/blog/2019/10/21/illustrated-guide-to-oauth-and-oidc">An Illustrated Guide to OAuth and OpenID Connect</a></li>
<li><a href="https://mherman.org/presentations/node-oauth-openid/#1">Introduction to OAuth 2.0 and OpenID Connect</a></li>
<li><a href="https://realpython.com/flask-google-login/">Create a Flask Application With Google Login</a></li>
<li><a href="https://learndjango.com/tutorials/django-allauth-tutorial">Django-allauth Tutorial</a></li>
<li><a href="https://medium.com/data-rebels/fastapi-google-as-an-external-authentication-provider-3a527672cf33">FastAPI — Google as an external authentication provider</a></li>
</ul>
<h1 id="结论">结论</h1>
<p>在这篇文章，我们认识了一些不同的Web认证方法，每一种都有各自的优点和缺点</p>
<p>在何时使用呢？这就需要具体问题具体分析，通常有几条规则</p>
<ul>
<li>对利用服务器模板的Web应用程序，通过用户密码进行会话认证是最合适的。也可以增加OAuth和OpenID作为另一种方式</li>
<li>对RESTfulAPIs来说，无状态的令牌验证方法是最合适的</li>
<li>如果你想处理高度敏感的数据，你可能需要在认证过程中添加OTPs</li>
</ul>
<p>最后你要知道，上述的例子只是接触到了认证的表皮。在生产环境中需要更深层的配置。</p>]]></content></item></channel></rss>